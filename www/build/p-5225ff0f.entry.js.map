{"version":3,"names":["appHomeCss","AppHomeStyle0","AppHome","this","API_URL","undefined","componentWillLoad","setLookUpItem","itemId","item","items","find","id","currentDisplayItem","fetchFromApi","route","response","fetch","ok","Error","status","json","sortByPercentageVariation","sort","a","b","variationA","calculatePercentageVariation","variationB","averagePrices","length","prices","map","price","averagePrice","latestPrice","previousPrice","render","h","key","class","Router","createRouter","appRootCss","AppRootStyle0","AppRoot","onClick","push","Switch","Route","path","itemRecipeComponentCss","ItemRecipeComponentStyle0","ItemRecipeComponent","currentCatId","itemsData","itemsData2","runes","rootCategories","processItems","concat","filter","isNaN","breakableRate","error","console","Promise","all","async","ResultRecipes","characteristics","totalCraftPrice","calculateCraftPrice","_runeDetails","calculateRuneDetails","setLowestBreakableRate","setBenefice","changeCategory","reduce","total","recipe","Ingredients","sum","ingredient","_c","_b","_a","Ingredient","quantity","runeDetails","totalRunePrice","totalFocusRunePrice","focusPrice","bestCharToFocus","forEach","char","from","characteristic","rune","density","value","to","pdb","lvl","Math","max","priceNoFocus","totalPdbFocus","calculateFocusPdb","priceFocus","type","_d","name","quantityFocus","quantityNoFocus","focusedCharacteristic","focusChar","focusValue","focusPdb","rateFocus","rateNoFocus","coeff","min","minBreakableRateFocus","minBreakableRateNoFocus","benefitFocus","benefitNoFocus","benefit","benefitPercentage","sortItems","orderDirection","propToSortOn","sortByFocusedChar","focusFilterRuneId","onChange","val","target","cat","v","category","toFixed"],"sources":["src/components/app-home/app-home.css?tag=app-home","src/components/app-home/app-home.tsx","src/index.ts","src/components/app-root/app-root.css?tag=app-root","src/components/app-root/app-root.tsx","src/components/item-recipe-component/item-recipe-component.css?tag=item-recipe-component","src/components/item-recipe-component/item-recipe-component.tsx"],"sourcesContent":[".app-home {\r\n  padding: 10px;\r\n}\r\n\r\nbutton {\r\n  background: #5851ff;\r\n  color: white;\r\n  margin: 8px;\r\n  border: none;\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  padding: 16px 20px;\r\n  border-radius: 2px;\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.08);\r\n  outline: 0;\r\n  letter-spacing: 0.04em;\r\n  transition: all 0.15s ease;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(1px);\r\n}\r\n","import { Component, h, State } from '@stencil/core';\r\nimport { Item } from '../../components';\r\nimport { RootCategory } from '../../types/Item';\r\n\r\n\r\n@Component({\r\n  tag: 'app-home',\r\n  styleUrl: 'app-home.css',\r\n  shadow: false,\r\n})\r\n\r\n//\r\n\r\nexport class AppHome {\r\n  API_URL: string = 'http://localhost:2989';\r\n  @State() currentDisplayItem:Item = undefined;\r\n  @State() currentCategoryId: number = 1;\r\n  @State() items: Item[];\r\n  @State() rootCategories: RootCategory[];\r\n  @State() renderLimit: number = 200;\r\n  async componentWillLoad() {\r\n    //this.items = await this.fetchFromApi(\"/items/items/average-prices\");\r\n    // this.sortByPercentageVariation();\r\n    // this.rootCategories = await this.fetchFromApi(\"/rootCategories\");\r\n  }\r\n\r\n  setLookUpItem(itemId:number){\r\n    const item = this.items.find((item)=>item.id == itemId);\r\n    if(item){\r\n      this.currentDisplayItem = item;\r\n    }\r\n  }\r\n\r\n\r\n  async fetchFromApi(route: string) {\r\n    const response = await fetch(this.API_URL + route);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n\r\n  }\r\n\r\n  sortByPercentageVariation() {\r\n    this.items = [...this.items].sort((a, b) => {\r\n      const variationA = this.calculatePercentageVariation(a);\r\n      const variationB = this.calculatePercentageVariation(b);\r\n      return variationB - variationA; // Tri décroissant\r\n    });\r\n  }\r\n\r\n  calculatePercentageVariation(item: Item): number {\r\n    if (item.averagePrices.length < 2) return 0;\r\n    const prices = item.averagePrices.map((price) => price.averagePrice);\r\n    const latestPrice = prices[prices.length - 1];\r\n    const previousPrice = prices[prices.length - 2];\r\n    if (previousPrice === 0) return 0; // Évite la division par zéro\r\n    return ((latestPrice - previousPrice) / previousPrice) * 100;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"app-home\">\r\n        {/* <div>\r\n\r\n          <input type=\"number\" value={this.renderLimit} onChange={(e) => this.renderLimit = (e.target as any).value}></input>\r\n          <select onChange={(e) => this.currentCategoryId = (e.target as any).value}>\r\n            {this.rootCategories.map((rootcat) => {\r\n              return <option value={rootcat.id}>{rootcat.name}</option>\r\n            })}\r\n          </select>\r\n          <div>\r\n            <datalist id=\"suggestions\">\r\n              {this.items.map((item)=>{\r\n                return <option value={item.id}>{item.name}</option>\r\n              })}\r\n            </datalist>\r\n            <input onChange={(e)=>{this.setLookUpItem((e.target as any).value )}} autoComplete=\"on\" list=\"suggestions\" />\r\n          </div>\r\n        </div>\r\n        {this.currentDisplayItem ? <div><div class=\"row\"><item-lookup-component item={this.currentDisplayItem}></item-lookup-component></div></div> : \r\n          this.items.filter((item) => item.averagePrices != null && item.averagePrices.length != 0).filter((item) => item.category.rootCategory.id == this.currentCategoryId).slice(0, this.renderLimit).map((item) => {\r\n            return <div class=\"row\"><item-lookup-component item={item}></item-lookup-component></div>\r\n          })\r\n        } */}\r\n        <item-recipe-component></item-recipe-component>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { createRouter } from 'stencil-router-v2';\r\n\r\nexport { Components, JSX } from './components';\r\n\r\nexport const Router = createRouter();\r\n","header {\r\n  background: #5851ff;\r\n  color: white;\r\n  height: 56px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\r\n}\r\n\r\nh1 {\r\n  font-size: 1.4rem;\r\n  font-weight: 500;\r\n  color: #fff;\r\n  padding: 0 12px;\r\n  cursor: pointer;\r\n}\r\n","import { Component, h } from '@stencil/core';\r\nimport { Router } from \"../../\";\r\nimport { Route } from \"stencil-router-v2\";\r\n\r\n@Component({\r\n  tag: 'app-root',\r\n  styleUrl: 'app-root.css',\r\n  shadow: false,\r\n})\r\nexport class AppRoot {\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n            <h1 onClick={() => Router.push(\"/\")}>\r\n              Stencil App Starter\r\n            </h1>\r\n        </header>\r\n\r\n        <main>\r\n          <Router.Switch>\r\n            <Route path=\"/\">\r\n              <app-home />\r\n            </Route>\r\n          </Router.Switch>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n","import { Component, State, h } from '@stencil/core';\r\nimport { Item, RecipeIngredient, RootCategory, Rune, runeDetails } from '../../types/Item';\r\n\r\n@Component({\r\n  tag: 'item-recipe-component',\r\n  styleUrl: 'item-recipe-component.css',\r\n  shadow: false,\r\n})\r\nexport class ItemRecipeComponent {\r\n  API_URL: string = 'http://localhost:2989';\r\n  @State() runes: Item[] = [];\r\n  @State() items: Item[] = [];\r\n  @State() focusFilterRuneId:number = 0;\r\n  @State() rootCategories:RootCategory[] = [];\r\n  @State() orderDirection:string = \"DESC\";\r\n\r\n  @State() propToSortOn:string;\r\n\r\n  @State() refresh:boolean = false;\r\n\r\n  currentCatId: number = 2;\r\n\r\n  async componentWillLoad() {\r\n    try {\r\n      const itemsData:Item[] = await this.fetchFromApi('/items/equipments/7?offset=0&limit=500');\r\n      const itemsData2:Item[] = await this.fetchFromApi('/items/equipments/7?offset=500&limit=500');\r\n      this.runes = await this.fetchFromApi('/items/runes');\r\n\r\n      this.rootCategories = await this.fetchFromApi('/rootCategories');\r\n      this.items = await this.processItems(itemsData.concat(itemsData2));\r\n      this.items = this.items.filter((item) => !isNaN(item.breakableRate));\r\n    } catch (error) {\r\n      console.error('Error fetching items:', error);\r\n    }\r\n  }\r\n\r\n  async processItems(itemsData: Item[]): Promise<Item[]> {\r\n    return Promise.all(\r\n      itemsData.map(async (item) => {\r\n        if (!item.ResultRecipes || !item.characteristics) return item;\r\n\r\n        item.totalCraftPrice = this.calculateCraftPrice(item);\r\n        item._runeDetails = this.calculateRuneDetails(item);\r\n\r\n        this.setLowestBreakableRate(item);\r\n        this.setBenefice(item);\r\n\r\n        return item;\r\n      })\r\n    );\r\n  }\r\n\r\n  async changeCategory(id:number){\r\n    const itemsData:Item[] = await this.fetchFromApi(`/items/equipments/${id}?offset=0&limit=500`);\r\n    const itemsData2:Item[] = await this.fetchFromApi(`/items/equipments/${id}?offset=500&limit=500`);\r\n    this.items = await this.processItems(itemsData.concat(itemsData2));\r\n    this.items = this.items.filter((item) => !isNaN(item.breakableRate));\r\n\r\n\r\n  }\r\n\r\n  calculateCraftPrice(item: Item): number {\r\n    return item.ResultRecipes.reduce((total, recipe) => {\r\n      return (\r\n        total +\r\n        recipe.Ingredients.reduce((sum, ingredient: RecipeIngredient) => {\r\n          const price = ingredient.Ingredient?.averagePrices?.[0]?.averagePrice || 0;\r\n          return sum + price * ingredient.quantity;\r\n        }, 0)\r\n      );\r\n    }, 0);\r\n  }\r\n\r\n  calculateRuneDetails(item: Item): runeDetails[] {\r\n    const runeDetails: runeDetails[] = [];\r\n    let totalRunePrice = 0;\r\n    let totalFocusRunePrice = 0;\r\n\r\n    let focusPrice = 0;\r\n    let bestCharToFocus:Rune;\r\n    item.characteristics.forEach((char) => {\r\n      if (char.from < 0 || !char.characteristic?.runes) return;\r\n\r\n      char.characteristic.runes.forEach((rune) => {\r\n        const density = rune.density || 1;\r\n\r\n        \r\n        const averagePrice = rune.rune?.averagePrices?.[0]?.averagePrice || 0;\r\n        const value = char.to ? (char.from + char.to) / 2 : char.from;\r\n\r\n        const pdb = (((3 * value * density * item.lvl) / 200) + 1) / Math.max(density, 1);\r\n        const priceNoFocus = pdb * averagePrice;\r\n        totalRunePrice += priceNoFocus;\r\n\r\n\r\n        \r\n        const totalPdbFocus = this.calculateFocusPdb(item, char, density);\r\n\r\n        const priceFocus = totalPdbFocus * averagePrice;\r\n\r\n        if(priceFocus > focusPrice){\r\n          focusPrice = priceFocus;\r\n          bestCharToFocus = rune;\r\n        }\r\n\r\n        totalFocusRunePrice = Math.max(totalFocusRunePrice, priceFocus);\r\n\r\n        runeDetails.push({\r\n          type: rune.rune?.name || 'Unknown Rune',\r\n          quantityFocus: totalPdbFocus,\r\n          quantityNoFocus: pdb,\r\n          priceFocus,\r\n          priceNoFocus,\r\n          focusedCharacteristic: char.characteristic.name,\r\n        });\r\n      });\r\n    });\r\n\r\n    item.totalRunePrice = totalRunePrice;\r\n    item.totalFocusRunePrice = totalFocusRunePrice;\r\n    item.bestCharToFocus = bestCharToFocus;\r\n    return runeDetails;\r\n  }\r\n\r\n  calculateFocusPdb(item: Item, char, density: number): number {\r\n    return item.characteristics.reduce((total, focusChar) => {\r\n      if (focusChar.from < 0) return total;\r\n\r\n      const focusValue = focusChar.to\r\n        ? (focusChar.from + focusChar.to) / 2\r\n        : focusChar.from;\r\n      const focusPdb = (((3 * focusValue * (focusChar.characteristic.runes[0]?.density || 1) * item.lvl) / 200) + 1);\r\n\r\n      return total + (focusChar.characteristic.id === char.characteristic.id ? focusPdb : focusPdb * 0.5);\r\n    }, 0) / Math.max(density, 1);\r\n  }\r\n\r\n  setLowestBreakableRate(item: Item) {\r\n    const rateFocus = item.totalCraftPrice / item.totalFocusRunePrice;\r\n    const rateNoFocus = item.totalCraftPrice / item.totalRunePrice;\r\n    const coeff = Math.min(rateFocus, rateNoFocus);\r\n\r\n    item.breakableRate = coeff;\r\n    item.minBreakableRateFocus = rateFocus;\r\n    item.minBreakableRateNoFocus = rateNoFocus;\r\n\r\n    item._runeDetails.forEach((rune) => {\r\n      rune.quantityFocus *= coeff;\r\n      rune.quantityNoFocus *= coeff;\r\n      rune.priceFocus *= coeff;\r\n      rune.priceNoFocus *= coeff;\r\n    });\r\n  }\r\n\r\n  setBenefice(item: Item) {\r\n    const benefitFocus = item.totalFocusRunePrice - item.totalCraftPrice;\r\n    const benefitNoFocus = item.totalRunePrice - item.totalCraftPrice;\r\n\r\n    item.benefit = Math.max(benefitFocus, benefitNoFocus);\r\n    item.benefitPercentage = item.totalCraftPrice > 0 ? (item.benefit / item.totalCraftPrice) * 100 : 0;\r\n  }\r\n\r\n  async fetchFromApi(route: string) {\r\n    const response = await fetch(this.API_URL + route);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  }\r\n\r\n  sortItems(){\r\n    if(this.orderDirection === \"DESC\"){\r\n      return this.items.sort((a, b) => b[this.propToSortOn] - a[this.propToSortOn]);\r\n    } else if(this.orderDirection === \"ASC\"){\r\n      return this.items.sort((a, b) => a[this.propToSortOn] - b[this.propToSortOn]);\r\n    } else return this.items;\r\n  }\r\n\r\n  sortByFocusedChar(){\r\n    \r\n    if(this.focusFilterRuneId == 0)\r\n      return this.sortItems();\r\n    return this.sortItems().filter((item)=>{\r\n      return item.bestCharToFocus?.rune?.id == this.focusFilterRuneId;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"items-list\">\r\n        <h1>Items with Exact Prices and Rune Details</h1>\r\n        <select onChange={(val)=> this.changeCategory((val.target as any).value)}>\r\n          {this.rootCategories.map((cat)=>{\r\n            return <option value={cat.id}>{cat.name}</option>\r\n          })}\r\n        </select>\r\n        <select onChange={(v)=> this.propToSortOn = ((v.target as any).value)}>\r\n          <option value=\"breakableRate\">Coeff</option>\r\n          <option value=\"totalCraftPrice\">Crafting Price</option>\r\n        </select>\r\n        <select onChange={(v)=>{this.orderDirection = (v.target as any).value;} }>\r\n          <option value=\"DESC\">DESC</option>\r\n          <option value=\"ASC\">ASC</option>\r\n        </select>\r\n        <select onChange={(v)=>{ this.focusFilterRuneId = ((v.target as any).value)} }>\r\n          <option value={0}>No filter</option>\r\n          {this.runes.map((rune)=>{\r\n            return <option value={rune.id}>{rune.name}</option>\r\n          })}\r\n  \r\n        </select>\r\n\r\n        {this.items?.length === 0 ? (\r\n          <p>Loading items...</p>\r\n        ) : (\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Item Name</th>\r\n                <th>Craft Cost</th>\r\n                <th>Focus</th>\r\n                <th>Minimum Break Coefficient</th>\r\n                <th>Rune Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.sortByFocusedChar().map((item) => (\r\n                item.totalCraftPrice > 0 && (\r\n                  <tr key={item.id}>\r\n                    <td>{item.name} : {item.category?.name} - lvl {item.lvl}</td>\r\n                    <td>{item.totalCraftPrice.toFixed(0)}</td>\r\n                    <td>{item.minBreakableRateFocus > item.minBreakableRateNoFocus ? 'No Focus' : 'Focus'}</td>\r\n                    <td>{(Math.min(item.minBreakableRateFocus, item.minBreakableRateNoFocus)*100).toFixed(0)}</td>\r\n                    <td>\r\n                      {item._runeDetails.length > 0 ? (\r\n                        <ul>\r\n                          {item._runeDetails.map((rune) => (\r\n                            <li key={rune.type}>\r\n                              {rune.type}:\r\n                              <ul>\r\n                                <li>Quantity Focus: {rune.quantityFocus.toFixed(1)} (Total: {rune.priceFocus.toFixed(2)})</li>\r\n                                <li>Quantity No Focus: {rune.quantityNoFocus.toFixed(1)} (Total: {rune.priceNoFocus.toFixed(2)})</li>\r\n                              </ul>\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      ) : 'N/A'}\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}