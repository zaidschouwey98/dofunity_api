{"version":3,"names":["appHomeCss","AppHomeStyle0","AppHome","this","API_URL","undefined","componentWillLoad","items","fetchFromApi","sortByPercentageVariation","rootCategories","setLookUpItem","itemId","item","find","id","currentDisplayItem","route","response","fetch","ok","Error","status","json","sort","a","b","variationA","calculatePercentageVariation","variationB","averagePrices","length","prices","map","price","averagePrice","latestPrice","previousPrice","render","h","key","class","type","value","renderLimit","onChange","e","target","currentCategoryId","rootcat","name","autoComplete","list","filter","category","rootCategory","slice","Router","createRouter","appRootCss","AppRootStyle0","AppRoot","onClick","push","Switch","Route","path","round","v","lim","l","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","c","d","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","len","ret","alpha","hexString","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","uid","isNullOrUndef","prototype","toString","call","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","create","klen","isValidKey","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","has","_isClickEvent","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","roundedRange","niceRange","floor","fraction","niceFraction","_factorize","result","sqrt","pop","isNumber","isNaN","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_angleDiff","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","_lookup","table","cmp","hi","lo","mid","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","listenArrayEvents","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","_getStartAndCountOfVisiblePoints","meta","points","animationsDisabled","pointCount","count","_sorted","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","getPixelForValue","_scaleRangesChanged","xScale","yScale","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","changed","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","set","duration","easing","loop","describe","_fallback","_indexable","_scriptable","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","right","bottom","left","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","values","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","join","delete","createSubResolver","arr","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","skip","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","monotoneAdjust","deltaK","mK","pointsLen","alphaK","betaK","tauK","squaredMagnitude","pointCurrent","pointAfter","monotoneCompute","valueAxis","pointBefore","iPixel","vPixel","splineCurveMonotone","slopeDelta","capControlPoint","pt","capBezierPoints","inArea","inAreaPrev","inAreaNext","_updateBezierControlPoints","controlPoints","spanGaps","cubicInterpolationMode","prev","tension","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","clientWidth","clientHeight","containerStyle","containerBorder","containerPadding","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","propertyFn","between","compare","normalize","normalizeSegment","getSegment","segment","startBound","endBound","_boundSegment","inside","subStart","prevValue","startIsBefore","endIsBefore","shouldStart","shouldStop","_boundSegments","segments","sub","findStartAndEnd","solidSegments","cur","stop","_computeSegments","segmentOptions","_loop","splitByStyles","completeLoop","_fullLoop","doSplitByStyles","chartContext","_chart","baseStyle","readStyle","_datasetIndex","prevStyle","addStyle","st","dir","p0","p0DataIndex","p1DataIndex","styleChanged","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","replacer","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","_duration","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","convertObjectDataToArray","vScale","iAxisKey","vAxisKey","adata","isStacked","stacked","getStackKey","indexScale","valueScale","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","dataset","createDataContext","dataIndex","raw","clearStacks","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","_index_","_value_","super","_dataset","_decimated","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","getBasePixel","lastPoint","updateControlPoints","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","startAngle","endAngle","getProps","getNearestCartesianItems","distanceMetric","minDistance","center","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","horizontal","isHorizontal","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","spacing","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","_length","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","diff","reverseAlign","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","startPixel","endPixel","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","setStyle","lineCap","lineJoin","getLineMethod","stepped","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","minY","maxY","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","_path","Path2D","strokePathDirect","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverBorderWidth","hoverRadius","mouseX","mouseY","inXRange","inYRange","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","_element","_args","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","lastTick","LogarithmicScale","_zero","itemLookupComponentCss","ItemLookupComponentStyle0","ItemLookupComponent","onItemChange","newValue","updateChart","createChart","canvasEl","createdAt","minValue","maxValue","ref","itemRecipeComponentCss","ItemRecipeComponentStyle0","ItemRecipeComponent","currentCatId","itemsData","itemsData2","runes","processItems","breakableRate","async","ResultRecipes","characteristics","totalCraftPrice","calculateCraftPrice","_runeDetails","calculateRuneDetails","setLowestBreakableRate","setBenefice","changeCategory","recipe","Ingredients","sum","ingredient","_c","_b","_a","Ingredient","quantity","runeDetails","totalRunePrice","totalFocusRunePrice","focusPrice","bestCharToFocus","char","characteristic","rune","density","pdb","lvl","priceNoFocus","totalPdbFocus","calculateFocusPdb","priceFocus","_d","quantityFocus","quantityNoFocus","focusedCharacteristic","focusChar","focusValue","focusPdb","rateFocus","rateNoFocus","coeff","minBreakableRateFocus","minBreakableRateNoFocus","benefitFocus","benefitNoFocus","benefit","benefitPercentage","sortItems","orderDirection","propToSortOn","sortByFocusedChar","focusFilterRuneId","cat","toFixed"],"sources":["src/components/app-home/app-home.css?tag=app-home","src/components/app-home/app-home.tsx","src/index.ts","src/components/app-root/app-root.css?tag=app-root","src/components/app-root/app-root.tsx","node_modules/@kurkle/color/dist/color.esm.js","node_modules/chart.js/dist/chunks/helpers.segment.js","node_modules/chart.js/dist/chart.js","src/components/item-lookup-component/item-lookup-component.css?tag=item-lookup-component","src/components/item-lookup-component/item-lookup-component.tsx","src/components/item-recipe-component/item-recipe-component.css?tag=item-recipe-component","src/components/item-recipe-component/item-recipe-component.tsx"],"sourcesContent":[".app-home {\r\n  padding: 10px;\r\n}\r\n\r\nbutton {\r\n  background: #5851ff;\r\n  color: white;\r\n  margin: 8px;\r\n  border: none;\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  padding: 16px 20px;\r\n  border-radius: 2px;\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1), 0 3px 6px rgba(0, 0, 0, 0.08);\r\n  outline: 0;\r\n  letter-spacing: 0.04em;\r\n  transition: all 0.15s ease;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(1px);\r\n}\r\n","import { Component, h, State } from '@stencil/core';\r\nimport { Item } from '../../components';\r\nimport { RootCategory } from '../../types/Item';\r\n\r\n\r\n@Component({\r\n  tag: 'app-home',\r\n  styleUrl: 'app-home.css',\r\n  shadow: false,\r\n})\r\n\r\n//\r\n\r\nexport class AppHome {\r\n  API_URL: string = 'http://localhost:2989/api';\r\n  @State() currentDisplayItem:Item = undefined;\r\n  @State() currentCategoryId: number = 1;\r\n  @State() items: Item[];\r\n  @State() rootCategories: RootCategory[];\r\n  @State() renderLimit: number = 200;\r\n  async componentWillLoad() {\r\n    this.items = await this.fetchFromApi(\"/items/items/average-prices\");\r\n    this.sortByPercentageVariation();\r\n    this.rootCategories = await this.fetchFromApi(\"/rootCategories\");\r\n  }\r\n\r\n  setLookUpItem(itemId:number){\r\n    const item = this.items.find((item)=>item.id == itemId);\r\n    if(item){\r\n      this.currentDisplayItem = item;\r\n    }\r\n  }\r\n\r\n\r\n  async fetchFromApi(route: string) {\r\n    const response = await fetch(this.API_URL + route);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n\r\n  }\r\n\r\n  sortByPercentageVariation() {\r\n    this.items = [...this.items].sort((a, b) => {\r\n      const variationA = this.calculatePercentageVariation(a);\r\n      const variationB = this.calculatePercentageVariation(b);\r\n      return variationB - variationA; // Tri décroissant\r\n    });\r\n  }\r\n\r\n  calculatePercentageVariation(item: Item): number {\r\n    if (item.averagePrices.length < 2) return 0;\r\n    const prices = item.averagePrices.map((price) => price.averagePrice);\r\n    const latestPrice = prices[prices.length - 1];\r\n    const previousPrice = prices[prices.length - 2];\r\n    if (previousPrice === 0) return 0; // Évite la division par zéro\r\n    return ((latestPrice - previousPrice) / previousPrice) * 100;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"app-home\">\r\n        <div>\r\n\r\n          <input type=\"number\" value={this.renderLimit} onChange={(e) => this.renderLimit = (e.target as any).value}></input>\r\n          <select onChange={(e) => this.currentCategoryId = (e.target as any).value}>\r\n            {this.rootCategories.map((rootcat) => {\r\n              return <option value={rootcat.id}>{rootcat.name}</option>\r\n            })}\r\n          </select>\r\n          <div>\r\n            <datalist id=\"suggestions\">\r\n              {this.items.map((item)=>{\r\n                return <option value={item.id}>{item.name}</option>\r\n              })}\r\n            </datalist>\r\n            <input onChange={(e)=>{this.setLookUpItem((e.target as any).value )}} autoComplete=\"on\" list=\"suggestions\" />\r\n          </div>\r\n        </div>\r\n        {this.currentDisplayItem ? <div><div class=\"row\"><item-lookup-component item={this.currentDisplayItem}></item-lookup-component></div></div> : \r\n          this.items.filter((item) => item.averagePrices != null && item.averagePrices.length != 0).filter((item) => item.category.rootCategory.id == this.currentCategoryId).slice(0, this.renderLimit).map((item) => {\r\n            return <div class=\"row\"><item-lookup-component item={item}></item-lookup-component></div>\r\n          })\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { createRouter } from 'stencil-router-v2';\r\n\r\nexport { Components, JSX } from './components';\r\n\r\nexport const Router = createRouter();\r\n","header {\r\n  background: #5851ff;\r\n  color: white;\r\n  height: 56px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\r\n}\r\n\r\nh1 {\r\n  font-size: 1.4rem;\r\n  font-weight: 500;\r\n  color: #fff;\r\n  padding: 0 12px;\r\n  cursor: pointer;\r\n}\r\n","import { Component, h } from '@stencil/core';\r\nimport { Router } from \"../../\";\r\nimport { Route } from \"stencil-router-v2\";\r\n\r\n@Component({\r\n  tag: 'app-root',\r\n  styleUrl: 'app-root.css',\r\n  shadow: false,\r\n})\r\nexport class AppRoot {\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n            <h1 onClick={() => Router.push(\"/\")}>\r\n              Home\r\n            </h1>\r\n            <h1 onClick={() => Router.push(\"/graphs\")}>\r\n              Graphs\r\n            </h1>\r\n        </header>\r\n\r\n        <main>\r\n          <Router.Switch>\r\n            <Route path=\"/\">\r\n              <item-recipe-component></item-recipe-component>\r\n            </Route>\r\n            <Route path=\"/graphs\">\r\n              <app-home />\r\n            </Route>\r\n          </Router.Switch>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.7\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.7\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.7\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n",":host {\r\n  display: block;\r\n}\r\n","import { Component, Prop, Watch, h } from '@stencil/core';\r\nimport { Chart, LineController, LineElement, PointElement, CategoryScale, LinearScale, Title,LogarithmicScale} from 'chart.js';\r\nimport { Item } from '../../types/Item';\r\n\r\nChart.register(LineController, LineElement, PointElement, CategoryScale, LinearScale,LogarithmicScale, Title);\r\n\r\n@Component({\r\n  tag: 'item-lookup-component',\r\n  styleUrl: 'item-lookup-component.css',\r\n  shadow: false,\r\n})\r\nexport class ItemLookupComponent {\r\n  canvasEl!: HTMLCanvasElement;\r\n  chart: Chart;\r\n  @Prop() item:Item;\r\n  @Watch('item')\r\n  onItemChange(newValue: Item) {\r\n    this.updateChart(newValue); // Mettre à jour le graphique avec les nouvelles données\r\n  }\r\n  componentWillLoad() {\r\n    this.createChart(this.item);\r\n  }\r\n  createChart(item: Item) {\r\n    const ctx = this.canvasEl.getContext('2d');\r\n    if (!ctx) {\r\n      console.error('Canvas context introuvable.');\r\n      return;\r\n    }\r\n\r\n    const labels = item.averagePrices.map((price) => price.createdAt);\r\n    const averagePrices = item.averagePrices.map((price) => price.averagePrice);\r\n\r\n    const minValue = Math.min(...averagePrices) * 0.1; // 10% en dessous du minimum\r\n    const maxValue = Math.max(...averagePrices) * 1.9; // 10% au-dessus du maximum\r\n\r\n    // Créer le graphique\r\n    this.chart = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels, // Labels pour l'axe X\r\n        datasets: [\r\n          {\r\n            label: 'Prix moyen au fil du temps',\r\n            data: averagePrices, // Données pour l'axe Y\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            fill: false,\r\n            tension: 0.1, // Lissage de la ligne\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Évolution des prix moyens',\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'category', // Échelle de catégories pour l'axe X\r\n            title: {\r\n              display: true,\r\n              text: 'Date',\r\n            },\r\n          },\r\n          y: {\r\n            type: 'linear', // Échelle linéaire pour l'axe Y\r\n            title: {\r\n              display: true,\r\n              text: 'Prix',\r\n            },\r\n            min: minValue, // Valeur minimale calculée\r\n            max: maxValue, // Valeur maximale calculée\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  updateChart(item: Item) {\r\n    if (!this.chart) {\r\n      this.createChart(item); // Si le graphique n'existe pas, le créer\r\n      return;\r\n    }\r\n\r\n    // Mettre à jour les données du graphique\r\n    this.chart.data.labels = item.averagePrices.map((price) => price.createdAt);\r\n    this.chart.data.datasets[0].data = item.averagePrices.map((price) => price.averagePrice);\r\n\r\n    // Mettre à jour les limites de l'axe Y\r\n    const averagePrices = item.averagePrices.map((price) => price.averagePrice);\r\n    this.chart.options.scales.y.min = Math.min(...averagePrices) * 0.1;\r\n    this.chart.options.scales.y.max = Math.max(...averagePrices) * 1.9;\r\n\r\n    // Rafraîchir le graphique\r\n    this.chart.update();\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-6\">{this.item.name}</div>\r\n          <div class=\"col-6\"><canvas ref={el => (this.canvasEl = el as HTMLCanvasElement)} /></div>\r\n          \r\n        </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n","import { Component, State, h } from '@stencil/core';\r\nimport { Item, RecipeIngredient, RootCategory, Rune, runeDetails } from '../../types/Item';\r\n\r\n@Component({\r\n  tag: 'item-recipe-component',\r\n  styleUrl: 'item-recipe-component.css',\r\n  shadow: false,\r\n})\r\nexport class ItemRecipeComponent {\r\n  API_URL: string = 'http://localhost:2989/api';\r\n  @State() runes: Item[] = [];\r\n  @State() items: Item[] = [];\r\n  @State() focusFilterRuneId:number = 0;\r\n  @State() rootCategories:RootCategory[] = [];\r\n  @State() orderDirection:string = \"DESC\";\r\n\r\n  @State() propToSortOn:string;\r\n\r\n  @State() refresh:boolean = false;\r\n\r\n  currentCatId: number = 2;\r\n\r\n  async componentWillLoad() {\r\n    try {\r\n      const itemsData:Item[] = await this.fetchFromApi('/items/equipments/7?offset=0&limit=500');\r\n      const itemsData2:Item[] = await this.fetchFromApi('/items/equipments/7?offset=500&limit=500');\r\n      this.runes = await this.fetchFromApi('/items/runes');\r\n\r\n      this.rootCategories = await this.fetchFromApi('/rootCategories');\r\n      this.items = await this.processItems(itemsData.concat(itemsData2));\r\n      this.items = this.items.filter((item) => !isNaN(item.breakableRate));\r\n    } catch (error) {\r\n      console.error('Error fetching items:', error);\r\n    }\r\n  }\r\n\r\n  async processItems(itemsData: Item[]): Promise<Item[]> {\r\n    return Promise.all(\r\n      itemsData.map(async (item) => {\r\n        if (!item.ResultRecipes || !item.characteristics) return item;\r\n\r\n        item.totalCraftPrice = this.calculateCraftPrice(item);\r\n        item._runeDetails = this.calculateRuneDetails(item);\r\n\r\n        this.setLowestBreakableRate(item);\r\n        this.setBenefice(item);\r\n\r\n        return item;\r\n      })\r\n    );\r\n  }\r\n\r\n  async changeCategory(id:number){\r\n    const itemsData:Item[] = await this.fetchFromApi(`/items/equipments/${id}?offset=0&limit=500`);\r\n    const itemsData2:Item[] = await this.fetchFromApi(`/items/equipments/${id}?offset=500&limit=500`);\r\n    this.items = await this.processItems(itemsData.concat(itemsData2));\r\n    this.items = this.items.filter((item) => !isNaN(item.breakableRate));\r\n\r\n\r\n  }\r\n\r\n  calculateCraftPrice(item: Item): number {\r\n    return item.ResultRecipes.reduce((total, recipe) => {\r\n      return (\r\n        total +\r\n        recipe.Ingredients.reduce((sum, ingredient: RecipeIngredient) => {\r\n          const price = ingredient.Ingredient?.averagePrices?.[0]?.averagePrice || 0;\r\n          return sum + price * ingredient.quantity;\r\n        }, 0)\r\n      );\r\n    }, 0);\r\n  }\r\n\r\n  calculateRuneDetails(item: Item): runeDetails[] {\r\n    const runeDetails: runeDetails[] = [];\r\n    let totalRunePrice = 0;\r\n    let totalFocusRunePrice = 0;\r\n\r\n    let focusPrice = 0;\r\n    let bestCharToFocus:Rune;\r\n    item.characteristics.forEach((char) => {\r\n      if (char.from < 0 || !char.characteristic?.runes) return;\r\n\r\n      char.characteristic.runes.forEach((rune) => {\r\n        const density = rune.density || 1;\r\n\r\n        \r\n        const averagePrice = rune.rune?.averagePrices?.[0]?.averagePrice || 0;\r\n        const value = char.to ? (char.from + char.to) / 2 : char.from;\r\n\r\n        const pdb = (((3 * value * density * item.lvl) / 200) + 1) / Math.max(density, 1);\r\n        const priceNoFocus = pdb * averagePrice;\r\n        totalRunePrice += priceNoFocus;\r\n\r\n\r\n        \r\n        const totalPdbFocus = this.calculateFocusPdb(item, char, density);\r\n\r\n        const priceFocus = totalPdbFocus * averagePrice;\r\n\r\n        if(priceFocus > focusPrice){\r\n          focusPrice = priceFocus;\r\n          bestCharToFocus = rune;\r\n        }\r\n\r\n        totalFocusRunePrice = Math.max(totalFocusRunePrice, priceFocus);\r\n\r\n        runeDetails.push({\r\n          type: rune.rune?.name || 'Unknown Rune',\r\n          quantityFocus: totalPdbFocus,\r\n          quantityNoFocus: pdb,\r\n          priceFocus,\r\n          priceNoFocus,\r\n          focusedCharacteristic: char.characteristic.name,\r\n        });\r\n      });\r\n    });\r\n\r\n    item.totalRunePrice = totalRunePrice;\r\n    item.totalFocusRunePrice = totalFocusRunePrice;\r\n    item.bestCharToFocus = bestCharToFocus;\r\n    return runeDetails;\r\n  }\r\n\r\n  calculateFocusPdb(item: Item, char, density: number): number {\r\n    return item.characteristics.reduce((total, focusChar) => {\r\n      if (focusChar.from < 0) return total;\r\n\r\n      const focusValue = focusChar.to\r\n        ? (focusChar.from + focusChar.to) / 2\r\n        : focusChar.from;\r\n      const focusPdb = (((3 * focusValue * (focusChar.characteristic.runes[0]?.density || 1) * item.lvl) / 200) + 1);\r\n\r\n      return total + (focusChar.characteristic.id === char.characteristic.id ? focusPdb : focusPdb * 0.5);\r\n    }, 0) / Math.max(density, 1);\r\n  }\r\n\r\n  setLowestBreakableRate(item: Item) {\r\n    const rateFocus = item.totalCraftPrice / item.totalFocusRunePrice;\r\n    const rateNoFocus = item.totalCraftPrice / item.totalRunePrice;\r\n    const coeff = Math.min(rateFocus, rateNoFocus);\r\n\r\n    item.breakableRate = coeff;\r\n    item.minBreakableRateFocus = rateFocus;\r\n    item.minBreakableRateNoFocus = rateNoFocus;\r\n\r\n    item._runeDetails.forEach((rune) => {\r\n      rune.quantityFocus *= coeff;\r\n      rune.quantityNoFocus *= coeff;\r\n      rune.priceFocus *= coeff;\r\n      rune.priceNoFocus *= coeff;\r\n    });\r\n  }\r\n\r\n  setBenefice(item: Item) {\r\n    const benefitFocus = item.totalFocusRunePrice - item.totalCraftPrice;\r\n    const benefitNoFocus = item.totalRunePrice - item.totalCraftPrice;\r\n\r\n    item.benefit = Math.max(benefitFocus, benefitNoFocus);\r\n    item.benefitPercentage = item.totalCraftPrice > 0 ? (item.benefit / item.totalCraftPrice) * 100 : 0;\r\n  }\r\n\r\n  async fetchFromApi(route: string) {\r\n    const response = await fetch(this.API_URL + route);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  }\r\n\r\n  sortItems(){\r\n    if(this.orderDirection === \"DESC\"){\r\n      return this.items.sort((a, b) => b[this.propToSortOn] - a[this.propToSortOn]);\r\n    } else if(this.orderDirection === \"ASC\"){\r\n      return this.items.sort((a, b) => a[this.propToSortOn] - b[this.propToSortOn]);\r\n    } else return this.items;\r\n  }\r\n\r\n  sortByFocusedChar(){\r\n    \r\n    if(this.focusFilterRuneId == 0)\r\n      return this.sortItems();\r\n    return this.sortItems().filter((item)=>{\r\n      return item.bestCharToFocus?.rune?.id == this.focusFilterRuneId;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"items-list\">\r\n        <h1>Items with Exact Prices and Rune Details</h1>\r\n        <select onChange={(val)=> this.changeCategory((val.target as any).value)}>\r\n          {this.rootCategories.map((cat)=>{\r\n            return <option value={cat.id}>{cat.name}</option>\r\n          })}\r\n        </select>\r\n        <select onChange={(v)=> this.propToSortOn = ((v.target as any).value)}>\r\n          <option value=\"breakableRate\">Coeff</option>\r\n          <option value=\"totalCraftPrice\">Crafting Price</option>\r\n        </select>\r\n        <select onChange={(v)=>{this.orderDirection = (v.target as any).value;} }>\r\n          <option value=\"DESC\">DESC</option>\r\n          <option value=\"ASC\">ASC</option>\r\n        </select>\r\n        <select onChange={(v)=>{ this.focusFilterRuneId = ((v.target as any).value)} }>\r\n          <option value={0}>No filter</option>\r\n          {this.runes.map((rune)=>{\r\n            return <option value={rune.id}>{rune.name}</option>\r\n          })}\r\n  \r\n        </select>\r\n\r\n        {this.items?.length === 0 ? (\r\n          <p>Loading items...</p>\r\n        ) : (\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Item Name</th>\r\n                <th>Craft Cost</th>\r\n                <th>Focus</th>\r\n                <th>Minimum Break Coefficient</th>\r\n                <th>Rune Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.sortByFocusedChar().map((item) => (\r\n                item.totalCraftPrice > 0 && (\r\n                  <tr key={item.id}>\r\n                    <td>{item.name} : {item.category?.name} - lvl {item.lvl}</td>\r\n                    <td>{item.totalCraftPrice.toFixed(0)}</td>\r\n                    <td>{item.minBreakableRateFocus > item.minBreakableRateNoFocus ? 'No Focus' : 'Focus'}</td>\r\n                    <td>{(Math.min(item.minBreakableRateFocus, item.minBreakableRateNoFocus)*100).toFixed(0)}</td>\r\n                    <td>\r\n                      {item._runeDetails.length > 0 ? (\r\n                        <ul>\r\n                          {item._runeDetails.map((rune) => (\r\n                            <li key={rune.type}>\r\n                              {rune.type}:\r\n                              <ul>\r\n                                <li>Quantity Focus: {rune.quantityFocus.toFixed(1)} (Total: {rune.priceFocus.toFixed(2)})</li>\r\n                                <li>Quantity No Focus: {rune.quantityNoFocus.toFixed(1)} (Total: {rune.priceNoFocus.toFixed(2)})</li>\r\n                              </ul>\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      ) : 'N/A'}\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"sFAAA,MAAMA,EAAa,ibACnB,MAAAC,EAAeD,E,MCYFE,EAAO,M,yBAClBC,KAAAC,QAAkB,4B,wBACiBC,U,uBACE,E,oEAGN,G,CAC/B,uBAAMC,GACJH,KAAKI,YAAcJ,KAAKK,aAAa,+BACrCL,KAAKM,4BACLN,KAAKO,qBAAuBP,KAAKK,aAAa,kB,CAGhD,aAAAG,CAAcC,GACZ,MAAMC,EAAOV,KAAKI,MAAMO,MAAMD,GAAOA,EAAKE,IAAMH,IAChD,GAAGC,EAAK,CACNV,KAAKa,mBAAqBH,C,EAK9B,kBAAML,CAAaS,GACjB,MAAMC,QAAiBC,MAAMhB,KAAKC,QAAUa,GAC5C,IAAKC,EAASE,GAAI,CAChB,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,S,CAElD,aAAaJ,EAASK,M,CAIxB,yBAAAd,GACEN,KAAKI,MAAQ,IAAIJ,KAAKI,OAAOiB,MAAK,CAACC,EAAGC,KACpC,MAAMC,EAAaxB,KAAKyB,6BAA6BH,GACrD,MAAMI,EAAa1B,KAAKyB,6BAA6BF,GACrD,OAAOG,EAAaF,CAAU,G,CAIlC,4BAAAC,CAA6Bf,GAC3B,GAAIA,EAAKiB,cAAcC,OAAS,EAAG,OAAO,EAC1C,MAAMC,EAASnB,EAAKiB,cAAcG,KAAKC,GAAUA,EAAMC,eACvD,MAAMC,EAAcJ,EAAOA,EAAOD,OAAS,GAC3C,MAAMM,EAAgBL,EAAOA,EAAOD,OAAS,GAC7C,GAAIM,IAAkB,EAAG,OAAO,EAChC,OAASD,EAAcC,GAAiBA,EAAiB,G,CAG3D,MAAAC,GACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,YACTF,EAAA,OAAAC,IAAA,4CAEED,EAAA,SAAAC,IAAA,2CAAOE,KAAK,SAASC,MAAOxC,KAAKyC,YAAaC,SAAWC,GAAM3C,KAAKyC,YAAeE,EAAEC,OAAeJ,QACpGJ,EAAA,UAAAC,IAAA,2CAAQK,SAAWC,GAAM3C,KAAK6C,kBAAqBF,EAAEC,OAAeJ,OACjExC,KAAKO,eAAeuB,KAAKgB,GACjBV,EAAA,UAAQI,MAAOM,EAAQlC,IAAKkC,EAAQC,SAG/CX,EAAA,OAAAC,IAAA,4CACED,EAAA,YAAAC,IAAA,2CAAUzB,GAAG,eACVZ,KAAKI,MAAM0B,KAAKpB,GACR0B,EAAA,UAAQI,MAAO9B,EAAKE,IAAKF,EAAKqC,SAGzCX,EAAA,SAAAC,IAAA,2CAAOK,SAAWC,IAAK3C,KAAKQ,cAAemC,EAAEC,OAAeJ,MAAO,EAAGQ,aAAa,KAAKC,KAAK,kBAGhGjD,KAAKa,mBAAqBuB,EAAA,WAAKA,EAAA,OAAKE,MAAM,OAAMF,EAAA,yBAAuB1B,KAAMV,KAAKa,uBACjFb,KAAKI,MAAM8C,QAAQxC,GAASA,EAAKiB,eAAiB,MAAQjB,EAAKiB,cAAcC,QAAU,IAAGsB,QAAQxC,GAASA,EAAKyC,SAASC,aAAaxC,IAAMZ,KAAK6C,oBAAmBQ,MAAM,EAAGrD,KAAKyC,aAAaX,KAAKpB,GAC3L0B,EAAA,OAAKE,MAAM,OAAMF,EAAA,yBAAuB1B,KAAMA,O,aC9E1D,MAAM4C,EAASC,ICJtB,MAAMC,EAAa,6MACnB,MAAAC,EAAeD,E,MCQFE,EAAO,M,yBAElB,MAAAvB,GACE,OACEC,EAAA,OAAAC,IAAA,4CACED,EAAA,UAAAC,IAAA,4CACID,EAAA,MAAAC,IAAA,2CAAIsB,QAAS,IAAML,EAAOM,KAAK,MAAI,QAGnCxB,EAAA,MAAAC,IAAA,2CAAIsB,QAAS,IAAML,EAAOM,KAAK,YAAU,WAK7CxB,EAAA,QAAAC,IAAA,4CACED,EAACkB,EAAOO,OAAM,CAAAxB,IAAA,4CACZD,EAAC0B,EAAK,CAAAzB,IAAA,2CAAC0B,KAAK,KACV3B,EAAA,yBAAAC,IAAA,8CAEFD,EAAC0B,EAAK,CAAAzB,IAAA,2CAAC0B,KAAK,WACV3B,EAAA,YAAAC,IAAA,gD;;;;;;GCvBd,SAAS2B,EAAMC,GACb,OAAOA,EAAI,GAAM,CACnB,CACA,MAAMC,EAAM,CAACD,EAAGE,EAAG/B,IAAMgC,KAAKC,IAAID,KAAKE,IAAIL,EAAG7B,GAAI+B,GAClD,SAASI,EAAIN,GACX,OAAOC,EAAIF,EAAMC,EAAI,MAAO,EAAG,IACjC,CAIA,SAASO,EAAIP,GACX,OAAOC,EAAIF,EAAMC,EAAI,KAAM,EAAG,IAChC,CACA,SAASQ,EAAIR,GACX,OAAOC,EAAIF,EAAMC,EAAI,MAAQ,IAAK,EAAG,EACvC,CACA,SAASS,EAAIT,GACX,OAAOC,EAAIF,EAAMC,EAAI,KAAM,EAAG,IAChC,CAEA,MAAMU,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAI3D,EAAG,GAAIC,EAAG,GAAI2D,EAAG,GAAIC,EAAG,GAAIxC,EAAG,GAAIyC,EAAG,IAC3J,MAAMC,EAAM,IAAI,oBAChB,MAAMC,EAAK/D,GAAK8D,EAAI9D,EAAI,IACxB,MAAMgE,EAAKhE,GAAK8D,GAAK9D,EAAI,MAAS,GAAK8D,EAAI9D,EAAI,IAC/C,MAAMiE,EAAKjE,IAAOA,EAAI,MAAS,KAAQA,EAAI,IAC3C,MAAMkE,EAAUxB,GAAKuB,EAAGvB,EAAEyB,IAAMF,EAAGvB,EAAE0B,IAAMH,EAAGvB,EAAE1C,IAAMiE,EAAGvB,EAAE3C,GAC3D,SAASsE,EAASC,GAChB,IAAIC,EAAMD,EAAIjE,OACd,IAAImE,EACJ,GAAIF,EAAI,KAAO,IAAK,CAClB,GAAIC,IAAQ,GAAKA,IAAQ,EAAG,CAC1BC,EAAM,CACJL,EAAG,IAAMf,EAAMkB,EAAI,IAAM,GACzBF,EAAG,IAAMhB,EAAMkB,EAAI,IAAM,GACzBtE,EAAG,IAAMoD,EAAMkB,EAAI,IAAM,GACzBvE,EAAGwE,IAAQ,EAAInB,EAAMkB,EAAI,IAAM,GAAK,IAE5C,MAAW,GAAIC,IAAQ,GAAKA,IAAQ,EAAG,CACjCC,EAAM,CACJL,EAAGf,EAAMkB,EAAI,KAAO,EAAIlB,EAAMkB,EAAI,IAClCF,EAAGhB,EAAMkB,EAAI,KAAO,EAAIlB,EAAMkB,EAAI,IAClCtE,EAAGoD,EAAMkB,EAAI,KAAO,EAAIlB,EAAMkB,EAAI,IAClCvE,EAAGwE,IAAQ,EAAKnB,EAAMkB,EAAI,KAAO,EAAIlB,EAAMkB,EAAI,IAAO,IAE9D,CACA,CACE,OAAOE,CACT,CACA,MAAMC,EAAQ,CAAC1E,EAAG8D,IAAM9D,EAAI,IAAM8D,EAAE9D,GAAK,GACzC,SAAS2E,EAAUhC,GACjB,IAAImB,EAAIK,EAAQxB,GAAKqB,EAAKC,EAC1B,OAAOtB,EACH,IAAMmB,EAAEnB,EAAEyB,GAAKN,EAAEnB,EAAE0B,GAAKP,EAAEnB,EAAE1C,GAAKyE,EAAM/B,EAAE3C,EAAG8D,GAC5ClF,SACN,CAEA,MAAMgG,EAAS,+GACf,SAASC,EAAS/D,EAAGgE,EAAGjC,GACtB,MAAM7C,EAAI8E,EAAIhC,KAAKE,IAAIH,EAAG,EAAIA,GAC9B,MAAMiB,EAAI,CAACiB,EAAGC,GAAKD,EAAIjE,EAAI,IAAM,KAAO+B,EAAI7C,EAAI8C,KAAKC,IAAID,KAAKE,IAAIgC,EAAI,EAAG,EAAIA,EAAG,IAAK,GACrF,MAAO,CAAClB,EAAE,GAAIA,EAAE,GAAIA,EAAE,GACxB,CACA,SAASmB,EAASnE,EAAGgE,EAAGnC,GACtB,MAAMmB,EAAI,CAACiB,EAAGC,GAAKD,EAAIjE,EAAI,IAAM,IAAM6B,EAAIA,EAAImC,EAAIhC,KAAKC,IAAID,KAAKE,IAAIgC,EAAG,EAAIA,EAAG,GAAI,GACnF,MAAO,CAAClB,EAAE,GAAIA,EAAE,GAAIA,EAAE,GACxB,CACA,SAASoB,EAASpE,EAAGqE,EAAGlF,GACtB,MAAMmF,EAAMP,EAAS/D,EAAG,EAAG,IAC3B,IAAIuE,EACJ,GAAIF,EAAIlF,EAAI,EAAG,CACboF,EAAI,GAAKF,EAAIlF,GACbkF,GAAKE,EACLpF,GAAKoF,CACT,CACE,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACtBD,EAAIC,IAAM,EAAIF,EAAIlF,EAClBmF,EAAIC,IAAMF,CACd,CACE,OAAOC,CACT,CACA,SAASE,EAASlB,EAAGC,EAAGpE,EAAG4D,EAAGd,GAC5B,GAAIqB,IAAMrB,EAAK,CACb,OAASsB,EAAIpE,GAAK4D,GAAMQ,EAAIpE,EAAI,EAAI,EACxC,CACE,GAAIoE,IAAMtB,EAAK,CACb,OAAQ9C,EAAImE,GAAKP,EAAI,CACzB,CACE,OAAQO,EAAIC,GAAKR,EAAI,CACvB,CACA,SAAS0B,EAAQ5C,GACf,MAAM6C,EAAQ,IACd,MAAMpB,EAAIzB,EAAEyB,EAAIoB,EAChB,MAAMnB,EAAI1B,EAAE0B,EAAImB,EAChB,MAAMvF,EAAI0C,EAAE1C,EAAIuF,EAChB,MAAMzC,EAAMD,KAAKC,IAAIqB,EAAGC,EAAGpE,GAC3B,MAAM+C,EAAMF,KAAKE,IAAIoB,EAAGC,EAAGpE,GAC3B,MAAM4C,GAAKE,EAAMC,GAAO,EACxB,IAAIlC,EAAGgE,EAAGjB,EACV,GAAId,IAAQC,EAAK,CACfa,EAAId,EAAMC,EACV8B,EAAIjC,EAAI,GAAMgB,GAAK,EAAId,EAAMC,GAAOa,GAAKd,EAAMC,GAC/ClC,EAAIwE,EAASlB,EAAGC,EAAGpE,EAAG4D,EAAGd,GACzBjC,EAAIA,EAAI,GAAK,EACjB,CACE,MAAO,CAACA,EAAI,EAAGgE,GAAK,EAAGjC,EACzB,CACA,SAAS4C,EAAM3B,EAAG9D,EAAGC,EAAG2D,GACtB,OACE8B,MAAMC,QAAQ3F,GACV8D,EAAE9D,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAChB8D,EAAE9D,EAAGC,EAAG2D,IACZpD,IAAI0C,EACR,CACA,SAAS0C,EAAQ9E,EAAGgE,EAAGjC,GACrB,OAAO4C,EAAMZ,EAAU/D,EAAGgE,EAAGjC,EAC/B,CACA,SAASgD,EAAQ/E,EAAGqE,EAAGlF,GACrB,OAAOwF,EAAMP,EAAUpE,EAAGqE,EAAGlF,EAC/B,CACA,SAAS6F,EAAQhF,EAAGgE,EAAGnC,GACrB,OAAO8C,EAAMR,EAAUnE,EAAGgE,EAAGnC,EAC/B,CACA,SAASoD,EAAIjF,GACX,OAAQA,EAAI,IAAM,KAAO,GAC3B,CACA,SAASkF,EAASzB,GAChB,MAAM0B,EAAIrB,EAAOsB,KAAK3B,GACtB,IAAIvE,EAAI,IACR,IAAI2C,EACJ,IAAKsD,EAAG,CACN,MACJ,CACE,GAAIA,EAAE,KAAOtD,EAAG,CACd3C,EAAIiG,EAAE,GAAKhD,GAAKgD,EAAE,IAAM/C,GAAK+C,EAAE,GACnC,CACE,MAAMnF,EAAIiF,GAAKE,EAAE,IACjB,MAAME,GAAMF,EAAE,GAAK,IACnB,MAAMG,GAAMH,EAAE,GAAK,IACnB,GAAIA,EAAE,KAAO,MAAO,CAClBtD,EAAIkD,EAAQ/E,EAAGqF,EAAIC,EACvB,MAAS,GAAIH,EAAE,KAAO,MAAO,CACzBtD,EAAImD,EAAQhF,EAAGqF,EAAIC,EACvB,KAAS,CACLzD,EAAIiD,EAAQ9E,EAAGqF,EAAIC,EACvB,CACE,MAAO,CACLhC,EAAGzB,EAAE,GACL0B,EAAG1B,EAAE,GACL1C,EAAG0C,EAAE,GACL3C,EAAGA,EAEP,CACA,SAASqG,EAAO1D,EAAG2D,GACjB,IAAIxF,EAAIyE,EAAQ5C,GAChB7B,EAAE,GAAKiF,EAAIjF,EAAE,GAAKwF,GAClBxF,EAAI8E,EAAQ9E,GACZ6B,EAAEyB,EAAItD,EAAE,GACR6B,EAAE0B,EAAIvD,EAAE,GACR6B,EAAE1C,EAAIa,EAAE,EACV,CACA,SAASyF,EAAU5D,GACjB,IAAKA,EAAG,CACN,MACJ,CACE,MAAM3C,EAAIuF,EAAQ5C,GAClB,MAAM7B,EAAId,EAAE,GACZ,MAAM8E,EAAI1B,EAAIpD,EAAE,IAChB,MAAM6C,EAAIO,EAAIpD,EAAE,IAChB,OAAO2C,EAAE3C,EAAI,IACT,QAAQc,MAAMgE,OAAOjC,OAAOM,EAAIR,EAAE3C,MAClC,OAAOc,MAAMgE,OAAOjC,KAC1B,CAEA,MAAMrC,EAAM,CACXgG,EAAG,OACHC,EAAG,QACHC,EAAG,KACHC,EAAG,MACHC,EAAG,KACHC,EAAG,SACHC,EAAG,QACHxD,EAAG,KACHyD,EAAG,KACHC,EAAG,KACHzD,EAAG,KACHC,EAAG,QACHC,EAAG,QACHwD,EAAG,KACHC,EAAG,WACHxD,EAAG,KACHyD,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,QACH5D,EAAG,KACH6D,EAAG,KACHC,EAAG,OACHC,EAAG,KACHC,EAAG,QACHC,EAAG,MAEJ,MAAMC,EAAU,CACfC,OAAQ,SACRC,YAAa,SACbC,KAAM,OACNC,UAAW,SACXC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,MAAO,IACPC,aAAc,SACdC,GAAI,KACJC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,SAAU,SACVC,QAAS,SACTC,IAAK,SACLC,YAAa,SACbC,QAAS,SACTC,QAAS,SACTC,KAAM,OACNC,IAAK,KACLC,MAAO,OACPC,QAAS,SACTC,KAAM,SACNC,KAAM,OACNC,KAAM,SACNC,OAAQ,SACRC,QAAS,SACTC,SAAU,SACVC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,MAAO,SACPC,MAAO,SACPC,IAAK,OACLC,OAAQ,SACRC,OAAQ,SACRC,SAAU,OACVC,OAAQ,SACRC,OAAQ,SACRC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,SAAU,SACVC,OAAQ,SACRC,QAAS,SACTC,UAAW,SACXC,IAAK,SACLC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,IAAK,SACLC,QAAS,SACTC,OAAQ,SACRC,QAAS,SACTC,MAAO,SACPC,KAAM,SACNC,MAAO,SACPC,OAAQ,SACRC,UAAW,SACXC,QAAS,SACTC,WAAY,SACZC,IAAK,SACLC,KAAM,SACNC,MAAO,SACPC,UAAW,SACXC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,SACRC,MAAO,SACPC,MAAO,SACPC,QAAS,SACTC,IAAK,SACLC,KAAM,OACNC,QAAS,SACTC,IAAK,SACLC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,IAAK,KACLC,MAAO,SACPC,OAAQ,SACRC,OAAQ,SACRC,KAAM,SACNC,UAAW,OACXC,IAAK,SACLC,SAAU,SACVC,WAAY,SACZC,QAAS,SACTC,SAAU,SACVC,QAAS,SACTC,WAAY,SACZC,KAAM,KACNC,OAAQ,SACRC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,QAAS,SACTC,KAAM,SACNC,UAAW,SACXC,OAAQ,SACRC,MAAO,SACPC,WAAY,SACZC,UAAW,SACXC,QAAS,SACTC,KAAM,SACNC,IAAK,SACLC,KAAM,SACNC,QAAS,SACTC,MAAO,SACPC,YAAa,SACbC,GAAI,SACJC,SAAU,SACVC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,UAAW,SACXC,MAAO,SACPC,QAAS,SACTC,MAAO,SACPC,OAAQ,SACRC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,KAAM,SACNC,KAAM,SACNC,SAAU,OACVC,OAAQ,SACRC,IAAK,SACLC,IAAK,OACLC,MAAO,SACPC,OAAQ,SACRC,GAAI,SACJC,MAAO,SACPC,IAAK,SACLC,KAAM,SACNC,UAAW,SACXC,GAAI,SACJC,MAAO,UAER,SAASC,IACP,MAAMC,EAAW,GACjB,MAAMC,EAAOC,OAAOD,KAAKvJ,GACzB,MAAMyJ,EAAQD,OAAOD,KAAK5Q,GAC1B,IAAI6E,EAAGkM,EAAGvM,EAAGrF,EAAI6R,EACjB,IAAKnM,EAAI,EAAGA,EAAI+L,EAAK9Q,OAAQ+E,IAAK,CAChC1F,EAAK6R,EAAKJ,EAAK/L,GACf,IAAKkM,EAAI,EAAGA,EAAID,EAAMhR,OAAQiR,IAAK,CACjCvM,EAAIsM,EAAMC,GACVC,EAAKA,EAAGC,QAAQzM,EAAGxE,EAAIwE,GAC7B,CACIA,EAAI0M,SAAS7J,EAAQlI,GAAK,IAC1BwR,EAASK,GAAM,CAACxM,GAAK,GAAK,IAAMA,GAAK,EAAI,IAAMA,EAAI,IACvD,CACE,OAAOmM,CACT,CAEA,IAAIQ,EACJ,SAASC,EAAUrN,GACjB,IAAKoN,EAAO,CACVA,EAAQT,IACRS,EAAME,YAAc,CAAC,EAAG,EAAG,EAAG,EAClC,CACE,MAAM7R,EAAI2R,EAAMpN,EAAIuN,eACpB,OAAO9R,GAAK,CACVoE,EAAGpE,EAAE,GACLqE,EAAGrE,EAAE,GACLC,EAAGD,EAAE,GACLA,EAAGA,EAAEM,SAAW,EAAIN,EAAE,GAAK,IAE/B,CAEA,MAAM+R,EAAS,uGACf,SAASC,EAASzN,GAChB,MAAM0B,EAAI8L,EAAO7L,KAAK3B,GACtB,IAAIvE,EAAI,IACR,IAAIoE,EAAGC,EAAGpE,EACV,IAAKgG,EAAG,CACN,MACJ,CACE,GAAIA,EAAE,KAAO7B,EAAG,CACd,MAAMzB,GAAKsD,EAAE,GACbjG,EAAIiG,EAAE,GAAKhD,EAAIN,GAAKC,EAAID,EAAI,IAAK,EAAG,IACxC,CACEyB,GAAK6B,EAAE,GACP5B,GAAK4B,EAAE,GACPhG,GAAKgG,EAAE,GACP7B,EAAI,KAAO6B,EAAE,GAAKhD,EAAImB,GAAKxB,EAAIwB,EAAG,EAAG,MACrCC,EAAI,KAAO4B,EAAE,GAAKhD,EAAIoB,GAAKzB,EAAIyB,EAAG,EAAG,MACrCpE,EAAI,KAAOgG,EAAE,GAAKhD,EAAIhD,GAAK2C,EAAI3C,EAAG,EAAG,MACrC,MAAO,CACLmE,EAAGA,EACHC,EAAGA,EACHpE,EAAGA,EACHD,EAAGA,EAEP,CACA,SAASiS,EAAUtP,GACjB,OAAOA,IACLA,EAAE3C,EAAI,IACF,QAAQ2C,EAAEyB,MAAMzB,EAAE0B,MAAM1B,EAAE1C,MAAMkD,EAAIR,EAAE3C,MACtC,OAAO2C,EAAEyB,MAAMzB,EAAE0B,MAAM1B,EAAE1C,KAEjC,CAEA,MAAMiS,EAAKvP,GAAKA,GAAK,SAAYA,EAAI,MAAQG,KAAKqP,IAAIxP,EAAG,EAAM,KAAO,MAAQ,KAC9E,MAAMyP,EAAOzP,GAAKA,GAAK,OAAUA,EAAI,MAAQG,KAAKqP,KAAKxP,EAAI,MAAS,MAAO,KAC3E,SAAS0P,EAAYC,EAAMC,EAAMC,GAC/B,MAAMpO,EAAIgO,EAAKjP,EAAImP,EAAKlO,IACxB,MAAMC,EAAI+N,EAAKjP,EAAImP,EAAKjO,IACxB,MAAMpE,EAAImS,EAAKjP,EAAImP,EAAKrS,IACxB,MAAO,CACLmE,EAAGlB,EAAIgP,EAAG9N,EAAIoO,GAAKJ,EAAKjP,EAAIoP,EAAKnO,IAAMA,KACvCC,EAAGnB,EAAIgP,EAAG7N,EAAImO,GAAKJ,EAAKjP,EAAIoP,EAAKlO,IAAMA,KACvCpE,EAAGiD,EAAIgP,EAAGjS,EAAIuS,GAAKJ,EAAKjP,EAAIoP,EAAKtS,IAAMA,KACvCD,EAAGsS,EAAKtS,EAAIwS,GAAKD,EAAKvS,EAAIsS,EAAKtS,GAEnC,CAEA,SAASyS,EAAO9P,EAAG0C,EAAGqN,GACpB,GAAI/P,EAAG,CACL,IAAIgQ,EAAMpN,EAAQ5C,GAClBgQ,EAAItN,GAAKvC,KAAKC,IAAI,EAAGD,KAAKE,IAAI2P,EAAItN,GAAKsN,EAAItN,GAAKqN,EAAOrN,IAAM,EAAI,IAAM,IACvEsN,EAAM/M,EAAQ+M,GACdhQ,EAAEyB,EAAIuO,EAAI,GACVhQ,EAAE0B,EAAIsO,EAAI,GACVhQ,EAAE1C,EAAI0S,EAAI,EACd,CACA,CACA,SAASC,EAAMjQ,EAAGkQ,GAChB,OAAOlQ,EAAI0O,OAAOyB,OAAOD,GAAS,GAAIlQ,GAAKA,CAC7C,CACA,SAASoQ,EAAWC,GAClB,IAAIrQ,EAAI,CAACyB,EAAG,EAAGC,EAAG,EAAGpE,EAAG,EAAGD,EAAG,KAC9B,GAAI0F,MAAMC,QAAQqN,GAAQ,CACxB,GAAIA,EAAM1S,QAAU,EAAG,CACrBqC,EAAI,CAACyB,EAAG4O,EAAM,GAAI3O,EAAG2O,EAAM,GAAI/S,EAAG+S,EAAM,GAAIhT,EAAG,KAC/C,GAAIgT,EAAM1S,OAAS,EAAG,CACpBqC,EAAE3C,EAAIkD,EAAI8P,EAAM,GACxB,CACA,CACA,KAAS,CACLrQ,EAAIiQ,EAAMI,EAAO,CAAC5O,EAAG,EAAGC,EAAG,EAAGpE,EAAG,EAAGD,EAAG,IACvC2C,EAAE3C,EAAIkD,EAAIP,EAAE3C,EAChB,CACE,OAAO2C,CACT,CACA,SAASsQ,GAAc1O,GACrB,GAAIA,EAAI2O,OAAO,KAAO,IAAK,CACzB,OAAOlB,EAASzN,EACpB,CACE,OAAOyB,EAASzB,EAClB,CACA,MAAM4O,GACJ,WAAAC,CAAYJ,GACV,GAAIA,aAAiBG,GAAO,CAC1B,OAAOH,CACb,CACI,MAAM/R,SAAc+R,EACpB,IAAIrQ,EACJ,GAAI1B,IAAS,SAAU,CACrB0B,EAAIoQ,EAAWC,EACrB,MAAW,GAAI/R,IAAS,SAAU,CAC5B0B,EAAI2B,EAAS0O,IAAUpB,EAAUoB,IAAUC,GAAcD,EAC/D,CACItU,KAAK2U,KAAO1Q,EACZjE,KAAK4U,SAAW3Q,CACpB,CACE,SAAI4Q,GACF,OAAO7U,KAAK4U,MAChB,CACE,OAAIlO,GACF,IAAIzC,EAAIiQ,EAAMlU,KAAK2U,MACnB,GAAI1Q,EAAG,CACLA,EAAE3C,EAAImD,EAAIR,EAAE3C,EAClB,CACI,OAAO2C,CACX,CACE,OAAIyC,CAAIoO,GACN9U,KAAK2U,KAAON,EAAWS,EAC3B,CACE,SAAAvB,GACE,OAAOvT,KAAK4U,OAASrB,EAAUvT,KAAK2U,MAAQzU,SAChD,CACE,SAAA+F,GACE,OAAOjG,KAAK4U,OAAS3O,EAAUjG,KAAK2U,MAAQzU,SAChD,CACE,SAAA2H,GACE,OAAO7H,KAAK4U,OAAS/M,EAAU7H,KAAK2U,MAAQzU,SAChD,CACE,GAAA6U,CAAIC,EAAOC,GACT,GAAID,EAAO,CACT,MAAME,EAAKlV,KAAK0G,IAChB,MAAMyO,EAAKH,EAAMtO,IACjB,IAAI0O,EACJ,MAAMC,EAAIJ,IAAWG,EAAK,GAAMH,EAChC,MAAMxO,EAAI,EAAI4O,EAAI,EAClB,MAAM/T,EAAI4T,EAAG5T,EAAI6T,EAAG7T,EACpB,MAAMgU,IAAO7O,EAAInF,KAAO,EAAImF,GAAKA,EAAInF,IAAM,EAAImF,EAAInF,IAAM,GAAK,EAC9D8T,EAAK,EAAIE,EACTJ,EAAGxP,EAAI,IAAO4P,EAAKJ,EAAGxP,EAAI0P,EAAKD,EAAGzP,EAAI,GACtCwP,EAAGvP,EAAI,IAAO2P,EAAKJ,EAAGvP,EAAIyP,EAAKD,EAAGxP,EAAI,GACtCuP,EAAG3T,EAAI,IAAO+T,EAAKJ,EAAG3T,EAAI6T,EAAKD,EAAG5T,EAAI,GACtC2T,EAAG5T,EAAI+T,EAAIH,EAAG5T,GAAK,EAAI+T,GAAKF,EAAG7T,EAC/BtB,KAAK0G,IAAMwO,CACjB,CACI,OAAOlV,IACX,CACE,WAAA2T,CAAYqB,EAAOlB,GACjB,GAAIkB,EAAO,CACThV,KAAK2U,KAAOhB,EAAY3T,KAAK2U,KAAMK,EAAML,KAAMb,EACrD,CACI,OAAO9T,IACX,CACE,KAAAkU,GACE,OAAO,IAAIO,GAAMzU,KAAK0G,IAC1B,CACE,KAAAV,CAAM1E,GACJtB,KAAK2U,KAAKrT,EAAIkD,EAAIlD,GAClB,OAAOtB,IACX,CACE,OAAAuV,CAAQvB,GACN,MAAMtN,EAAM1G,KAAK2U,KACjBjO,EAAIpF,GAAK,EAAI0S,EACb,OAAOhU,IACX,CACE,SAAAwV,GACE,MAAM9O,EAAM1G,KAAK2U,KACjB,MAAMc,EAAMzR,EAAM0C,EAAIhB,EAAI,GAAMgB,EAAIf,EAAI,IAAOe,EAAInF,EAAI,KACvDmF,EAAIhB,EAAIgB,EAAIf,EAAIe,EAAInF,EAAIkU,EACxB,OAAOzV,IACX,CACE,OAAA0V,CAAQ1B,GACN,MAAMtN,EAAM1G,KAAK2U,KACjBjO,EAAIpF,GAAK,EAAI0S,EACb,OAAOhU,IACX,CACE,MAAA2V,GACE,MAAM1R,EAAIjE,KAAK2U,KACf1Q,EAAEyB,EAAI,IAAMzB,EAAEyB,EACdzB,EAAE0B,EAAI,IAAM1B,EAAE0B,EACd1B,EAAE1C,EAAI,IAAM0C,EAAE1C,EACd,OAAOvB,IACX,CACE,OAAA4V,CAAQ5B,GACND,EAAO/T,KAAK2U,KAAM,EAAGX,GACrB,OAAOhU,IACX,CACE,MAAA6V,CAAO7B,GACLD,EAAO/T,KAAK2U,KAAM,GAAIX,GACtB,OAAOhU,IACX,CACE,QAAA8V,CAAS9B,GACPD,EAAO/T,KAAK2U,KAAM,EAAGX,GACrB,OAAOhU,IACX,CACE,UAAA+V,CAAW/B,GACTD,EAAO/T,KAAK2U,KAAM,GAAIX,GACtB,OAAOhU,IACX,CACE,MAAA2H,CAAOC,GACLD,EAAO3H,KAAK2U,KAAM/M,GAClB,OAAO5H,IACX;;;;;;GCrjBI,MAAMgW,GAAM,MACZ,IAAIpV,EAAK,EACT,MAAO,IAAIA,GACd,EAHe,GAQZ,SAASqV,GAAczT,GACvB,OAAOA,IAAU,MAAQA,IAAUtC,SACvC,CAKI,SAAS+G,GAAQzE,GACjB,GAAIwE,MAAMC,SAAWD,MAAMC,QAAQzE,GAAQ,CACvC,OAAO,IACf,CACI,MAAMD,EAAOoQ,OAAOuD,UAAUC,SAASC,KAAK5T,GAC5C,GAAID,EAAKc,MAAM,EAAG,KAAO,WAAad,EAAKc,OAAO,KAAO,SAAU,CAC/D,OAAO,IACf,CACI,OAAO,KACX,CAKI,SAASgT,GAAS7T,GAClB,OAAOA,IAAU,MAAQmQ,OAAOuD,UAAUC,SAASC,KAAK5T,KAAW,iBACvE,CAII,SAAS8T,GAAe9T,GACxB,cAAeA,IAAU,UAAYA,aAAiB+T,SAAWC,UAAUhU,EAC/E,CAKI,SAASiU,GAAgBjU,EAAOkU,GAChC,OAAOJ,GAAe9T,GAASA,EAAQkU,CAC3C,CAKI,SAASC,GAAenU,EAAOkU,GAC/B,cAAclU,IAAU,YAAckU,EAAelU,CACzD,CAEA,MAAMoU,GAAc,CAACpU,EAAOqU,WAAmBrU,IAAU,UAAYA,EAAMsU,SAAS,KAAOC,WAAWvU,GAAS,IAAMqU,GAAarU,EAO9H,SAASwU,GAASC,EAAIC,EAAMC,GAC5B,GAAIF,UAAaA,EAAGb,OAAS,WAAY,CACrC,OAAOa,EAAGG,MAAMD,EAASD,EACjC,CACA,CACA,SAASG,GAAKC,EAAUL,EAAIE,EAASI,GACjC,IAAI5Q,EAAGb,EAAK4M,EACZ,GAAIzL,GAAQqQ,GAAW,CACnBxR,EAAMwR,EAAS1V,OACf,GAAI2V,EAAS,CACT,IAAI5Q,EAAIb,EAAM,EAAGa,GAAK,EAAGA,IAAI,CACzBsQ,EAAGb,KAAKe,EAASG,EAAS3Q,GAAIA,EAC9C,CACA,KAAe,CACH,IAAIA,EAAI,EAAGA,EAAIb,EAAKa,IAAI,CACpBsQ,EAAGb,KAAKe,EAASG,EAAS3Q,GAAIA,EAC9C,CACA,CACA,MAAW,GAAI0P,GAASiB,GAAW,CAC3B5E,EAAOC,OAAOD,KAAK4E,GACnBxR,EAAM4M,EAAK9Q,OACX,IAAI+E,EAAI,EAAGA,EAAIb,EAAKa,IAAI,CACpBsQ,EAAGb,KAAKe,EAASG,EAAS5E,EAAK/L,IAAK+L,EAAK/L,GACrD,CACA,CACA,CAMI,SAAS6Q,GAAeC,EAAIC,GAC5B,IAAI/Q,EAAGgR,EAAMC,EAAIC,EACjB,IAAKJ,IAAOC,GAAMD,EAAG7V,SAAW8V,EAAG9V,OAAQ,CACvC,OAAO,KACf,CACI,IAAI+E,EAAI,EAAGgR,EAAOF,EAAG7V,OAAQ+E,EAAIgR,IAAQhR,EAAE,CACvCiR,EAAKH,EAAG9Q,GACRkR,EAAKH,EAAG/Q,GACR,GAAIiR,EAAGE,eAAiBD,EAAGC,cAAgBF,EAAGG,QAAUF,EAAGE,MAAO,CAC9D,OAAO,KACnB,CACA,CACI,OAAO,IACX,CAII,SAAS7D,GAAM8D,GACf,GAAI/Q,GAAQ+Q,GAAS,CACjB,OAAOA,EAAOlW,IAAIoS,GAC1B,CACI,GAAImC,GAAS2B,GAAS,CAClB,MAAMpV,EAAS+P,OAAOsF,OAAO,MAC7B,MAAMvF,EAAOC,OAAOD,KAAKsF,GACzB,MAAME,EAAOxF,EAAK9Q,OAClB,IAAI0E,EAAI,EACR,KAAMA,EAAI4R,IAAQ5R,EAAE,CAChB1D,EAAO8P,EAAKpM,IAAM4N,GAAM8D,EAAOtF,EAAKpM,IAChD,CACQ,OAAO1D,CACf,CACI,OAAOoV,CACX,CACA,SAASG,GAAW9V,GAChB,MAAO,CACH,YACA,YACA,eACF+V,QAAQ/V,MAAU,CACxB,CAKI,SAASgW,GAAQhW,EAAKO,EAAQoV,EAAQM,GACtC,IAAKH,GAAW9V,GAAM,CAClB,MACR,CACI,MAAMkW,EAAO3V,EAAOP,GACpB,MAAMmW,EAAOR,EAAO3V,GACpB,GAAIgU,GAASkC,IAASlC,GAASmC,GAAO,CAElCC,GAAMF,EAAMC,EAAMF,EAC1B,KAAW,CACH1V,EAAOP,GAAO6R,GAAMsE,EAC5B,CACA,CACA,SAASC,GAAM7V,EAAQoV,EAAQM,GAC3B,MAAMI,EAAUzR,GAAQ+Q,GAAUA,EAAS,CACvCA,GAEJ,MAAML,EAAOe,EAAQ9W,OACrB,IAAKyU,GAASzT,GAAS,CACnB,OAAOA,CACf,CACI0V,EAAUA,GAAW,GACrB,MAAMK,EAASL,EAAQK,QAAUN,GACjC,IAAIO,EACJ,IAAI,IAAIjS,EAAI,EAAGA,EAAIgR,IAAQhR,EAAE,CACzBiS,EAAUF,EAAQ/R,GAClB,IAAK0P,GAASuC,GAAU,CACpB,QACZ,CACQ,MAAMlG,EAAOC,OAAOD,KAAKkG,GACzB,IAAI,IAAItS,EAAI,EAAG4R,EAAOxF,EAAK9Q,OAAQ0E,EAAI4R,IAAQ5R,EAAE,CAC7CqS,EAAOjG,EAAKpM,GAAI1D,EAAQgW,EAASN,EAC7C,CACA,CACI,OAAO1V,CACX,CACA,SAASiW,GAAQjW,EAAQoV,GAErB,OAAOS,GAAM7V,EAAQoV,EAAQ,CACzBW,OAAQG,IAEhB,CAII,SAASA,GAAUzW,EAAKO,EAAQoV,GAChC,IAAKG,GAAW9V,GAAM,CAClB,MACR,CACI,MAAMkW,EAAO3V,EAAOP,GACpB,MAAMmW,EAAOR,EAAO3V,GACpB,GAAIgU,GAASkC,IAASlC,GAASmC,GAAO,CAClCK,GAAQN,EAAMC,EACtB,MAAW,IAAK7F,OAAOuD,UAAU6C,eAAe3C,KAAKxT,EAAQP,GAAM,CAC3DO,EAAOP,GAAO6R,GAAMsE,EAC5B,CACA,CASA,MAAMQ,GAAe,CAEjB,GAAK/U,GAAIA,EAET6D,EAAImR,GAAIA,EAAEnR,EACVoR,EAAID,GAAIA,EAAEC,GAIV,SAASC,GAAU9W,GACnB,MAAM+W,EAAQ/W,EAAIgX,MAAM,KACxB,MAAM3G,EAAO,GACb,IAAIuB,EAAM,GACV,IAAK,MAAMqF,KAAQF,EAAM,CACrBnF,GAAOqF,EACP,GAAIrF,EAAI6C,SAAS,MAAO,CACpB7C,EAAMA,EAAI5Q,MAAM,GAAI,GAAK,GACrC,KAAe,CACHqP,EAAK9O,KAAKqQ,GACVA,EAAM,EAClB,CACA,CACI,OAAOvB,CACX,CACA,SAAS6G,GAAgBlX,GACrB,MAAMqQ,EAAOyG,GAAU9W,GACvB,OAAQyS,IACJ,IAAK,MAAMxO,KAAKoM,EAAK,CACjB,GAAIpM,IAAM,GAAI,CACV,KAChB,CACYwO,EAAMA,GAAOA,EAAIxO,EAC7B,CACQ,OAAOwO,CAAG,CAElB,CACA,SAAS0E,GAAiB1E,EAAKzS,GAC3B,MAAMoX,EAAWT,GAAa3W,KAAS2W,GAAa3W,GAAOkX,GAAgBlX,IAC3E,OAAOoX,EAAS3E,EACpB,CAGI,SAAS4E,GAAY7T,GACrB,OAAOA,EAAI2O,OAAO,GAAGmF,cAAgB9T,EAAIxC,MAAM,EACnD,CACA,MAAMuW,GAAWpX,UAAeA,IAAU,YAC1C,MAAMqX,GAAcrX,UAAeA,IAAU,WAE7C,MAAMsX,GAAY,CAACxY,EAAGC,KAClB,GAAID,EAAEyY,OAASxY,EAAEwY,KAAM,CACnB,OAAO,KACf,CACI,IAAK,MAAMrZ,KAAQY,EAAE,CACjB,IAAKC,EAAEyY,IAAItZ,GAAO,CACd,OAAO,KACnB,CACA,CACI,OAAO,IAAI,EAKX,SAASuZ,GAActX,GACvB,OAAOA,EAAEJ,OAAS,WAAaI,EAAEJ,OAAS,SAAWI,EAAEJ,OAAS,aACpE,CAKI,MAAM2X,GAAK9V,KAAK8V,GACpB,MAAMC,GAAM,EAAID,GAChB,MAAME,GAAQD,GAAMD,GACpB,MAAMG,GAAW9D,OAAO+D,kBACxB,MAAMC,GAAcL,GAAK,IACzB,MAAMM,GAAUN,GAAK,EACrB,MAAMO,GAAaP,GAAK,EACxB,MAAMQ,GAAgBR,GAAK,EAAI,EAC/B,MAAMS,GAAQvW,KAAKuW,MACnB,MAAMC,GAAOxW,KAAKwW,KAClB,SAASC,GAAa/S,EAAGoR,EAAG4B,GACxB,OAAO1W,KAAK2W,IAAIjT,EAAIoR,GAAK4B,CAC7B,CAGI,SAASE,GAAQlU,GACjB,MAAMmU,EAAe7W,KAAKJ,MAAM8C,GAChCA,EAAQ+T,GAAa/T,EAAOmU,EAAcnU,EAAQ,KAAQmU,EAAenU,EACzE,MAAMoU,EAAY9W,KAAKqP,IAAI,GAAIrP,KAAK+W,MAAMR,GAAM7T,KAChD,MAAMsU,EAAWtU,EAAQoU,EACzB,MAAMG,EAAeD,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAI,GACjF,OAAOC,EAAeH,CAC1B,CAII,SAASI,GAAW9Y,GACpB,MAAM+Y,EAAS,GACf,MAAMC,EAAOpX,KAAKoX,KAAKhZ,GACvB,IAAImE,EACJ,IAAIA,EAAI,EAAGA,EAAI6U,EAAM7U,IAAI,CACrB,GAAInE,EAAQmE,IAAM,EAAG,CACjB4U,EAAO3X,KAAK+C,GACZ4U,EAAO3X,KAAKpB,EAAQmE,EAChC,CACA,CACI,GAAI6U,KAAUA,EAAO,GAAI,CACrBD,EAAO3X,KAAK4X,EACpB,CACID,EAAOla,MAAK,CAACC,EAAGC,IAAID,EAAIC,IAAGka,MAC3B,OAAOF,CACX,CACA,SAASG,GAASrV,GACd,OAAQsV,MAAM5E,WAAW1Q,KAAOmQ,SAASnQ,EAC7C,CACA,SAASuV,GAAY9T,EAAGgT,GACpB,MAAMe,EAAUzX,KAAKJ,MAAM8D,GAC3B,OAAO+T,EAAUf,GAAWhT,GAAK+T,EAAUf,GAAWhT,CAC1D,CAGI,SAASgU,GAAmBC,EAAOnZ,EAAQoZ,GAC3C,IAAIrV,EAAGgR,EAAMnV,EACb,IAAImE,EAAI,EAAGgR,EAAOoE,EAAMna,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC1CnE,EAAQuZ,EAAMpV,GAAGqV,GACjB,IAAKL,MAAMnZ,GAAQ,CACfI,EAAO0B,IAAMF,KAAKE,IAAI1B,EAAO0B,IAAK9B,GAClCI,EAAOyB,IAAMD,KAAKC,IAAIzB,EAAOyB,IAAK7B,EAC9C,CACA,CACA,CACA,SAASyZ,GAAUC,GACf,OAAOA,GAAWhC,GAAK,IAC3B,CACA,SAASiC,GAAUC,GACf,OAAOA,GAAW,IAAMlC,GAC5B,CAOI,SAASmC,GAAevU,GACxB,IAAKwO,GAAexO,GAAI,CACpB,MACR,CACI,IAAInF,EAAI,EACR,IAAI0S,EAAI,EACR,MAAMjR,KAAKJ,MAAM8D,EAAInF,GAAKA,IAAMmF,EAAE,CAC9BnF,GAAK,GACL0S,GACR,CACI,OAAOA,CACX,CAEA,SAASiH,GAAkBC,EAAaC,GACpC,MAAMC,EAAsBD,EAAW1U,EAAIyU,EAAYzU,EACvD,MAAM4U,EAAsBF,EAAWtD,EAAIqD,EAAYrD,EACvD,MAAMyD,EAA2BvY,KAAKoX,KAAKiB,EAAsBA,EAAsBC,EAAsBA,GAC7G,IAAIE,EAAQxY,KAAKyY,MAAMH,EAAqBD,GAC5C,GAAIG,GAAS,GAAM1C,GAAI,CACnB0C,GAASzC,EACjB,CACI,MAAO,CACHyC,QACAE,SAAUH,EAElB,CACA,SAASI,GAAsBC,EAAKC,GAChC,OAAO7Y,KAAKoX,KAAKpX,KAAKqP,IAAIwJ,EAAInV,EAAIkV,EAAIlV,EAAG,GAAK1D,KAAKqP,IAAIwJ,EAAI/D,EAAI8D,EAAI9D,EAAG,GAC1E,CAII,SAASgE,GAAW5b,EAAGC,GACvB,OAAQD,EAAIC,EAAI6Y,IAASD,GAAMD,EACnC,CAII,SAASiD,GAAgB7b,GACzB,OAAQA,EAAI6Y,GAAMA,IAAOA,EAC7B,CAGI,SAASiD,GAAcR,EAAOS,EAAOC,EAAKC,GAC1C,MAAMjc,EAAI6b,GAAgBP,GAC1B,MAAMxW,EAAI+W,GAAgBE,GAC1B,MAAM1a,EAAIwa,GAAgBG,GAC1B,MAAME,EAAeL,GAAgB/W,EAAI9E,GACzC,MAAMmc,EAAaN,GAAgBxa,EAAIrB,GACvC,MAAMoc,EAAeP,GAAgB7b,EAAI8E,GACzC,MAAMuX,EAAaR,GAAgB7b,EAAIqB,GACvC,OAAOrB,IAAM8E,GAAK9E,IAAMqB,GAAK4a,GAAyBnX,IAAMzD,GAAK6a,EAAeC,GAAcC,EAAeC,CACjH,CAOI,SAASC,GAAYpb,EAAO8B,EAAKD,GACjC,OAAOD,KAAKC,IAAIC,EAAKF,KAAKE,IAAID,EAAK7B,GACvC,CAII,SAASqb,GAAYrb,GACrB,OAAOob,GAAYpb,GAAQ,MAAO,MACtC,CAOI,SAASsb,GAAWtb,EAAO6a,EAAOC,EAAKxC,EAAU,MACjD,OAAOtY,GAAS4B,KAAKE,IAAI+Y,EAAOC,GAAOxC,GAAWtY,GAAS4B,KAAKC,IAAIgZ,EAAOC,GAAOxC,CACtF,CAEA,SAASiD,GAAQC,EAAOxb,EAAOyb,GAC3BA,EAAMA,GAAG,CAAMlG,GAAQiG,EAAMjG,GAASvV,GACtC,IAAI0b,EAAKF,EAAMpc,OAAS,EACxB,IAAIuc,EAAK,EACT,IAAIC,EACJ,MAAMF,EAAKC,EAAK,EAAE,CACdC,EAAMD,EAAKD,GAAM,EACjB,GAAID,EAAIG,GAAM,CACVD,EAAKC,CACjB,KAAe,CACHF,EAAKE,CACjB,CACA,CACI,MAAO,CACHD,KACAD,KAER,CAQI,MAAMG,GAAe,CAACL,EAAO3b,EAAKG,EAAO8b,IAAOP,GAAQC,EAAOxb,EAAO8b,EAAQvG,IAC1E,MAAMwG,EAAKP,EAAMjG,GAAO1V,GACxB,OAAOkc,EAAK/b,GAAS+b,IAAO/b,GAASwb,EAAMjG,EAAQ,GAAG1V,KAASG,CAAK,EACnEuV,GAAQiG,EAAMjG,GAAO1V,GAAOG,GAOjC,MAAMgc,GAAgB,CAACR,EAAO3b,EAAKG,IAAQub,GAAQC,EAAOxb,GAAQuV,GAAQiG,EAAMjG,GAAO1V,IAAQG,IAkBnG,MAAMic,GAAc,CAChB,OACA,MACA,QACA,SACA,WAEJ,SAASC,GAAkB3C,EAAO4C,GAC9B,GAAI5C,EAAM6C,SAAU,CAChB7C,EAAM6C,SAASC,UAAUjb,KAAK+a,GAC9B,MACR,CACIhM,OAAOmM,eAAe/C,EAAO,WAAY,CACrCgD,aAAc,KACdC,WAAY,MACZxc,MAAO,CACHqc,UAAW,CACPF,MAIZF,GAAYQ,SAAS5c,IACjB,MAAM6c,EAAS,UAAYxF,GAAYrX,GACvC,MAAM8c,EAAOpD,EAAM1Z,GACnBsQ,OAAOmM,eAAe/C,EAAO1Z,EAAK,CAC9B0c,aAAc,KACdC,WAAY,MACZ,KAAAxc,IAAU0U,GACN,MAAMkI,EAAMD,EAAK/H,MAAMpX,KAAMkX,GAC7B6E,EAAM6C,SAASC,UAAUI,SAASI,IAC9B,UAAWA,EAAOH,KAAY,WAAY,CACtCG,EAAOH,MAAWhI,EAC1C,KAEgB,OAAOkI,CACvB,GACU,GAEV,CACA,SAASE,GAAoBvD,EAAO4C,GAChC,MAAMY,EAAOxD,EAAM6C,SACnB,IAAKW,EAAM,CACP,MACR,CACI,MAAMV,EAAYU,EAAKV,UACvB,MAAM9G,EAAQ8G,EAAUzG,QAAQuG,GAChC,GAAI5G,KAAW,EAAG,CACd8G,EAAUW,OAAOzH,EAAO,EAChC,CACI,GAAI8G,EAAUjd,OAAS,EAAG,CACtB,MACR,CACI6c,GAAYQ,SAAS5c,WACV0Z,EAAM1Z,EAAI,WAEd0Z,EAAM6C,QACjB,CAgBG,MAAMa,GAAmB,WACxB,UAAWC,SAAW,YAAa,CAC/B,OAAO,SAAS1I,GACZ,OAAOA,GACnB,CACA,CACI,OAAO0I,OAAOC,qBAClB,CAP4B,GAWxB,SAASC,GAAU3I,EAAIE,GACvB,IAAI0I,EAAY,GAChB,IAAIC,EAAU,MACd,OAAO,YAAY5I,GAEf2I,EAAY3I,EACZ,IAAK4I,EAAS,CACVA,EAAU,KACVL,GAAiBrJ,KAAKsJ,QAAQ,KAC1BI,EAAU,MACV7I,EAAGG,MAAMD,EAAS0I,EAAU,GAE5C,CACA,CACA,CAGI,SAASE,GAAS9I,EAAI+I,GACtB,IAAIC,EACJ,OAAO,YAAY/I,GACf,GAAI8I,EAAO,CACPE,aAAaD,GACbA,EAAUE,WAAWlJ,EAAI+I,EAAO9I,EAC5C,KAAe,CACHD,EAAGG,MAAMpX,KAAMkX,EAC3B,CACQ,OAAO8I,CACf,CACA,CAII,MAAMI,GAAsBC,GAAQA,IAAU,QAAU,OAASA,IAAU,MAAQ,QAAU,SAI7F,MAAMC,GAAiB,CAACD,EAAOhD,EAAOC,IAAM+C,IAAU,QAAUhD,EAAQgD,IAAU,MAAQ/C,GAAOD,EAAQC,GAAO,EAWhH,SAASiD,GAAiCC,EAAMC,EAAQC,GACxD,MAAMC,EAAaF,EAAO7e,OAC1B,IAAIyb,EAAQ,EACZ,IAAIuD,EAAQD,EACZ,GAAIH,EAAKK,QAAS,CACd,MAAMC,OAAEA,EAAMC,QAAGA,GAAaP,EAC9B,MAAMQ,EAAOF,EAAOE,KACpB,MAAM1c,IAAEA,EAAGD,IAAGA,EAAG4c,WAAGA,EAAUC,WAAGA,GAAgBJ,EAAOK,gBACxD,GAAIF,EAAY,CACZ5D,EAAQO,GAAYxZ,KAAKE,IACzB+Z,GAAa0C,EAASC,EAAM1c,GAAK6Z,GACjCuC,EAAqBC,EAAatC,GAAaoC,EAAQO,EAAMF,EAAOM,iBAAiB9c,IAAM6Z,IAAK,EAAGwC,EAAa,EAC5H,CACQ,GAAIO,EAAY,CACZN,EAAQhD,GAAYxZ,KAAKC,IACzBga,GAAa0C,EAASD,EAAOE,KAAM3c,EAAK,MAAM6Z,GAAK,EACnDwC,EAAqB,EAAIrC,GAAaoC,EAAQO,EAAMF,EAAOM,iBAAiB/c,GAAM,MAAM6Z,GAAK,GAAIb,EAAOsD,GAActD,CAClI,KAAe,CACHuD,EAAQD,EAAatD,CACjC,CACA,CACI,MAAO,CACHA,QACAuD,QAER,CAMI,SAASS,GAAoBb,GAC7B,MAAMc,OAAEA,EAAMC,OAAGA,EAAMC,aAAGA,GAAkBhB,EAC5C,MAAMiB,EAAY,CACdC,KAAMJ,EAAOhd,IACbqd,KAAML,EAAOjd,IACbud,KAAML,EAAOjd,IACbud,KAAMN,EAAOld,KAEjB,IAAKmd,EAAc,CACfhB,EAAKgB,aAAeC,EACpB,OAAO,IACf,CACI,MAAMK,EAAUN,EAAaE,OAASJ,EAAOhd,KAAOkd,EAAaG,OAASL,EAAOjd,KAAOmd,EAAaI,OAASL,EAAOjd,KAAOkd,EAAaK,OAASN,EAAOld,IACzJsO,OAAOyB,OAAOoN,EAAcC,GAC5B,OAAOK,CACX,CAEA,MAAMC,GAAUjO,GAAIA,IAAM,GAAKA,IAAM,EACrC,MAAMkO,GAAY,CAAClO,EAAG1N,EAAGiP,MAAMjR,KAAKqP,IAAI,EAAG,IAAMK,GAAK,IAAM1P,KAAK6d,KAAKnO,EAAI1N,GAAK+T,GAAM9E,IACrF,MAAM6M,GAAa,CAACpO,EAAG1N,EAAGiP,IAAIjR,KAAKqP,IAAI,GAAI,GAAKK,GAAK1P,KAAK6d,KAAKnO,EAAI1N,GAAK+T,GAAM9E,GAAK,EAK/E,MAAM8M,GAAU,CAChBC,OAAStO,GAAIA,EACbuO,WAAavO,GAAIA,EAAIA,EACrBwO,YAAcxO,IAAKA,GAAKA,EAAI,GAC5ByO,cAAgBzO,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,GAAK,MAASA,GAAKA,EAAI,GAAK,GAC3E0O,YAAc1O,GAAIA,EAAIA,EAAIA,EAC1B2O,aAAe3O,IAAKA,GAAK,GAAKA,EAAIA,EAAI,EACtC4O,eAAiB5O,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAI,GAClF6O,YAAc7O,GAAIA,EAAIA,EAAIA,EAAIA,EAC9B8O,aAAe9O,MAAOA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC5C+O,eAAiB/O,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,GAAK,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC3FgP,YAAchP,GAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAClCiP,aAAejP,IAAKA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,EAC9CkP,eAAiBlP,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAClGmP,WAAanP,IAAK1P,KAAK8e,IAAIpP,EAAI0G,IAAW,EAC1C2I,YAAcrP,GAAI1P,KAAK6d,IAAInO,EAAI0G,IAC/B4I,cAAgBtP,IAAK,IAAO1P,KAAK8e,IAAIhJ,GAAKpG,GAAK,GAC/CuP,WAAavP,GAAIA,IAAM,EAAI,EAAI1P,KAAKqP,IAAI,EAAG,IAAMK,EAAI,IACrDwP,YAAcxP,GAAIA,IAAM,EAAI,GAAK1P,KAAKqP,IAAI,GAAI,GAAKK,GAAK,EACxDyP,cAAgBzP,GAAIiO,GAAOjO,GAAKA,EAAIA,EAAI,GAAM,GAAM1P,KAAKqP,IAAI,EAAG,IAAMK,EAAI,EAAI,IAAM,KAAQ1P,KAAKqP,IAAI,GAAI,IAAMK,EAAI,EAAI,IAAM,GAC7H0P,WAAa1P,GAAIA,GAAK,EAAIA,IAAM1P,KAAKoX,KAAK,EAAI1H,EAAIA,GAAK,GACvD2P,YAAc3P,GAAI1P,KAAKoX,KAAK,GAAK1H,GAAK,GAAKA,GAC3C4P,cAAgB5P,IAAKA,GAAK,IAAO,GAAK,IAAO1P,KAAKoX,KAAK,EAAI1H,EAAIA,GAAK,GAAK,IAAO1P,KAAKoX,KAAK,GAAK1H,GAAK,GAAKA,GAAK,GAC9G6P,cAAgB7P,GAAIiO,GAAOjO,GAAKA,EAAIkO,GAAUlO,EAAG,KAAO,IACxD8P,eAAiB9P,GAAIiO,GAAOjO,GAAKA,EAAIoO,GAAWpO,EAAG,KAAO,IAC1D,gBAAA+P,CAAkB/P,GACd,MAAM1N,EAAI,MACV,MAAMiP,EAAI,IACV,OAAO0M,GAAOjO,GAAKA,EAAIA,EAAI,GAAM,GAAMkO,GAAUlO,EAAI,EAAG1N,EAAGiP,GAAK,GAAM,GAAM6M,GAAWpO,EAAI,EAAI,EAAG1N,EAAGiP,EAC7G,EACI,UAAAyO,CAAYhQ,GACR,MAAM1N,EAAI,QACV,OAAO0N,EAAIA,IAAM1N,EAAI,GAAK0N,EAAI1N,EACtC,EACI,WAAA2d,CAAajQ,GACT,MAAM1N,EAAI,QACV,OAAQ0N,GAAK,GAAKA,IAAM1N,EAAI,GAAK0N,EAAI1N,GAAK,CAClD,EACI,aAAA4d,CAAelQ,GACX,IAAI1N,EAAI,QACR,IAAK0N,GAAK,IAAO,EAAG,CAChB,MAAO,IAAOA,EAAIA,KAAO1N,GAAK,OAAS,GAAK0N,EAAI1N,GAC5D,CACQ,MAAO,KAAQ0N,GAAK,GAAKA,KAAO1N,GAAK,OAAS,GAAK0N,EAAI1N,GAAK,EACpE,EACI6d,aAAenQ,GAAI,EAAIqO,GAAQ+B,cAAc,EAAIpQ,GACjD,aAAAoQ,CAAepQ,GACX,MAAMvM,EAAI,OACV,MAAMpC,EAAI,KACV,GAAI2O,EAAI,EAAI3O,EAAG,CACX,OAAOoC,EAAIuM,EAAIA,CAC3B,CACQ,GAAIA,EAAI,EAAI3O,EAAG,CACX,OAAOoC,GAAKuM,GAAK,IAAM3O,GAAK2O,EAAI,GAC5C,CACQ,GAAIA,EAAI,IAAM3O,EAAG,CACb,OAAOoC,GAAKuM,GAAK,KAAO3O,GAAK2O,EAAI,KAC7C,CACQ,OAAOvM,GAAKuM,GAAK,MAAQ3O,GAAK2O,EAAI,OAC1C,EACIqQ,gBAAkBrQ,GAAIA,EAAI,GAAMqO,GAAQ8B,aAAanQ,EAAI,GAAK,GAAMqO,GAAQ+B,cAAcpQ,EAAI,EAAI,GAAK,GAAM,IAGjH,SAASsQ,GAAoB5hB,GACzB,GAAIA,UAAgBA,IAAU,SAAU,CACpC,MAAMD,EAAOC,EAAM2T,WACnB,OAAO5T,IAAS,0BAA4BA,IAAS,yBAC7D,CACI,OAAO,KACX,CACA,SAASyS,GAAMxS,GACX,OAAO4hB,GAAoB5hB,GAASA,EAAQ,IAAIiS,GAAMjS,EAC1D,CACA,SAAS6hB,GAAc7hB,GACnB,OAAO4hB,GAAoB5hB,GAASA,EAAQ,IAAIiS,GAAMjS,GAAOsT,SAAS,IAAKD,OAAO,IAAK5P,WAC3F,CAEA,MAAMqe,GAAU,CACZ,IACA,IACA,cACA,SACA,WAEJ,MAAMC,GAAS,CACX,QACA,cACA,mBAEJ,SAASC,GAAwBC,GAC7BA,EAASC,IAAI,YAAa,CACtB1E,MAAO9f,UACPykB,SAAU,IACVC,OAAQ,eACR3N,GAAI/W,UACJwT,KAAMxT,UACN2kB,KAAM3kB,UACNsT,GAAItT,UACJqC,KAAMrC,YAEVukB,EAASK,SAAS,YAAa,CAC3BC,UAAW,MACXC,WAAY,MACZC,YAAcliB,GAAOA,IAAS,cAAgBA,IAAS,cAAgBA,IAAS,OAEpF0hB,EAASC,IAAI,aAAc,CACvBH,OAAQ,CACJhiB,KAAM,QACN2iB,WAAYX,IAEhBD,QAAS,CACL/hB,KAAM,SACN2iB,WAAYZ,MAGpBG,EAASK,SAAS,aAAc,CAC5BC,UAAW,cAEfN,EAASC,IAAI,cAAe,CACxBS,OAAQ,CACJC,UAAW,CACPT,SAAU,MAGlBU,OAAQ,CACJD,UAAW,CACPT,SAAU,IAGlBW,KAAM,CACFC,WAAY,CACRhB,OAAQ,CACJ7Q,KAAM,eAEV8R,QAAS,CACLjjB,KAAM,UACNoiB,SAAU,KAItBc,KAAM,CACFF,WAAY,CACRhB,OAAQ,CACJ/Q,GAAI,eAERgS,QAAS,CACLjjB,KAAM,UACNqiB,OAAQ,SACR3N,GAAKhT,GAAIA,EAAI,MAKjC,CAEA,SAASyhB,GAAqBjB,GAC1BA,EAASC,IAAI,SAAU,CACnBiB,YAAa,KACbC,QAAS,CACLC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAGlB,CAEA,MAAMC,GAAY,IAAIC,IACtB,SAASC,GAAgBC,EAAQ9N,GAC7BA,EAAUA,GAAW,GACrB,MAAM+N,EAAWD,EAASE,KAAKC,UAAUjO,GACzC,IAAIkO,EAAYP,GAAUQ,IAAIJ,GAC9B,IAAKG,EAAW,CACZA,EAAY,IAAIE,KAAKC,aAAaP,EAAQ9N,GAC1C2N,GAAUvB,IAAI2B,EAAUG,EAChC,CACI,OAAOA,CACX,CACA,SAASI,GAAaC,EAAKT,EAAQ9N,GAC/B,OAAO6N,GAAgBC,EAAQ9N,GAASwO,OAAOD,EACnD,CAEA,MAAME,GAAa,CAClB,MAAAC,CAAQxkB,GACD,OAAOyE,GAAQzE,GAAUA,EAAQ,GAAKA,CAC9C,EACC,OAAAykB,CAASC,EAAWnP,EAAOoP,GACpB,GAAID,IAAc,EAAG,CACjB,MAAO,GACnB,CACQ,MAAMd,EAASpmB,KAAKonB,MAAM9O,QAAQ8N,OAClC,IAAIiB,EACJ,IAAIC,EAAQJ,EACZ,GAAIC,EAAMvlB,OAAS,EAAG,CAClB,MAAM2lB,EAAUnjB,KAAKC,IAAID,KAAK2W,IAAIoM,EAAM,GAAG3kB,OAAQ4B,KAAK2W,IAAIoM,EAAMA,EAAMvlB,OAAS,GAAGY,QACpF,GAAI+kB,EAAU,MAAQA,EAAU,KAAO,CACnCF,EAAW,YAC3B,CACYC,EAAQE,GAAeN,EAAWC,EAC9C,CACQ,MAAMM,EAAW9M,GAAMvW,KAAK2W,IAAIuM,IAChC,MAAMI,EAAa/L,MAAM8L,GAAY,EAAIrjB,KAAKC,IAAID,KAAKE,KAAK,EAAIF,KAAK+W,MAAMsM,GAAW,IAAK,GAC3F,MAAMnP,EAAU,CACZ+O,WACAM,sBAAuBD,EACvBE,sBAAuBF,GAE3B/U,OAAOyB,OAAOkE,EAAStY,KAAKsY,QAAQ6O,MAAML,QAC1C,OAAOF,GAAaM,EAAWd,EAAQ9N,EAC/C,EACC,WAAAuP,CAAaX,EAAWnP,EAAOoP,GACxB,GAAID,IAAc,EAAG,CACjB,MAAO,GACnB,CACQ,MAAMY,EAASX,EAAMpP,GAAOgQ,aAAeb,EAAY9iB,KAAKqP,IAAI,GAAIrP,KAAK+W,MAAMR,GAAMuM,KACrF,GAAI,CACA,EACA,EACA,EACA,EACA,GACA,IACFc,SAASF,IAAW/P,EAAQ,GAAMoP,EAAMvlB,OAAQ,CAC9C,OAAOmlB,GAAWE,QAAQ7Q,KAAKpW,KAAMknB,EAAWnP,EAAOoP,EACnE,CACQ,MAAO,EACf,GAEA,SAASK,GAAeN,EAAWC,GAC/B,IAAIG,EAAQH,EAAMvlB,OAAS,EAAIulB,EAAM,GAAG3kB,MAAQ2kB,EAAM,GAAG3kB,MAAQ2kB,EAAM,GAAG3kB,MAAQ2kB,EAAM,GAAG3kB,MAC3F,GAAI4B,KAAK2W,IAAIuM,IAAU,GAAKJ,IAAc9iB,KAAK+W,MAAM+L,GAAY,CAC7DI,EAAQJ,EAAY9iB,KAAK+W,MAAM+L,EACvC,CACI,OAAOI,CACX,CACC,IAAIW,GAAQ,CACTlB,eAGJ,SAASmB,GAAmBzD,GACxBA,EAASC,IAAI,QAAS,CAClByD,QAAS,KACTC,OAAQ,MACR7Q,QAAS,MACT8Q,YAAa,MACpBC,OAAQ,QACDC,KAAM,KACbC,MAAO,EACAC,KAAM,CACFN,QAAS,KACTO,UAAW,EACXC,gBAAiB,KACjBC,UAAW,KACXC,WAAY,EACZC,UAAW,CAACC,EAAMzQ,IAAUA,EAAQoQ,UACpCM,UAAW,CAACD,EAAMzQ,IAAUA,EAAQtD,MACpCoT,OAAQ,OAEZa,OAAQ,CACJd,QAAS,KACTe,KAAM,GACNC,WAAY,EACZC,MAAO,GAEXC,MAAO,CACHlB,QAAS,MACTmB,KAAM,GACN1D,QAAS,CACLC,IAAK,EACLE,OAAQ,IAGhBoB,MAAO,CACHoC,YAAa,EACbC,YAAa,GACbC,OAAQ,MACRC,gBAAiB,EACjBC,gBAAiB,GACjB/D,QAAS,EACTuC,QAAS,KACTyB,SAAU,KACVC,gBAAiB,EACjBC,YAAa,EACb9S,SAAUiR,GAAMlB,WAAWC,OAC3B+C,MAAO,GACPC,MAAO,GACP3J,MAAO,SACP4J,WAAY,OACZC,kBAAmB,MACnBC,cAAe,4BACfC,gBAAiB,KAGzB3F,EAAS3jB,MAAM,cAAe,QAAS,GAAI,SAC3C2jB,EAAS3jB,MAAM,aAAc,QAAS,GAAI,eAC1C2jB,EAAS3jB,MAAM,eAAgB,QAAS,GAAI,eAC5C2jB,EAAS3jB,MAAM,cAAe,QAAS,GAAI,SAC3C2jB,EAASK,SAAS,QAAS,CACvBC,UAAW,MACXE,YAAcliB,IAAQA,EAAKsnB,WAAW,YAActnB,EAAKsnB,WAAW,UAAYtnB,IAAS,YAAcA,IAAS,SAChHiiB,WAAajiB,GAAOA,IAAS,cAAgBA,IAAS,kBAAoBA,IAAS,SAEvF0hB,EAASK,SAAS,SAAU,CACxBC,UAAW,UAEfN,EAASK,SAAS,cAAe,CAC7BG,YAAcliB,GAAOA,IAAS,mBAAqBA,IAAS,WAC5DiiB,WAAajiB,GAAOA,IAAS,mBAErC,CAEA,MAAMunB,GAAY3X,OAAOsF,OAAO,MAChC,MAAMsS,GAAc5X,OAAOsF,OAAO,MACjC,SAASuS,GAAWC,EAAMpoB,GACvB,IAAKA,EAAK,CACN,OAAOooB,CACf,CACI,MAAM/X,EAAOrQ,EAAIgX,MAAM,KACvB,IAAI,IAAI1S,EAAI,EAAGN,EAAIqM,EAAK9Q,OAAQ+E,EAAIN,IAAKM,EAAE,CACvC,MAAML,EAAIoM,EAAK/L,GACf8jB,EAAOA,EAAKnkB,KAAOmkB,EAAKnkB,GAAKqM,OAAOsF,OAAO,MACnD,CACI,OAAOwS,CACX,CACA,SAAS/F,GAAIgG,EAAMC,EAAO3D,GACtB,UAAW2D,IAAU,SAAU,CAC3B,OAAOlS,GAAM+R,GAAWE,EAAMC,GAAQ3D,EAC9C,CACI,OAAOvO,GAAM+R,GAAWE,EAAM,IAAKC,EACvC,CACC,MAAMC,GACH,WAAAlW,CAAYmW,EAAcC,GACtB9qB,KAAKolB,UAAYllB,UACjBF,KAAK+qB,gBAAkB,kBACvB/qB,KAAKgrB,YAAc,kBACnBhrB,KAAKgV,MAAQ,OACbhV,KAAKirB,SAAW,GAChBjrB,KAAKkrB,iBAAoBC,GAAUA,EAAQ/D,MAAMgE,SAASC,sBAC1DrrB,KAAKsrB,SAAW,GAChBtrB,KAAKurB,OAAS,CACV,YACA,WACA,QACA,aACA,aAEJvrB,KAAKwrB,KAAO,CACRC,OAAQ,qDACR1R,KAAM,GACN2R,MAAO,SACPC,WAAY,IACZ1W,OAAQ,MAEZjV,KAAK4rB,MAAQ,GACb5rB,KAAK6rB,qBAAuB,CAACC,EAAKxT,IAAU+L,GAAc/L,EAAQyS,iBAClE/qB,KAAK+rB,iBAAmB,CAACD,EAAKxT,IAAU+L,GAAc/L,EAAQ0S,aAC9DhrB,KAAKgsB,WAAa,CAACF,EAAKxT,IAAU+L,GAAc/L,EAAQtD,OACxDhV,KAAKisB,UAAY,IACjBjsB,KAAKksB,YAAc,CACfC,KAAM,UACNC,UAAW,KACXC,iBAAkB,OAEtBrsB,KAAKssB,oBAAsB,KAC3BtsB,KAAKusB,QAAU,KACfvsB,KAAK2D,QAAU,KACf3D,KAAKwsB,QAAU,KACfxsB,KAAKysB,QAAU,GACfzsB,KAAK0sB,WAAa,KAClB1sB,KAAK2sB,MAAQzsB,UACbF,KAAK4sB,OAAS,GACd5sB,KAAK6sB,SAAW,KAChB7sB,KAAK8sB,wBAA0B,KAC/B9sB,KAAK8kB,SAAS+F,GACd7qB,KAAKoX,MAAM0T,EACnB,CACC,GAAApG,CAAIiG,EAAO3D,GACJ,OAAOtC,GAAI1kB,KAAM2qB,EAAO3D,EAChC,CACC,GAAAP,CAAIkE,GACG,OAAOH,GAAWxqB,KAAM2qB,EAChC,CACC,QAAA7F,CAAS6F,EAAO3D,GACT,OAAOtC,GAAI6F,GAAaI,EAAO3D,EACvC,CACI,QAAA+F,CAASpC,EAAO3D,GACZ,OAAOtC,GAAI4F,GAAWK,EAAO3D,EACrC,CACC,KAAAlmB,CAAM6pB,EAAO5nB,EAAMiqB,EAAaC,GACzB,MAAMC,EAAc1C,GAAWxqB,KAAM2qB,GACrC,MAAMwC,EAAoB3C,GAAWxqB,KAAMgtB,GAC3C,MAAMI,EAAc,IAAMrqB,EAC1B4P,OAAO0a,iBAAiBH,EAAa,CACjCE,CAACA,GAAc,CACX5qB,MAAO0qB,EAAYnqB,GACnBuqB,SAAU,MAEdvqB,CAACA,GAAO,CACJic,WAAY,KACZ,GAAAyH,GACI,MAAM8G,EAAQvtB,KAAKotB,GACnB,MAAMxqB,EAASuqB,EAAkBF,GACjC,GAAI5W,GAASkX,GAAQ,CACjB,OAAO5a,OAAOyB,OAAO,GAAIxR,EAAQ2qB,EACzD,CACoB,OAAO5W,GAAe4W,EAAO3qB,EACjD,EACgB,GAAA8hB,CAAKliB,GACDxC,KAAKotB,GAAe5qB,CACxC,IAGA,CACI,KAAA4U,CAAMoW,GACFA,EAASvO,SAAS7H,GAAQA,EAAMpX,OACxC,EAEA,IAAIykB,GAA2B,IAAImG,GAAS,CACxC3F,YAAcliB,IAAQA,EAAKsnB,WAAW,MACtCrF,WAAajiB,GAAOA,IAAS,SAC7B6oB,MAAO,CACH7G,UAAW,eAEfmH,YAAa,CACTjH,YAAa,MACbD,WAAY,QAEjB,CACCR,GACAkB,GACAwC,KAQA,SAASuF,GAAajC,GACtB,IAAKA,GAAQvV,GAAcuV,EAAKzR,OAAS9D,GAAcuV,EAAKC,QAAS,CACjE,OAAO,IACf,CACI,OAAQD,EAAKE,MAAQF,EAAKE,MAAQ,IAAM,KAAOF,EAAKvW,OAASuW,EAAKvW,OAAS,IAAM,IAAMuW,EAAKzR,KAAO,MAAQyR,EAAKC,MACpH,CAGI,SAASiC,GAAa5B,EAAK6B,EAAMC,EAAIC,EAASC,GAC9C,IAAIC,EAAYJ,EAAKG,GACrB,IAAKC,EAAW,CACZA,EAAYJ,EAAKG,GAAUhC,EAAIkC,YAAYF,GAAQ1E,MACnDwE,EAAGhqB,KAAKkqB,EAChB,CACI,GAAIC,EAAYF,EAAS,CACrBA,EAAUE,CAClB,CACI,OAAOF,CACX,CAoDI,SAASI,GAAY7G,EAAO8G,EAAO9E,GACnC,MAAM8B,EAAmB9D,EAAM+G,wBAC/B,MAAMC,EAAYhF,IAAU,EAAIhlB,KAAKC,IAAI+kB,EAAQ,EAAG,IAAO,EAC3D,OAAOhlB,KAAKJ,OAAOkqB,EAAQE,GAAalD,GAAoBA,EAAmBkD,CACnF,CAGI,SAASC,GAAYC,EAAQxC,GAC7B,IAAKA,IAAQwC,EAAQ,CACjB,MACR,CACIxC,EAAMA,GAAOwC,EAAOC,WAAW,MAC/BzC,EAAI0C,OAGJ1C,EAAI2C,iBACJ3C,EAAI4C,UAAU,EAAG,EAAGJ,EAAOlF,MAAOkF,EAAOK,QACzC7C,EAAI8C,SACR,CACA,SAASC,GAAU/C,EAAKxT,EAASxQ,EAAGoR,GAEhC4V,GAAgBhD,EAAKxT,EAASxQ,EAAGoR,EAAG,KACxC,CAEA,SAAS4V,GAAgBhD,EAAKxT,EAASxQ,EAAGoR,EAAGzS,GACzC,IAAIlE,EAAMwsB,EAASC,EAASjV,EAAMkV,EAAc7F,EAAO8F,EAAUC,EACjE,MAAMzD,EAAQpT,EAAQ8W,WACtB,MAAMC,EAAW/W,EAAQ+W,SACzB,MAAMC,EAAShX,EAAQgX,OACvB,IAAIC,GAAOF,GAAY,GAAK9U,GAC5B,GAAImR,UAAgBA,IAAU,SAAU,CACpCnpB,EAAOmpB,EAAMvV,WACb,GAAI5T,IAAS,6BAA+BA,IAAS,6BAA8B,CAC/EupB,EAAI0C,OACJ1C,EAAI0D,UAAU1nB,EAAGoR,GACjB4S,EAAInkB,OAAO4nB,GACXzD,EAAI2D,UAAU/D,GAAQA,EAAMtC,MAAQ,GAAIsC,EAAMiD,OAAS,EAAGjD,EAAMtC,MAAOsC,EAAMiD,QAC7E7C,EAAI8C,UACJ,MACZ,CACA,CACI,GAAIjT,MAAM2T,IAAWA,GAAU,EAAG,CAC9B,MACR,CACIxD,EAAI4D,YACJ,OAAOhE,GAEH,QACI,GAAIjlB,EAAG,CACHqlB,EAAI6D,QAAQ7nB,EAAGoR,EAAGzS,EAAI,EAAG6oB,EAAQ,EAAG,EAAGnV,GACvD,KAAmB,CACH2R,EAAI8D,IAAI9nB,EAAGoR,EAAGoW,EAAQ,EAAGnV,GACzC,CACY2R,EAAI+D,YACJ,MACJ,IAAK,WACDzG,EAAQ3iB,EAAIA,EAAI,EAAI6oB,EACpBxD,EAAIgE,OAAOhoB,EAAI1D,KAAK6d,IAAIsN,GAAOnG,EAAOlQ,EAAI9U,KAAK8e,IAAIqM,GAAOD,GAC1DC,GAAO7U,GACPoR,EAAIiE,OAAOjoB,EAAI1D,KAAK6d,IAAIsN,GAAOnG,EAAOlQ,EAAI9U,KAAK8e,IAAIqM,GAAOD,GAC1DC,GAAO7U,GACPoR,EAAIiE,OAAOjoB,EAAI1D,KAAK6d,IAAIsN,GAAOnG,EAAOlQ,EAAI9U,KAAK8e,IAAIqM,GAAOD,GAC1DxD,EAAI+D,YACJ,MACJ,IAAK,cAQDZ,EAAeK,EAAS,KACxBvV,EAAOuV,EAASL,EAChBF,EAAU3qB,KAAK8e,IAAIqM,EAAM9U,IAAcV,EACvCmV,EAAW9qB,KAAK8e,IAAIqM,EAAM9U,KAAehU,EAAIA,EAAI,EAAIwoB,EAAelV,GACpEiV,EAAU5qB,KAAK6d,IAAIsN,EAAM9U,IAAcV,EACvCoV,EAAW/qB,KAAK6d,IAAIsN,EAAM9U,KAAehU,EAAIA,EAAI,EAAIwoB,EAAelV,GACpE+R,EAAI8D,IAAI9nB,EAAIonB,EAAUhW,EAAI8V,EAASC,EAAcM,EAAMrV,GAAIqV,EAAM/U,IACjEsR,EAAI8D,IAAI9nB,EAAIqnB,EAAUjW,EAAI6V,EAASE,EAAcM,EAAM/U,GAAS+U,GAChEzD,EAAI8D,IAAI9nB,EAAIonB,EAAUhW,EAAI8V,EAASC,EAAcM,EAAKA,EAAM/U,IAC5DsR,EAAI8D,IAAI9nB,EAAIqnB,EAAUjW,EAAI6V,EAASE,EAAcM,EAAM/U,GAAS+U,EAAMrV,IACtE4R,EAAI+D,YACJ,MACJ,IAAK,OACD,IAAKR,EAAU,CACXtV,EAAO3V,KAAK4rB,QAAUV,EACtBlG,EAAQ3iB,EAAIA,EAAI,EAAIsT,EACpB+R,EAAImE,KAAKnoB,EAAIshB,EAAOlQ,EAAIa,EAAM,EAAIqP,EAAO,EAAIrP,GAC7C,KAChB,CACYwV,GAAO9U,GACS,IAAK,UACrByU,EAAW9qB,KAAK8e,IAAIqM,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCP,EAAU3qB,KAAK8e,IAAIqM,GAAOD,EAC1BN,EAAU5qB,KAAK6d,IAAIsN,GAAOD,EAC1BH,EAAW/qB,KAAK6d,IAAIsN,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCxD,EAAIgE,OAAOhoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIiE,OAAOjoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BjD,EAAIiE,OAAOjoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIiE,OAAOjoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BjD,EAAI+D,YACJ,MACJ,IAAK,WACDN,GAAO9U,GACS,IAAK,QACrByU,EAAW9qB,KAAK8e,IAAIqM,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCP,EAAU3qB,KAAK8e,IAAIqM,GAAOD,EAC1BN,EAAU5qB,KAAK6d,IAAIsN,GAAOD,EAC1BH,EAAW/qB,KAAK6d,IAAIsN,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCxD,EAAIgE,OAAOhoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIiE,OAAOjoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIgE,OAAOhoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BjD,EAAIiE,OAAOjoB,EAAIqnB,EAAUjW,EAAI6V,GAC7B,MACJ,IAAK,OACDG,EAAW9qB,KAAK8e,IAAIqM,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCP,EAAU3qB,KAAK8e,IAAIqM,GAAOD,EAC1BN,EAAU5qB,KAAK6d,IAAIsN,GAAOD,EAC1BH,EAAW/qB,KAAK6d,IAAIsN,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCxD,EAAIgE,OAAOhoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIiE,OAAOjoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIgE,OAAOhoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BjD,EAAIiE,OAAOjoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BQ,GAAO9U,GACPyU,EAAW9qB,KAAK8e,IAAIqM,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCP,EAAU3qB,KAAK8e,IAAIqM,GAAOD,EAC1BN,EAAU5qB,KAAK6d,IAAIsN,GAAOD,EAC1BH,EAAW/qB,KAAK6d,IAAIsN,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GACxCxD,EAAIgE,OAAOhoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIiE,OAAOjoB,EAAIonB,EAAUhW,EAAI8V,GAC7BlD,EAAIgE,OAAOhoB,EAAIqnB,EAAUjW,EAAI6V,GAC7BjD,EAAIiE,OAAOjoB,EAAIqnB,EAAUjW,EAAI6V,GAC7B,MACJ,IAAK,OACDA,EAAUtoB,EAAIA,EAAI,EAAIrC,KAAK8e,IAAIqM,GAAOD,EACtCN,EAAU5qB,KAAK6d,IAAIsN,GAAOD,EAC1BxD,EAAIgE,OAAOhoB,EAAIinB,EAAS7V,EAAI8V,GAC5BlD,EAAIiE,OAAOjoB,EAAIinB,EAAS7V,EAAI8V,GAC5B,MACJ,IAAK,OACDlD,EAAIgE,OAAOhoB,EAAGoR,GACd4S,EAAIiE,OAAOjoB,EAAI1D,KAAK8e,IAAIqM,IAAQ9oB,EAAIA,EAAI,EAAI6oB,GAASpW,EAAI9U,KAAK6d,IAAIsN,GAAOD,GACzE,MACJ,KAAK,MACDxD,EAAI+D,YACJ,MAER/D,EAAIoE,OACJ,GAAI5X,EAAQ6X,YAAc,EAAG,CACzBrE,EAAIsE,QACZ,CACA,CAOI,SAASC,GAAeC,EAAOC,EAAMC,GACrCA,EAASA,GAAU,GACnB,OAAQD,GAAQD,GAASA,EAAMxoB,EAAIyoB,EAAKvK,KAAOwK,GAAUF,EAAMxoB,EAAIyoB,EAAKzK,MAAQ0K,GAAUF,EAAMpX,EAAIqX,EAAK1K,IAAM2K,GAAUF,EAAMpX,EAAIqX,EAAKxK,OAASyK,CACrJ,CACA,SAASC,GAAS3E,EAAKyE,GACnBzE,EAAI0C,OACJ1C,EAAI4D,YACJ5D,EAAImE,KAAKM,EAAKvK,KAAMuK,EAAK1K,IAAK0K,EAAKzK,MAAQyK,EAAKvK,KAAMuK,EAAKxK,OAASwK,EAAK1K,KACzEiG,EAAIvD,MACR,CACA,SAASmI,GAAW5E,GAChBA,EAAI8C,SACR,CAGI,SAAS+B,GAAe7E,EAAK8E,EAAUhuB,EAAQiuB,EAAM1E,GACrD,IAAKyE,EAAU,CACX,OAAO9E,EAAIiE,OAAOntB,EAAOkF,EAAGlF,EAAOsW,EAC3C,CACI,GAAIiT,IAAS,SAAU,CACnB,MAAM2E,GAAYF,EAAS9oB,EAAIlF,EAAOkF,GAAK,EAC3CgkB,EAAIiE,OAAOe,EAAUF,EAAS1X,GAC9B4S,EAAIiE,OAAOe,EAAUluB,EAAOsW,EACpC,MAAW,GAAIiT,IAAS,YAAc0E,EAAM,CACpC/E,EAAIiE,OAAOa,EAAS9oB,EAAGlF,EAAOsW,EACtC,KAAW,CACH4S,EAAIiE,OAAOntB,EAAOkF,EAAG8oB,EAAS1X,EACtC,CACI4S,EAAIiE,OAAOntB,EAAOkF,EAAGlF,EAAOsW,EAChC,CAGI,SAAS6X,GAAejF,EAAK8E,EAAUhuB,EAAQiuB,GAC/C,IAAKD,EAAU,CACX,OAAO9E,EAAIiE,OAAOntB,EAAOkF,EAAGlF,EAAOsW,EAC3C,CACI4S,EAAIkF,cAAcH,EAAOD,EAASK,KAAOL,EAASM,KAAML,EAAOD,EAASO,KAAOP,EAASQ,KAAMP,EAAOjuB,EAAOsuB,KAAOtuB,EAAOquB,KAAMJ,EAAOjuB,EAAOwuB,KAAOxuB,EAAOuuB,KAAMvuB,EAAOkF,EAAGlF,EAAOsW,EACvL,CACA,SAASmY,GAAcvF,EAAKwF,GACxB,GAAIA,EAAKC,YAAa,CAClBzF,EAAI0D,UAAU8B,EAAKC,YAAY,GAAID,EAAKC,YAAY,GAC5D,CACI,IAAKtb,GAAcqb,EAAKjC,UAAW,CAC/BvD,EAAInkB,OAAO2pB,EAAKjC,SACxB,CACI,GAAIiC,EAAKtc,MAAO,CACZ8W,EAAI0F,UAAYF,EAAKtc,KAC7B,CACI,GAAIsc,EAAKG,UAAW,CAChB3F,EAAI2F,UAAYH,EAAKG,SAC7B,CACI,GAAIH,EAAKI,aAAc,CACnB5F,EAAI4F,aAAeJ,EAAKI,YAChC,CACA,CACA,SAASC,GAAa7F,EAAKhkB,EAAGoR,EAAG0Y,EAAMN,GACnC,GAAIA,EAAKO,eAAiBP,EAAKQ,UAAW,CAOtC,MAAMC,EAAUjG,EAAIkC,YAAY4D,GAChC,MAAM5L,EAAOle,EAAIiqB,EAAQC,sBACzB,MAAMlM,EAAQhe,EAAIiqB,EAAQE,uBAC1B,MAAMpM,EAAM3M,EAAI6Y,EAAQG,wBACxB,MAAMnM,EAAS7M,EAAI6Y,EAAQI,yBAC3B,MAAMC,EAAcd,EAAKO,eAAiBhM,EAAME,GAAU,EAAIA,EAC9D+F,EAAIuG,YAAcvG,EAAI0F,UACtB1F,EAAI4D,YACJ5D,EAAIpD,UAAY4I,EAAKgB,iBAAmB,EACxCxG,EAAIgE,OAAO9J,EAAMoM,GACjBtG,EAAIiE,OAAOjK,EAAOsM,GAClBtG,EAAIsE,QACZ,CACA,CACA,SAASmC,GAAazG,EAAKwF,GACvB,MAAMkB,EAAW1G,EAAI0F,UACrB1F,EAAI0F,UAAYF,EAAKtc,MACrB8W,EAAI2G,SAASnB,EAAKtL,KAAMsL,EAAKzL,IAAKyL,EAAKlI,MAAOkI,EAAK3C,QACnD7C,EAAI0F,UAAYgB,CACpB,CAGI,SAASE,GAAW5G,EAAKxC,EAAMxhB,EAAGoR,EAAGsS,EAAM8F,EAAO,IAClD,MAAMqB,EAAQ1rB,GAAQqiB,GAAQA,EAAO,CACjCA,GAEJ,MAAM8G,EAASkB,EAAKsB,YAAc,GAAKtB,EAAKuB,cAAgB,GAC5D,IAAIlsB,EAAGirB,EACP9F,EAAI0C,OACJ1C,EAAIN,KAAOA,EAAKsC,OAChBuD,GAAcvF,EAAKwF,GACnB,IAAI3qB,EAAI,EAAGA,EAAIgsB,EAAM/wB,SAAU+E,EAAE,CAC7BirB,EAAOe,EAAMhsB,GACb,GAAI2qB,EAAKwB,SAAU,CACfP,GAAazG,EAAKwF,EAAKwB,SACnC,CACQ,GAAI1C,EAAQ,CACR,GAAIkB,EAAKuB,YAAa,CAClB/G,EAAIuG,YAAcf,EAAKuB,WACvC,CACY,IAAK5c,GAAcqb,EAAKsB,aAAc,CAClC9G,EAAIpD,UAAY4I,EAAKsB,WACrC,CACY9G,EAAIiH,WAAWnB,EAAM9pB,EAAGoR,EAAGoY,EAAK0B,SAC5C,CACQlH,EAAImH,SAASrB,EAAM9pB,EAAGoR,EAAGoY,EAAK0B,UAC9BrB,GAAa7F,EAAKhkB,EAAGoR,EAAG0Y,EAAMN,GAC9BpY,GAAK3C,OAAOiV,EAAKG,WACzB,CACIG,EAAI8C,SACR,CAyBA,MAAMsE,GAAc,uCACpB,MAAMC,GAAa,wEAWf,SAASC,GAAa5wB,EAAOuX,GAC7B,MAAMsZ,GAAW,GAAK7wB,GAAO8wB,MAAMJ,IACnC,IAAKG,GAAWA,EAAQ,KAAO,SAAU,CACrC,OAAOtZ,EAAO,GACtB,CACIvX,GAAS6wB,EAAQ,GACjB,OAAOA,EAAQ,IACX,IAAK,KACD,OAAO7wB,EACX,IAAK,IACDA,GAAS,IACT,MAER,OAAOuX,EAAOvX,CAClB,CACA,MAAM+wB,GAAgBtvB,IAAKA,GAAK,EAChC,SAASuvB,GAAkBhxB,EAAOixB,GAC9B,MAAM1tB,EAAM,GACZ,MAAM2tB,EAAWrd,GAASod,GAC1B,MAAM/gB,EAAOghB,EAAW/gB,OAAOD,KAAK+gB,GAASA,EAC7C,MAAME,EAAOtd,GAAS7T,GAASkxB,EAAYE,GAAOjd,GAAenU,EAAMoxB,GAAOpxB,EAAMixB,EAAMG,KAAWA,GAAOpxB,EAAMoxB,GAAQ,IAAIpxB,EAC9H,IAAK,MAAMoxB,KAAQlhB,EAAK,CACpB3M,EAAI6tB,GAAQL,GAAaI,EAAKC,GACtC,CACI,OAAO7tB,CACX,CAQI,SAAS8tB,GAAOrxB,GAChB,OAAOgxB,GAAkBhxB,EAAO,CAC5BqjB,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,KAAM,KAEd,CAsBI,SAAS8N,GAAUtxB,GACnB,MAAMsS,EAAM+e,GAAOrxB,GACnBsS,EAAIsU,MAAQtU,EAAIkR,KAAOlR,EAAIgR,MAC3BhR,EAAI6Z,OAAS7Z,EAAI+Q,IAAM/Q,EAAIiR,OAC3B,OAAOjR,CACX,CAOI,SAASif,GAAOzb,EAAS0b,GACzB1b,EAAUA,GAAW,GACrB0b,EAAWA,GAAYvP,GAAS+G,KAChC,IAAIzR,EAAOpD,GAAe2B,EAAQyB,KAAMia,EAASja,MACjD,UAAWA,IAAS,SAAU,CAC1BA,EAAO/G,SAAS+G,EAAM,GAC9B,CACI,IAAI2R,EAAQ/U,GAAe2B,EAAQoT,MAAOsI,EAAStI,OACnD,GAAIA,KAAW,GAAKA,GAAO4H,MAAMH,IAAa,CAC1Cc,QAAQC,KAAK,kCAAoCxI,EAAQ,KACzDA,EAAQxrB,SAChB,CACI,MAAMsrB,EAAO,CACTC,OAAQ9U,GAAe2B,EAAQmT,OAAQuI,EAASvI,QAChDE,WAAYyH,GAAazc,GAAe2B,EAAQqT,WAAYqI,EAASrI,YAAa5R,GAClFA,OACA2R,QACAzW,OAAQ0B,GAAe2B,EAAQrD,OAAQ+e,EAAS/e,QAChD6Y,OAAQ,IAEZtC,EAAKsC,OAASL,GAAajC,GAC3B,OAAOA,CACX,CAWI,SAAS2I,GAAQC,EAAQjJ,EAASpT,EAAOsc,GACzC,IAAIC,EAAY,KAChB,IAAI3tB,EAAGgR,EAAMnV,EACb,IAAImE,EAAI,EAAGgR,EAAOyc,EAAOxyB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3CnE,EAAQ4xB,EAAOztB,GACf,GAAInE,IAAUtC,UAAW,CACrB,QACZ,CACQ,GAAIirB,IAAYjrB,kBAAoBsC,IAAU,WAAY,CACtDA,EAAQA,EAAM2oB,GACdmJ,EAAY,KACxB,CACQ,GAAIvc,IAAU7X,WAAa+G,GAAQzE,GAAQ,CACvCA,EAAQA,EAAMuV,EAAQvV,EAAMZ,QAC5B0yB,EAAY,KACxB,CACQ,GAAI9xB,IAAUtC,UAAW,CACrB,GAAIm0B,IAASC,EAAW,CACpBD,EAAKC,UAAY,KACjC,CACY,OAAO9xB,CACnB,CACA,CACA,CAMI,SAAS+xB,GAAUC,EAAQhM,EAAOH,GAClC,MAAM/jB,IAAEA,EAAGD,IAAGA,GAASmwB,EACvB,MAAMC,EAAS7d,GAAY4R,GAAQnkB,EAAMC,GAAO,GAChD,MAAMowB,EAAW,CAAClyB,EAAOmyB,IAAMtM,GAAe7lB,IAAU,EAAI,EAAIA,EAAQmyB,EACxE,MAAO,CACHrwB,IAAKowB,EAASpwB,GAAMF,KAAK2W,IAAI0Z,IAC7BpwB,IAAKqwB,EAASrwB,EAAKowB,GAE3B,CACA,SAASG,GAAcC,EAAe1J,GAClC,OAAOxY,OAAOyB,OAAOzB,OAAOsF,OAAO4c,GAAgB1J,EACvD,CAWI,SAAS2J,GAAgBC,EAAQC,EAAW,CAC5C,IACDC,EAAYjB,EAAUkB,EAAY,KAAIH,EAAO,KAC5C,MAAMI,EAAkBF,GAAcF,EACtC,UAAWf,IAAa,YAAa,CACjCA,EAAWoB,GAAS,YAAaL,EACzC,CACI,MAAMM,EAAQ,CACV,CAACC,OAAOC,aAAc,SACtBC,WAAY,KACZC,QAASV,EACTW,YAAaP,EACbpQ,UAAWiP,EACX2B,WAAYT,EACZnI,SAAWpC,GAAQmK,GAAgB,CAC3BnK,KACGoK,GACJC,EAAUG,EAAiBnB,IAEtC,OAAO,IAAI4B,MAAMP,EAAO,CAGpB,cAAAQ,CAAgBjzB,EAAQgxB,UACbhxB,EAAOgxB,UACPhxB,EAAOkzB,aACPf,EAAO,GAAGnB,GACjB,OAAO,IACnB,EAGQ,GAAAnN,CAAK7jB,EAAQgxB,GACT,OAAOmC,GAAQnzB,EAAQgxB,GAAM,IAAIoC,GAAqBpC,EAAMoB,EAAUD,EAAQnyB,IAC1F,EAIQ,wBAAAqzB,CAA0BrzB,EAAQgxB,GAC9B,OAAOsC,QAAQD,yBAAyBrzB,EAAO6yB,QAAQ,GAAI7B,EACvE,EAGQ,cAAAuC,GACI,OAAOD,QAAQC,eAAepB,EAAO,GACjD,EAGQ,GAAA/a,CAAKpX,EAAQgxB,GACT,OAAOwC,GAAqBxzB,GAAQolB,SAAS4L,EACzD,EAGQ,OAAAyC,CAASzzB,GACL,OAAOwzB,GAAqBxzB,EACxC,EAGQ,GAAA8hB,CAAK9hB,EAAQgxB,EAAMpxB,GACf,MAAM8zB,EAAU1zB,EAAO2zB,WAAa3zB,EAAO2zB,SAAWrB,KACtDtyB,EAAOgxB,GAAQ0C,EAAQ1C,GAAQpxB,SACxBI,EAAOkzB,MACd,OAAO,IACnB,GAEA,CAQI,SAASU,GAAeC,EAAOtL,EAASuL,EAAUC,GAClD,MAAMtB,EAAQ,CACVG,WAAY,MACZoB,OAAQH,EACRI,SAAU1L,EACV2L,UAAWJ,EACXK,OAAQ,IAAIC,IACZnM,aAAcA,GAAa4L,EAAOE,GAClCM,WAAanL,GAAM0K,GAAeC,EAAO3K,EAAK4K,EAAUC,GACxD5J,SAAWpC,GAAQ6L,GAAeC,EAAM1J,SAASpC,GAAQQ,EAASuL,EAAUC,IAEhF,OAAO,IAAIf,MAAMP,EAAO,CAGpB,cAAAQ,CAAgBjzB,EAAQgxB,UACbhxB,EAAOgxB,UACP6C,EAAM7C,GACb,OAAO,IACnB,EAGQ,GAAAnN,CAAK7jB,EAAQgxB,EAAMsD,GACf,OAAOnB,GAAQnzB,EAAQgxB,GAAM,IAAIuD,GAAoBv0B,EAAQgxB,EAAMsD,IAC/E,EAIQ,wBAAAjB,CAA0BrzB,EAAQgxB,GAC9B,OAAOhxB,EAAOioB,aAAauM,QAAUlB,QAAQlc,IAAIyc,EAAO7C,GAAQ,CAC5D5U,WAAY,KACZD,aAAc,MACd7e,UAAYg2B,QAAQD,yBAAyBQ,EAAO7C,EACpE,EAGQ,cAAAuC,GACI,OAAOD,QAAQC,eAAeM,EAC1C,EAGQ,GAAAzc,CAAKpX,EAAQgxB,GACT,OAAOsC,QAAQlc,IAAIyc,EAAO7C,EACtC,EAGQ,OAAAyC,GACI,OAAOH,QAAQG,QAAQI,EACnC,EAGQ,GAAA/R,CAAK9hB,EAAQgxB,EAAMpxB,GACfi0B,EAAM7C,GAAQpxB,SACPI,EAAOgxB,GACd,OAAO,IACnB,GAEA,CAGI,SAAS/I,GAAa4L,EAAOhS,EAAW,CACxC4S,WAAY,KACZC,UAAW,OAEX,MAAMrS,YAAEA,EAAaR,EAAS4S,WAAUrS,WAAGA,EAAYP,EAAS6S,UAASC,SAAGA,EAAU9S,EAAS2S,SAAaX,EAC5G,MAAO,CACHW,QAASG,EACTF,WAAYpS,EACZqS,UAAWtS,EACXwS,aAAc3d,GAAWoL,GAAeA,EAAc,IAAIA,EAC1DwS,YAAa5d,GAAWmL,GAAcA,EAAa,IAAIA,EAE/D,CACA,MAAM0S,GAAU,CAACC,EAAQ50B,IAAO40B,EAASA,EAASje,GAAY3W,GAAQA,EACtE,MAAM60B,GAAmB,CAAChE,EAAMpxB,IAAQ6T,GAAS7T,IAAUoxB,IAAS,aAAejhB,OAAOwjB,eAAe3zB,KAAW,MAAQA,EAAMkS,cAAgB/B,QAClJ,SAASojB,GAAQnzB,EAAQgxB,EAAMO,GAC3B,GAAIxhB,OAAOuD,UAAU6C,eAAe3C,KAAKxT,EAAQgxB,IAASA,IAAS,cAAe,CAC9E,OAAOhxB,EAAOgxB,EACtB,CACI,MAAMpxB,EAAQ2xB,IAEdvxB,EAAOgxB,GAAQpxB,EACf,OAAOA,CACX,CACA,SAAS20B,GAAoBv0B,EAAQgxB,EAAMsD,GACvC,MAAMN,OAAEA,EAAMC,SAAGA,EAAQC,UAAGA,EAAYjM,aAAcN,GAAiB3nB,EACvE,IAAIJ,EAAQo0B,EAAOhD,GAEnB,GAAI/Z,GAAWrX,IAAU+nB,EAAYiN,aAAa5D,GAAO,CACrDpxB,EAAQq1B,GAAmBjE,EAAMpxB,EAAOI,EAAQs0B,EACxD,CACI,GAAIjwB,GAAQzE,IAAUA,EAAMZ,OAAQ,CAChCY,EAAQs1B,GAAclE,EAAMpxB,EAAOI,EAAQ2nB,EAAYkN,YAC/D,CACI,GAAIG,GAAiBhE,EAAMpxB,GAAQ,CAE/BA,EAAQg0B,GAAeh0B,EAAOq0B,EAAUC,GAAaA,EAAUlD,GAAOrJ,EAC9E,CACI,OAAO/nB,CACX,CACA,SAASq1B,GAAmBjE,EAAMmE,EAAUn1B,EAAQs0B,GAChD,MAAMN,OAAEA,EAAMC,SAAGA,EAAQC,UAAGA,EAASC,OAAGA,GAAYn0B,EACpD,GAAIm0B,EAAO/c,IAAI4Z,GAAO,CAClB,MAAM,IAAI1yB,MAAM,uBAAyB8F,MAAM0M,KAAKqjB,GAAQiB,KAAK,MAAQ,KAAOpE,EACxF,CACImD,EAAOpC,IAAIf,GACX,IAAIpxB,EAAQu1B,EAASlB,EAAUC,GAAaI,GAC5CH,EAAOkB,OAAOrE,GACd,GAAIgE,GAAiBhE,EAAMpxB,GAAQ,CAE/BA,EAAQ01B,GAAkBtB,EAAOnB,QAASmB,EAAQhD,EAAMpxB,EAChE,CACI,OAAOA,CACX,CACA,SAASs1B,GAAclE,EAAMpxB,EAAOI,EAAQ60B,GACxC,MAAMb,OAAEA,EAAMC,SAAGA,EAAQC,UAAGA,EAAYjM,aAAcN,GAAiB3nB,EACvE,UAAWi0B,EAAS9e,QAAU,aAAe0f,EAAY7D,GAAO,CAC5D,OAAOpxB,EAAMq0B,EAAS9e,MAAQvV,EAAMZ,OAC5C,MAAW,GAAIyU,GAAS7T,EAAM,IAAK,CAE3B,MAAM21B,EAAM31B,EACZ,MAAMuyB,EAAS6B,EAAOnB,QAAQvyB,QAAQkD,GAAIA,IAAM+xB,IAChD31B,EAAQ,GACR,IAAK,MAAM9B,KAAQy3B,EAAI,CACnB,MAAM1e,EAAWye,GAAkBnD,EAAQ6B,EAAQhD,EAAMlzB,GACzD8B,EAAMoB,KAAK4yB,GAAe/c,EAAUod,EAAUC,GAAaA,EAAUlD,GAAOrJ,GACxF,CACA,CACI,OAAO/nB,CACX,CACA,SAAS41B,GAAgBpE,EAAUJ,EAAMpxB,GACrC,OAAOqX,GAAWma,GAAYA,EAASJ,EAAMpxB,GAASwxB,CAC1D,CACA,MAAMqE,GAAW,CAACh2B,EAAKi2B,IAASj2B,IAAQ,KAAOi2B,SAAgBj2B,IAAQ,SAAWmX,GAAiB8e,EAAQj2B,GAAOnC,UAClH,SAASq4B,GAAU7T,EAAK8T,EAAcn2B,EAAKo2B,EAAgBj2B,GACvD,IAAK,MAAM81B,KAAUE,EAAa,CAC9B,MAAM7N,EAAQ0N,GAASh2B,EAAKi2B,GAC5B,GAAI3N,EAAO,CACPjG,EAAIiQ,IAAIhK,GACR,MAAMqJ,EAAWoE,GAAgBzN,EAAM5F,UAAW1iB,EAAKG,GACvD,UAAWwxB,IAAa,aAAeA,IAAa3xB,GAAO2xB,IAAayE,EAAgB,CAGpF,OAAOzE,CACvB,CACA,MAAe,GAAIrJ,IAAU,cAAgB8N,IAAmB,aAAep2B,IAAQo2B,EAAgB,CAG3F,OAAO,IACnB,CACA,CACI,OAAO,KACX,CACA,SAASP,GAAkBM,EAAc/e,EAAUma,EAAMpxB,GACrD,MAAMyyB,EAAaxb,EAASic,YAC5B,MAAM1B,EAAWoE,GAAgB3e,EAASsL,UAAW6O,EAAMpxB,GAC3D,MAAMk2B,EAAY,IACXF,KACAvD,GAEP,MAAMvQ,EAAM,IAAIsS,IAChBtS,EAAIiQ,IAAInyB,GACR,IAAIH,EAAMs2B,GAAiBjU,EAAKgU,EAAW9E,EAAMI,GAAYJ,EAAMpxB,GACnE,GAAIH,IAAQ,KAAM,CACd,OAAO,KACf,CACI,UAAW2xB,IAAa,aAAeA,IAAaJ,EAAM,CACtDvxB,EAAMs2B,GAAiBjU,EAAKgU,EAAW1E,EAAU3xB,EAAKG,GACtD,GAAIH,IAAQ,KAAM,CACd,OAAO,KACnB,CACA,CACI,OAAOyyB,GAAgB9tB,MAAM0M,KAAKgR,GAAM,CACpC,IACDuQ,EAAYjB,GAAU,IAAI4E,GAAanf,EAAUma,EAAMpxB,IAC9D,CACA,SAASm2B,GAAiBjU,EAAKgU,EAAWr2B,EAAK2xB,EAAUtzB,GACrD,MAAM2B,EAAI,CACNA,EAAMk2B,GAAU7T,EAAKgU,EAAWr2B,EAAK2xB,EAAUtzB,EACvD,CACI,OAAO2B,CACX,CACA,SAASu2B,GAAanf,EAAUma,EAAMpxB,GAClC,MAAM81B,EAAS7e,EAASkc,aACxB,KAAM/B,KAAQ0E,GAAS,CACnBA,EAAO1E,GAAQ,EACvB,CACI,MAAMhxB,EAAS01B,EAAO1E,GACtB,GAAI3sB,GAAQrE,IAAWyT,GAAS7T,GAAQ,CAEpC,OAAOA,CACf,CACI,OAAOI,GAAU,EACrB,CACA,SAASozB,GAAqBpC,EAAMoB,EAAUD,EAAQ0B,GAClD,IAAIj0B,EACJ,IAAK,MAAMm1B,KAAU3C,EAAS,CAC1BxyB,EAAQ4yB,GAASsC,GAAQC,EAAQ/D,GAAOmB,GACxC,UAAWvyB,IAAU,YAAa,CAC9B,OAAOo1B,GAAiBhE,EAAMpxB,GAAS01B,GAAkBnD,EAAQ0B,EAAO7C,EAAMpxB,GAASA,CACnG,CACA,CACA,CACA,SAAS4yB,GAAS/yB,EAAK0yB,GACnB,IAAK,MAAMpK,KAASoK,EAAO,CACvB,IAAKpK,EAAO,CACR,QACZ,CACQ,MAAMnoB,EAAQmoB,EAAMtoB,GACpB,UAAWG,IAAU,YAAa,CAC9B,OAAOA,CACnB,CACA,CACA,CACA,SAAS4zB,GAAqBxzB,GAC1B,IAAI8P,EAAO9P,EAAOkzB,MAClB,IAAKpjB,EAAM,CACPA,EAAO9P,EAAOkzB,MAAQ+C,GAAyBj2B,EAAO6yB,QAC9D,CACI,OAAO/iB,CACX,CACA,SAASmmB,GAAyB9D,GAC9B,MAAMrQ,EAAM,IAAIsS,IAChB,IAAK,MAAMrM,KAASoK,EAAO,CACvB,IAAK,MAAM1yB,KAAOsQ,OAAOD,KAAKiY,GAAOznB,QAAQoD,IAAKA,EAAE+jB,WAAW,OAAM,CACjE3F,EAAIiQ,IAAItyB,EACpB,CACA,CACI,OAAO2E,MAAM0M,KAAKgR,EACtB,CAgBA,MAAMoU,GAAUviB,OAAOuiB,SAAW,MAClC,MAAMC,GAAW,CAACtY,EAAQ9Z,IAAIA,EAAI8Z,EAAO7e,SAAW6e,EAAO9Z,GAAGqyB,MAAQvY,EAAO9Z,GAC7E,MAAMsyB,GAAgBhN,GAAYA,IAAc,IAAM,IAAM,IAC5D,SAASiN,GAAYC,EAAYC,EAAaC,EAAYvlB,GAItD,MAAM8c,EAAWuI,EAAWH,KAAOI,EAAcD,EACjD,MAAMvgB,EAAUwgB,EAChB,MAAME,EAAOD,EAAWL,KAAOI,EAAcC,EAC7C,MAAME,EAAMxc,GAAsBnE,EAASgY,GAC3C,MAAM4I,EAAMzc,GAAsBuc,EAAM1gB,GACxC,IAAI6gB,EAAMF,GAAOA,EAAMC,GACvB,IAAIE,EAAMF,GAAOD,EAAMC,GAEvBC,EAAM9d,MAAM8d,GAAO,EAAIA,EACvBC,EAAM/d,MAAM+d,GAAO,EAAIA,EACvB,MAAMC,EAAK7lB,EAAI2lB,EACf,MAAMG,EAAK9lB,EAAI4lB,EACf,MAAO,CACH9I,SAAU,CACN9oB,EAAG8Q,EAAQ9Q,EAAI6xB,GAAML,EAAKxxB,EAAI8oB,EAAS9oB,GACvCoR,EAAGN,EAAQM,EAAIygB,GAAML,EAAKpgB,EAAI0X,EAAS1X,IAE3CogB,KAAM,CACFxxB,EAAG8Q,EAAQ9Q,EAAI8xB,GAAMN,EAAKxxB,EAAI8oB,EAAS9oB,GACvCoR,EAAGN,EAAQM,EAAI0gB,GAAMN,EAAKpgB,EAAI0X,EAAS1X,IAGnD,CAGI,SAAS2gB,GAAepZ,EAAQqZ,EAAQC,GACxC,MAAMC,EAAYvZ,EAAO7e,OACzB,IAAIq4B,EAAQC,EAAOC,EAAMC,EAAkBC,EAC3C,IAAIC,EAAavB,GAAStY,EAAQ,GAClC,IAAI,IAAI9Z,EAAI,EAAGA,EAAIqzB,EAAY,IAAKrzB,EAAE,CAClC0zB,EAAeC,EACfA,EAAavB,GAAStY,EAAQ9Z,EAAI,GAClC,IAAK0zB,IAAiBC,EAAY,CAC9B,QACZ,CACQ,GAAIzf,GAAaif,EAAOnzB,GAAI,EAAGmyB,IAAU,CACrCiB,EAAGpzB,GAAKozB,EAAGpzB,EAAI,GAAK,EACpB,QACZ,CACQszB,EAASF,EAAGpzB,GAAKmzB,EAAOnzB,GACxBuzB,EAAQH,EAAGpzB,EAAI,GAAKmzB,EAAOnzB,GAC3ByzB,EAAmBh2B,KAAKqP,IAAIwmB,EAAQ,GAAK71B,KAAKqP,IAAIymB,EAAO,GACzD,GAAIE,GAAoB,EAAG,CACvB,QACZ,CACQD,EAAO,EAAI/1B,KAAKoX,KAAK4e,GACrBL,EAAGpzB,GAAKszB,EAASE,EAAOL,EAAOnzB,GAC/BozB,EAAGpzB,EAAI,GAAKuzB,EAAQC,EAAOL,EAAOnzB,EAC1C,CACA,CACA,SAAS4zB,GAAgB9Z,EAAQsZ,EAAI9N,EAAY,KAC7C,MAAMuO,EAAYvB,GAAahN,GAC/B,MAAM+N,EAAYvZ,EAAO7e,OACzB,IAAI0lB,EAAOmT,EAAaJ,EACxB,IAAIC,EAAavB,GAAStY,EAAQ,GAClC,IAAI,IAAI9Z,EAAI,EAAGA,EAAIqzB,IAAarzB,EAAE,CAC9B8zB,EAAcJ,EACdA,EAAeC,EACfA,EAAavB,GAAStY,EAAQ9Z,EAAI,GAClC,IAAK0zB,EAAc,CACf,QACZ,CACQ,MAAMK,EAASL,EAAapO,GAC5B,MAAM0O,EAASN,EAAaG,GAC5B,GAAIC,EAAa,CACbnT,GAASoT,EAASD,EAAYxO,IAAc,EAC5CoO,EAAa,MAAMpO,KAAeyO,EAASpT,EAC3C+S,EAAa,MAAMG,KAAeG,EAASrT,EAAQyS,EAAGpzB,EAClE,CACQ,GAAI2zB,EAAY,CACZhT,GAASgT,EAAWrO,GAAayO,GAAU,EAC3CL,EAAa,MAAMpO,KAAeyO,EAASpT,EAC3C+S,EAAa,MAAMG,KAAeG,EAASrT,EAAQyS,EAAGpzB,EAClE,CACA,CACA,CAMI,SAASi0B,GAAoBna,EAAQwL,EAAY,KACjD,MAAMuO,EAAYvB,GAAahN,GAC/B,MAAM+N,EAAYvZ,EAAO7e,OACzB,MAAMk4B,EAAS9yB,MAAMgzB,GAAW9J,KAAK,GACrC,MAAM6J,EAAK/yB,MAAMgzB,GAEjB,IAAIrzB,EAAG8zB,EAAaJ,EACpB,IAAIC,EAAavB,GAAStY,EAAQ,GAClC,IAAI9Z,EAAI,EAAGA,EAAIqzB,IAAarzB,EAAE,CAC1B8zB,EAAcJ,EACdA,EAAeC,EACfA,EAAavB,GAAStY,EAAQ9Z,EAAI,GAClC,IAAK0zB,EAAc,CACf,QACZ,CACQ,GAAIC,EAAY,CACZ,MAAMO,EAAaP,EAAWrO,GAAaoO,EAAapO,GAExD6N,EAAOnzB,GAAKk0B,IAAe,GAAKP,EAAWE,GAAaH,EAAaG,IAAcK,EAAa,CAC5G,CACQd,EAAGpzB,IAAM8zB,EAAcX,EAAOnzB,IAAM2zB,EAAaR,EAAOnzB,EAAI,GAAKiU,GAAKkf,EAAOnzB,EAAI,MAAQiU,GAAKkf,EAAOnzB,IAAM,GAAKmzB,EAAOnzB,EAAI,GAAKmzB,EAAOnzB,IAAM,CACrJ,CACIkzB,GAAepZ,EAAQqZ,EAAQC,GAC/BQ,GAAgB9Z,EAAQsZ,EAAI9N,EAChC,CACA,SAAS6O,GAAgBC,EAAIz2B,EAAKD,GAC9B,OAAOD,KAAKC,IAAID,KAAKE,IAAIy2B,EAAI12B,GAAMC,EACvC,CACA,SAAS02B,GAAgBva,EAAQ8P,GAC7B,IAAI5pB,EAAGgR,EAAM2Y,EAAO2K,EAAQC,EAC5B,IAAIC,EAAa9K,GAAe5P,EAAO,GAAI8P,GAC3C,IAAI5pB,EAAI,EAAGgR,EAAO8I,EAAO7e,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3Cu0B,EAAaD,EACbA,EAASE,EACTA,EAAax0B,EAAIgR,EAAO,GAAK0Y,GAAe5P,EAAO9Z,EAAI,GAAI4pB,GAC3D,IAAK0K,EAAQ,CACT,QACZ,CACQ3K,EAAQ7P,EAAO9Z,GACf,GAAIu0B,EAAY,CACZ5K,EAAMW,KAAO6J,GAAgBxK,EAAMW,KAAMV,EAAKvK,KAAMuK,EAAKzK,OACzDwK,EAAMa,KAAO2J,GAAgBxK,EAAMa,KAAMZ,EAAK1K,IAAK0K,EAAKxK,OACpE,CACQ,GAAIoV,EAAY,CACZ7K,EAAMY,KAAO4J,GAAgBxK,EAAMY,KAAMX,EAAKvK,KAAMuK,EAAKzK,OACzDwK,EAAMc,KAAO0J,GAAgBxK,EAAMc,KAAMb,EAAK1K,IAAK0K,EAAKxK,OACpE,CACA,CACA,CAGI,SAASqV,GAA2B3a,EAAQnI,EAASiY,EAAM1L,EAAMoH,GACjE,IAAItlB,EAAGgR,EAAM2Y,EAAO+K,EAEpB,GAAI/iB,EAAQgjB,SAAU,CAClB7a,EAASA,EAAOvd,QAAQ63B,IAAMA,EAAG/B,MACzC,CACI,GAAI1gB,EAAQijB,yBAA2B,WAAY,CAC/CX,GAAoBna,EAAQwL,EACpC,KAAW,CACH,IAAIuP,EAAO3W,EAAOpE,EAAOA,EAAO7e,OAAS,GAAK6e,EAAO,GACrD,IAAI9Z,EAAI,EAAGgR,EAAO8I,EAAO7e,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3C2pB,EAAQ7P,EAAO9Z,GACf00B,EAAgBnC,GAAYsC,EAAMlL,EAAO7P,EAAOrc,KAAKE,IAAIqC,EAAI,EAAGgR,GAAQkN,EAAO,EAAI,IAAMlN,GAAOW,EAAQmjB,SACxGnL,EAAMW,KAAOoK,EAAczK,SAAS9oB,EACpCwoB,EAAMa,KAAOkK,EAAczK,SAAS1X,EACpCoX,EAAMY,KAAOmK,EAAc/B,KAAKxxB,EAChCwoB,EAAMc,KAAOiK,EAAc/B,KAAKpgB,EAChCsiB,EAAOlL,CACnB,CACA,CACI,GAAIhY,EAAQ0iB,gBAAiB,CACzBA,GAAgBva,EAAQ8P,EAChC,CACA,CAUI,SAASmL,KACT,cAAchc,SAAW,oBAAsBic,WAAa,WAChE,CAGI,SAASC,GAAeC,GACxB,IAAIvD,EAASuD,EAAQC,WACrB,GAAIxD,GAAUA,EAAOniB,aAAe,sBAAuB,CACvDmiB,EAASA,EAAOyD,IACxB,CACI,OAAOzD,CACX,CAII,SAAS0D,GAAcC,EAAYxR,EAAMyR,GACzC,IAAIC,EACJ,UAAWF,IAAe,SAAU,CAChCE,EAAgBnpB,SAASipB,EAAY,IACrC,GAAIA,EAAW7jB,QAAQ,QAAU,EAAG,CAEhC+jB,EAAgBA,EAAgB,IAAM1R,EAAKqR,WAAWI,EAClE,CACA,KAAW,CACHC,EAAgBF,CACxB,CACI,OAAOE,CACX,CACA,MAAMC,GAAoBC,GAAUA,EAAQC,cAAcC,YAAYH,iBAAiBC,EAAS,MAChG,SAASG,GAASC,EAAIzgB,GAClB,OAAOogB,GAAiBK,GAAIC,iBAAiB1gB,EACjD,CACA,MAAM2gB,GAAY,CACd,MACA,QACA,SACA,QAEJ,SAASC,GAAmBC,EAAQnR,EAAOoR,GACvC,MAAMvhB,EAAS,GACfuhB,EAASA,EAAS,IAAMA,EAAS,GACjC,IAAI,IAAIn2B,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,MAAMo2B,EAAMJ,GAAUh2B,GACtB4U,EAAOwhB,GAAOhmB,WAAW8lB,EAAOnR,EAAQ,IAAMqR,EAAMD,KAAY,CACxE,CACIvhB,EAAO6N,MAAQ7N,EAAOyK,KAAOzK,EAAOuK,MACpCvK,EAAOoT,OAASpT,EAAOsK,IAAMtK,EAAOwK,OACpC,OAAOxK,CACX,CACA,MAAMyhB,GAAe,CAACl1B,EAAGoR,EAAGtW,KAAUkF,EAAI,GAAKoR,EAAI,MAAQtW,IAAWA,EAAOq6B,YAKzE,SAASC,GAAkBv6B,EAAG2rB,GAC9B,MAAM6O,EAAUx6B,EAAEw6B,QAClB,MAAMnlB,EAASmlB,GAAWA,EAAQv7B,OAASu7B,EAAQ,GAAKx6B,EACxD,MAAMy6B,QAAEA,EAAOC,QAAGA,GAAarlB,EAC/B,IAAIslB,EAAM,MACV,IAAIx1B,EAAGoR,EACP,GAAI8jB,GAAaI,EAASC,EAAS16B,EAAEC,QAAS,CAC1CkF,EAAIs1B,EACJlkB,EAAImkB,CACZ,KAAW,CACH,MAAMpN,EAAO3B,EAAOiP,wBACpBz1B,EAAIkQ,EAAOwlB,QAAUvN,EAAKjK,KAC1B9M,EAAIlB,EAAOylB,QAAUxN,EAAKpK,IAC1ByX,EAAM,IACd,CACI,MAAO,CACHx1B,IACAoR,IACAokB,MAER,CAMI,SAASI,GAAoBC,EAAOvW,GACpC,GAAI,WAAYuW,EAAO,CACnB,OAAOA,CACf,CACI,MAAMrP,OAAEA,EAAMH,wBAAGA,GAA6B/G,EAC9C,MAAMsE,EAAQ0Q,GAAiB9N,GAC/B,MAAMsP,EAAYlS,EAAMmS,YAAc,aACtC,MAAMC,EAAWlB,GAAmBlR,EAAO,WAC3C,MAAMqS,EAAUnB,GAAmBlR,EAAO,SAAU,SACpD,MAAM5jB,EAAEA,EAACoR,EAAGA,EAACokB,IAAGA,GAASJ,GAAkBS,EAAOrP,GAClD,MAAMS,EAAU+O,EAAS9X,MAAQsX,GAAOS,EAAQ/X,MAChD,MAAMgJ,EAAU8O,EAASjY,KAAOyX,GAAOS,EAAQlY,KAC/C,IAAIuD,MAAEA,EAAKuF,OAAGA,GAAYvH,EAC1B,GAAIwW,EAAW,CACXxU,GAAS0U,EAAS1U,MAAQ2U,EAAQ3U,MAClCuF,GAAUmP,EAASnP,OAASoP,EAAQpP,MAC5C,CACI,MAAO,CACH7mB,EAAG1D,KAAKJ,OAAO8D,EAAIinB,GAAW3F,EAAQkF,EAAOlF,MAAQ+E,GACrDjV,EAAG9U,KAAKJ,OAAOkV,EAAI8V,GAAWL,EAASL,EAAOK,OAASR,GAE/D,CACA,SAAS6P,GAAiB1P,EAAQlF,EAAOuF,GACrC,IAAIqE,EAAUiL,EACd,GAAI7U,IAAUlpB,WAAayuB,IAAWzuB,UAAW,CAC7C,MAAMg+B,EAAY5P,GAAUsN,GAAetN,GAC3C,IAAK4P,EAAW,CACZ9U,EAAQkF,EAAO6P,YACfxP,EAASL,EAAO8P,YAC5B,KAAe,CACH,MAAMnO,EAAOiO,EAAUX,wBACvB,MAAMc,EAAiBjC,GAAiB8B,GACxC,MAAMI,EAAkB1B,GAAmByB,EAAgB,SAAU,SACrE,MAAME,EAAmB3B,GAAmByB,EAAgB,WAC5DjV,EAAQ6G,EAAK7G,MAAQmV,EAAiBnV,MAAQkV,EAAgBlV,MAC9DuF,EAASsB,EAAKtB,OAAS4P,EAAiB5P,OAAS2P,EAAgB3P,OACjEqE,EAAWgJ,GAAcqC,EAAerL,SAAUkL,EAAW,eAC7DD,EAAYjC,GAAcqC,EAAeJ,UAAWC,EAAW,eAC3E,CACA,CACI,MAAO,CACH9U,QACAuF,SACAqE,SAAUA,GAAY3Y,GACtB4jB,UAAWA,GAAa5jB,GAEhC,CACA,MAAMmkB,GAAUv6B,GAAIG,KAAKJ,MAAMC,EAAI,IAAM,GAEzC,SAASw6B,GAAenQ,EAAQoQ,EAASC,EAAUC,GAC/C,MAAMlT,EAAQ0Q,GAAiB9N,GAC/B,MAAMuQ,EAAUjC,GAAmBlR,EAAO,UAC1C,MAAMsH,EAAWgJ,GAActQ,EAAMsH,SAAU1E,EAAQ,gBAAkBjU,GACzE,MAAM4jB,EAAYjC,GAActQ,EAAMuS,UAAW3P,EAAQ,iBAAmBjU,GAC5E,MAAMykB,EAAgBd,GAAiB1P,EAAQoQ,EAASC,GACxD,IAAIvV,MAAEA,EAAKuF,OAAGA,GAAYmQ,EAC1B,GAAIpT,EAAMmS,YAAc,cAAe,CACnC,MAAME,EAAUnB,GAAmBlR,EAAO,SAAU,SACpD,MAAMoS,EAAWlB,GAAmBlR,EAAO,WAC3CtC,GAAS0U,EAAS1U,MAAQ2U,EAAQ3U,MAClCuF,GAAUmP,EAASnP,OAASoP,EAAQpP,MAC5C,CACIvF,EAAQhlB,KAAKC,IAAI,EAAG+kB,EAAQyV,EAAQzV,OACpCuF,EAASvqB,KAAKC,IAAI,EAAGu6B,EAAcxV,EAAQwV,EAAcjQ,EAASkQ,EAAQlQ,QAC1EvF,EAAQoV,GAAOp6B,KAAKE,IAAI8kB,EAAO4J,EAAU8L,EAAc9L,WACvDrE,EAAS6P,GAAOp6B,KAAKE,IAAIqqB,EAAQsP,EAAWa,EAAcb,YAC1D,GAAI7U,IAAUuF,EAAQ,CAGlBA,EAAS6P,GAAOpV,EAAQ,EAChC,CACI,MAAM2V,EAAiBL,IAAYx+B,WAAay+B,IAAaz+B,UAC7D,GAAI6+B,GAAkBH,GAAeE,EAAcnQ,QAAUA,EAASmQ,EAAcnQ,OAAQ,CACxFA,EAASmQ,EAAcnQ,OACvBvF,EAAQoV,GAAOp6B,KAAK+W,MAAMwT,EAASiQ,GAC3C,CACI,MAAO,CACHxV,QACAuF,SAER,CAMI,SAASqQ,GAAY5X,EAAO6X,EAAYC,GACxC,MAAMC,EAAaF,GAAc,EACjC,MAAMG,EAAeh7B,KAAK+W,MAAMiM,EAAMuH,OAASwQ,GAC/C,MAAME,EAAcj7B,KAAK+W,MAAMiM,EAAMgC,MAAQ+V,GAC7C/X,EAAMuH,OAASvqB,KAAK+W,MAAMiM,EAAMuH,QAChCvH,EAAMgC,MAAQhlB,KAAK+W,MAAMiM,EAAMgC,OAC/B,MAAMkF,EAASlH,EAAMkH,OAIrB,GAAIA,EAAO5C,QAAUwT,IAAe5Q,EAAO5C,MAAMiD,SAAWL,EAAO5C,MAAMtC,OAAQ,CAC7EkF,EAAO5C,MAAMiD,OAAS,GAAGvH,EAAMuH,WAC/BL,EAAO5C,MAAMtC,MAAQ,GAAGhC,EAAMgC,SACtC,CACI,GAAIhC,EAAM+G,0BAA4BgR,GAAc7Q,EAAOK,SAAWyQ,GAAgB9Q,EAAOlF,QAAUiW,EAAa,CAChHjY,EAAM+G,wBAA0BgR,EAChC7Q,EAAOK,OAASyQ,EAChB9Q,EAAOlF,MAAQiW,EACfjY,EAAM0E,IAAIwT,aAAaH,EAAY,EAAG,EAAGA,EAAY,EAAG,GACxD,OAAO,IACf,CACI,OAAO,KACX,CAKI,MAAMI,GAA+B,WACrC,IAAIC,EAAmB,MACvB,IACI,MAAMlnB,EAAU,CACZ,WAAImnB,GACAD,EAAmB,KACnB,OAAO,KACvB,GAEQ,GAAI9D,KAAmB,CACnBhc,OAAOggB,iBAAiB,OAAQ,KAAMpnB,GACtCoH,OAAOigB,oBAAoB,OAAQ,KAAMrnB,EACrD,CACA,CAAM,MAAO3V,GAEb,CACI,OAAO68B,CACX,CAjByC,GA0BrC,SAASI,GAAavD,EAASrgB,GAC/B,MAAMxZ,EAAQg6B,GAASH,EAASrgB,GAChC,MAAMqX,EAAU7wB,GAASA,EAAM8wB,MAAM,qBACrC,OAAOD,GAAWA,EAAQ,GAAKnzB,SACnC,CAII,SAAS2/B,GAAap4B,EAAIC,EAAIoM,EAAGqY,GACjC,MAAO,CACHrkB,EAAGL,EAAGK,EAAIgM,GAAKpM,EAAGI,EAAIL,EAAGK,GACzBoR,EAAGzR,EAAGyR,EAAIpF,GAAKpM,EAAGwR,EAAIzR,EAAGyR,GAEjC,CAGI,SAAS4mB,GAAsBr4B,EAAIC,EAAIoM,EAAGqY,GAC1C,MAAO,CACHrkB,EAAGL,EAAGK,EAAIgM,GAAKpM,EAAGI,EAAIL,EAAGK,GACzBoR,EAAGiT,IAAS,SAAWrY,EAAI,GAAMrM,EAAGyR,EAAIxR,EAAGwR,EAAIiT,IAAS,QAAUrY,EAAI,EAAIrM,EAAGyR,EAAIxR,EAAGwR,EAAIpF,EAAI,EAAIpM,EAAGwR,EAAIzR,EAAGyR,EAElH,CAGI,SAAS6mB,GAAqBt4B,EAAIC,EAAIoM,EAAGqY,GACzC,MAAM6T,EAAM,CACRl4B,EAAGL,EAAGypB,KACNhY,EAAGzR,EAAG2pB,MAEV,MAAM6O,EAAM,CACRn4B,EAAGJ,EAAGupB,KACN/X,EAAGxR,EAAGypB,MAEV,MAAM7vB,EAAIu+B,GAAap4B,EAAIu4B,EAAKlsB,GAChC,MAAMvS,EAAIs+B,GAAaG,EAAKC,EAAKnsB,GACjC,MAAM5O,EAAI26B,GAAaI,EAAKv4B,EAAIoM,GAChC,MAAM3O,EAAI06B,GAAav+B,EAAGC,EAAGuS,GAC7B,MAAMnR,EAAIk9B,GAAat+B,EAAG2D,EAAG4O,GAC7B,OAAO+rB,GAAa16B,EAAGxC,EAAGmR,EAC9B,CA+DA,SAASosB,GAAWlkB,GAChB,GAAIA,IAAa,QAAS,CACtB,MAAO,CACHmkB,QAAS/iB,GACTgjB,QAASljB,GACTmjB,UAAWljB,GAEvB,CACI,MAAO,CACHgjB,QAASriB,GACTsiB,QAAS,CAAC9+B,EAAGC,IAAID,EAAIC,EACrB8+B,UAAYv4B,GAAIA,EAExB,CACA,SAASw4B,IAAiBjjB,MAAEA,EAAKC,IAAGA,EAAGsD,MAAGA,EAAKiE,KAAGA,EAAI6G,MAAGA,IACrD,MAAO,CACHrO,MAAOA,EAAQuD,EACftD,IAAKA,EAAMsD,EACXiE,KAAMA,IAASvH,EAAMD,EAAQ,GAAKuD,IAAU,EAC5C8K,QAER,CACA,SAAS6U,GAAWC,EAAS/f,EAAQ6H,GACjC,MAAMtM,SAAEA,EAAWqB,MAAOojB,EAAanjB,IAAKojB,GAAcpY,EAC1D,MAAM6X,QAAEA,EAAOE,UAAGA,GAAeH,GAAWlkB,GAC5C,MAAM4E,EAAQH,EAAO7e,OACrB,IAAIyb,MAAEA,EAAKC,IAAGA,EAAGuH,KAAGA,GAAU2b,EAC9B,IAAI75B,EAAGgR,EACP,GAAIkN,EAAM,CACNxH,GAASuD,EACTtD,GAAOsD,EACP,IAAIja,EAAI,EAAGgR,EAAOiJ,EAAOja,EAAIgR,IAAQhR,EAAE,CACnC,IAAKw5B,EAAQE,EAAU5f,EAAOpD,EAAQuD,GAAO5E,IAAYykB,EAAYC,GAAW,CAC5E,KAChB,CACYrjB,IACAC,GACZ,CACQD,GAASuD,EACTtD,GAAOsD,CACf,CACI,GAAItD,EAAMD,EAAO,CACbC,GAAOsD,CACf,CACI,MAAO,CACHvD,QACAC,MACAuH,OACA6G,MAAO8U,EAAQ9U,MAEvB,CACC,SAASiV,GAAcH,EAAS/f,EAAQ6H,GACrC,IAAKA,EAAQ,CACT,MAAO,CACHkY,EAEZ,CACI,MAAMxkB,SAAEA,EAAWqB,MAAOojB,EAAanjB,IAAKojB,GAAcpY,EAC1D,MAAM1H,EAAQH,EAAO7e,OACrB,MAAMw+B,QAAEA,EAAOD,QAAGA,EAAOE,UAAGA,GAAeH,GAAWlkB,GACtD,MAAMqB,MAAEA,EAAKC,IAAGA,EAAGuH,KAAGA,EAAI6G,MAAGA,GAAW6U,GAAWC,EAAS/f,EAAQ6H,GACpE,MAAM/M,EAAS,GACf,IAAIqlB,EAAS,MACb,IAAIC,EAAW,KACf,IAAIr+B,EAAO8tB,EAAOwQ,EAClB,MAAMC,EAAgB,IAAIZ,EAAQM,EAAYK,EAAWt+B,IAAU49B,EAAQK,EAAYK,KAAe,EACtG,MAAME,EAAc,IAAIZ,EAAQM,EAAUl+B,KAAW,GAAK29B,EAAQO,EAAUI,EAAWt+B,GACvF,MAAMy+B,EAAc,IAAIL,GAAUG,IAClC,MAAMG,EAAa,KAAKN,GAAUI,IAClC,IAAI,IAAIr6B,EAAI0W,EAAOme,EAAOne,EAAO1W,GAAK2W,IAAO3W,EAAE,CAC3C2pB,EAAQ7P,EAAO9Z,EAAIia,GACnB,GAAI0P,EAAM0I,KAAM,CACZ,QACZ,CACQx2B,EAAQ69B,EAAU/P,EAAMtU,IACxB,GAAIxZ,IAAUs+B,EAAW,CACrB,QACZ,CACQF,EAAST,EAAQ39B,EAAOi+B,EAAYC,GACpC,GAAIG,IAAa,MAAQI,IAAe,CACpCJ,EAAWT,EAAQ59B,EAAOi+B,KAAgB,EAAI95B,EAAI60B,CAC9D,CACQ,GAAIqF,IAAa,MAAQK,IAAc,CACnC3lB,EAAO3X,KAAK08B,GAAiB,CACzBjjB,MAAOwjB,EACPvjB,IAAK3W,EACLke,OACAjE,QACA8K,WAEJmV,EAAW,IACvB,CACQrF,EAAO70B,EACPm6B,EAAYt+B,CACpB,CACI,GAAIq+B,IAAa,KAAM,CACnBtlB,EAAO3X,KAAK08B,GAAiB,CACzBjjB,MAAOwjB,EACPvjB,MACAuH,OACAjE,QACA8K,UAEZ,CACI,OAAOnQ,CACX,CACC,SAAS4lB,GAAevP,EAAMtJ,GAC3B,MAAM/M,EAAS,GACf,MAAM6lB,EAAWxP,EAAKwP,SACtB,IAAI,IAAIz6B,EAAI,EAAGA,EAAIy6B,EAASx/B,OAAQ+E,IAAI,CACpC,MAAM06B,EAAMV,GAAcS,EAASz6B,GAAIirB,EAAKnR,OAAQ6H,GACpD,GAAI+Y,EAAIz/B,OAAQ,CACZ2Z,EAAO3X,QAAQy9B,EAC3B,CACA,CACI,OAAO9lB,CACX,CACC,SAAS+lB,GAAgB7gB,EAAQG,EAAOiE,EAAMyW,GAC3C,IAAIje,EAAQ,EACZ,IAAIC,EAAMsD,EAAQ,EAClB,GAAIiE,IAASyW,EAAU,CACnB,MAAMje,EAAQuD,IAAUH,EAAOpD,GAAO2b,KAAK,CACvC3b,GACZ,CACA,CACI,MAAMA,EAAQuD,GAASH,EAAOpD,GAAO2b,KAAK,CACtC3b,GACR,CACIA,GAASuD,EACT,GAAIiE,EAAM,CACNvH,GAAOD,CACf,CACI,MAAMC,EAAMD,GAASoD,EAAOnD,EAAMsD,GAAOoY,KAAK,CAC1C1b,GACR,CACIA,GAAOsD,EACP,MAAO,CACHvD,QACAC,MAER,CACC,SAASikB,GAAc9gB,EAAQpD,EAAOhZ,EAAKwgB,GACxC,MAAMjE,EAAQH,EAAO7e,OACrB,MAAM2Z,EAAS,GACf,IAAI+C,EAAOjB,EACX,IAAIme,EAAO/a,EAAOpD,GAClB,IAAIC,EACJ,IAAIA,EAAMD,EAAQ,EAAGC,GAAOjZ,IAAOiZ,EAAI,CACnC,MAAMkkB,EAAM/gB,EAAOnD,EAAMsD,GACzB,GAAI4gB,EAAIxI,MAAQwI,EAAIC,KAAM,CACtB,IAAKjG,EAAKxC,KAAM,CACZnU,EAAO,MACPtJ,EAAO3X,KAAK,CACRyZ,MAAOA,EAAQuD,EACftD,KAAMA,EAAM,GAAKsD,EACjBiE,SAEJxH,EAAQiB,EAAOkjB,EAAIC,KAAOnkB,EAAM,IAChD,CACA,KAAe,CACHgB,EAAOhB,EACP,GAAIke,EAAKxC,KAAM,CACX3b,EAAQC,CACxB,CACA,CACQke,EAAOgG,CACf,CACI,GAAIljB,IAAS,KAAM,CACf/C,EAAO3X,KAAK,CACRyZ,MAAOA,EAAQuD,EACftD,IAAKgB,EAAOsC,EACZiE,QAEZ,CACI,OAAOtJ,CACX,CACC,SAASmmB,GAAiB9P,EAAM+P,GAC7B,MAAMlhB,EAASmR,EAAKnR,OACpB,MAAM6a,EAAW1J,EAAKtZ,QAAQgjB,SAC9B,MAAM1a,EAAQH,EAAO7e,OACrB,IAAKgf,EAAO,CACR,MAAO,EACf,CACI,MAAMiE,IAAS+M,EAAKgQ,MACpB,MAAMvkB,MAAEA,EAAKC,IAAGA,GAASgkB,GAAgB7gB,EAAQG,EAAOiE,EAAMyW,GAC9D,GAAIA,IAAa,KAAM,CACnB,OAAOuG,GAAcjQ,EAAM,CACvB,CACIvU,QACAC,MACAuH,SAELpE,EAAQkhB,EACnB,CACI,MAAMt9B,EAAMiZ,EAAMD,EAAQC,EAAMsD,EAAQtD,EACxC,MAAMwkB,IAAiBlQ,EAAKmQ,WAAa1kB,IAAU,GAAKC,IAAQsD,EAAQ,EACxE,OAAOihB,GAAcjQ,EAAM2P,GAAc9gB,EAAQpD,EAAOhZ,EAAKy9B,GAAerhB,EAAQkhB,EACxF,CACC,SAASE,GAAcjQ,EAAMwP,EAAU3gB,EAAQkhB,GAC5C,IAAKA,IAAmBA,EAAe1K,aAAexW,EAAQ,CAC1D,OAAO2gB,CACf,CACI,OAAOY,GAAgBpQ,EAAMwP,EAAU3gB,EAAQkhB,EACnD,CACC,SAASK,GAAgBpQ,EAAMwP,EAAU3gB,EAAQkhB,GAC9C,MAAMM,EAAerQ,EAAKsQ,OAAO3T,aACjC,MAAM4T,EAAYC,GAAUxQ,EAAKtZ,SACjC,MAAQ+pB,cAAevqB,EAAeQ,SAASgjB,SAAEA,IAAiB1J,EAClE,MAAMhR,EAAQH,EAAO7e,OACrB,MAAM2Z,EAAS,GACf,IAAI+mB,EAAYH,EAChB,IAAI9kB,EAAQ+jB,EAAS,GAAG/jB,MACxB,IAAI1W,EAAI0W,EACR,SAASklB,EAASn8B,EAAGzD,EAAGwB,EAAGq+B,GACvB,MAAMC,EAAMnH,GAAY,EAAI,EAC5B,GAAIl1B,IAAMzD,EAAG,CACT,MACZ,CACQyD,GAAKwa,EACL,MAAMH,EAAOra,EAAIwa,GAAOoY,KAAK,CACzB5yB,GAAKq8B,CACjB,CACQ,MAAMhiB,EAAO9d,EAAIie,GAAOoY,KAAK,CACzBr2B,GAAK8/B,CACjB,CACQ,GAAIr8B,EAAIwa,IAAUje,EAAIie,EAAO,CACzBrF,EAAO3X,KAAK,CACRyZ,MAAOjX,EAAIwa,EACXtD,IAAK3a,EAAIie,EACTiE,KAAM1gB,EACNunB,MAAO8W,IAEXF,EAAYE,EACZnlB,EAAQ1a,EAAIie,CACxB,CACA,CACI,IAAK,MAAM4f,KAAWY,EAAS,CAC3B/jB,EAAQie,EAAWje,EAAQmjB,EAAQnjB,MACnC,IAAIme,EAAO/a,EAAOpD,EAAQuD,GAC1B,IAAI8K,EACJ,IAAI/kB,EAAI0W,EAAQ,EAAG1W,GAAK65B,EAAQljB,IAAK3W,IAAI,CACrC,MAAMo0B,EAAKta,EAAO9Z,EAAIia,GACtB8K,EAAQ0W,GAAUT,EAAe1K,WAAWrC,GAAcqN,EAAc,CACpE1/B,KAAM,UACNmgC,GAAIlH,EACJ/zB,GAAIszB,EACJ4H,aAAch8B,EAAI,GAAKia,EACvBgiB,YAAaj8B,EAAIia,EACjB9I,mBAEJ,GAAI+qB,GAAanX,EAAO4W,GAAY,CAChCC,EAASllB,EAAO1W,EAAI,EAAG65B,EAAQ3b,KAAMyd,EACrD,CACY9G,EAAOT,EACPuH,EAAY5W,CACxB,CACQ,GAAIrO,EAAQ1W,EAAI,EAAG,CACf47B,EAASllB,EAAO1W,EAAI,EAAG65B,EAAQ3b,KAAMyd,EACjD,CACA,CACI,OAAO/mB,CACX,CACA,SAAS6mB,GAAU9pB,GACf,MAAO,CACHyS,gBAAiBzS,EAAQyS,gBACzB+X,eAAgBxqB,EAAQwqB,eACxBC,WAAYzqB,EAAQyqB,WACpBC,iBAAkB1qB,EAAQ0qB,iBAC1BC,gBAAiB3qB,EAAQ2qB,gBACzB9S,YAAa7X,EAAQ6X,YACrBnF,YAAa1S,EAAQ0S,YAE7B,CACA,SAAS6X,GAAanX,EAAO4W,GACzB,IAAKA,EAAW,CACZ,OAAO,KACf,CACI,MAAMjN,EAAQ,GACd,MAAM6N,EAAW,SAAS7gC,EAAKG,GAC3B,IAAK4hB,GAAoB5hB,GAAQ,CAC7B,OAAOA,CACnB,CACQ,IAAK6yB,EAAMrN,SAASxlB,GAAQ,CACxB6yB,EAAMzxB,KAAKpB,EACvB,CACQ,OAAO6yB,EAAMjd,QAAQ5V,EAC7B,EACI,OAAO8jB,KAAKC,UAAUmF,EAAOwX,KAAc5c,KAAKC,UAAU+b,EAAWY,EACzE;;;;;;GChrFA,MAAMC,GACF,WAAAzuB,GACI1U,KAAKojC,SAAW,KAChBpjC,KAAKqjC,QAAU,IAAInd,IACnBlmB,KAAKsjC,SAAW,MAChBtjC,KAAKujC,UAAYrjC,SACzB,CACC,OAAAsjC,CAAQpc,EAAOqc,EAAOC,EAAMnhC,GACrB,MAAMohC,EAAYF,EAAM5kB,UAAUtc,GAClC,MAAMqhC,EAAWH,EAAM9e,SACvBgf,EAAU1kB,SAAShI,GAAKA,EAAG,CACnBmQ,QACAyc,QAASJ,EAAMI,QACfD,WACAE,YAAa1/B,KAAKE,IAAIo/B,EAAOD,EAAMpmB,MAAOumB,MAE1D,CACC,QAAAG,GACO,GAAI/jC,KAAKojC,SAAU,CACf,MACZ,CACQpjC,KAAKsjC,SAAW,KAChBtjC,KAAKojC,SAAW3jB,GAAiBrJ,KAAKsJ,QAAQ,KAC1C1f,KAAKgkC,UACLhkC,KAAKojC,SAAW,KAChB,GAAIpjC,KAAKsjC,SAAU,CACftjC,KAAK+jC,UACrB,IAEA,CACC,OAAAC,CAAQN,EAAOO,KAAKC,OACb,IAAIC,EAAY,EAChBnkC,KAAKqjC,QAAQpkB,SAAQ,CAACwkB,EAAOrc,KACzB,IAAKqc,EAAMW,UAAYX,EAAMrjC,MAAMwB,OAAQ,CACvC,MAChB,CACY,MAAMxB,EAAQqjC,EAAMrjC,MACpB,IAAIuG,EAAIvG,EAAMwB,OAAS,EACvB,IAAIyiC,EAAO,MACX,IAAI3jC,EACJ,KAAMiG,GAAK,IAAKA,EAAE,CACdjG,EAAON,EAAMuG,GACb,GAAIjG,EAAK4jC,QAAS,CACd,GAAI5jC,EAAK6jC,OAASd,EAAM9e,SAAU,CAC9B8e,EAAM9e,SAAWjkB,EAAK6jC,MAC9C,CACoB7jC,EAAK8jC,KAAKd,GACVW,EAAO,IAC3B,KAAuB,CACHjkC,EAAMuG,GAAKvG,EAAMA,EAAMwB,OAAS,GAChCxB,EAAMqb,KAC1B,CACA,CACY,GAAI4oB,EAAM,CACNjd,EAAMid,OACNrkC,KAAKwjC,QAAQpc,EAAOqc,EAAOC,EAAM,WACjD,CACY,IAAKtjC,EAAMwB,OAAQ,CACf6hC,EAAMW,QAAU,MAChBpkC,KAAKwjC,QAAQpc,EAAOqc,EAAOC,EAAM,YACjCD,EAAMI,QAAU,KAChC,CACYM,GAAa/jC,EAAMwB,MAAM,IAE7B5B,KAAKujC,UAAYG,EACjB,GAAIS,IAAc,EAAG,CACjBnkC,KAAKsjC,SAAW,KAC5B,CACA,CACC,SAAAmB,CAAUrd,GACH,MAAMsd,EAAS1kC,KAAKqjC,QACpB,IAAII,EAAQiB,EAAOje,IAAIW,GACvB,IAAKqc,EAAO,CACRA,EAAQ,CACJW,QAAS,MACTP,QAAS,KACTzjC,MAAO,GACPye,UAAW,CACP8lB,SAAU,GACVC,SAAU,KAGlBF,EAAOhgB,IAAI0C,EAAOqc,EAC9B,CACQ,OAAOA,CACf,CACC,MAAAoB,CAAOzd,EAAOuW,EAAOmH,GACd9kC,KAAKykC,UAAUrd,GAAOvI,UAAU8e,GAAO/5B,KAAKkhC,EACpD,CACC,GAAAnQ,CAAIvN,EAAOhnB,GACJ,IAAKA,IAAUA,EAAMwB,OAAQ,CACzB,MACZ,CACQ5B,KAAKykC,UAAUrd,GAAOhnB,MAAMwD,QAAQxD,EAC5C,CACC,GAAA4Z,CAAIoN,GACG,OAAOpnB,KAAKykC,UAAUrd,GAAOhnB,MAAMwB,OAAS,CACpD,CACC,KAAAyb,CAAM+J,GACC,MAAMqc,EAAQzjC,KAAKqjC,QAAQ5c,IAAIW,GAC/B,IAAKqc,EAAO,CACR,MACZ,CACQA,EAAMW,QAAU,KAChBX,EAAMpmB,MAAQ4mB,KAAKC,MACnBT,EAAM9e,SAAW8e,EAAMrjC,MAAM2kC,QAAO,CAACC,EAAKxD,IAAMp9B,KAAKC,IAAI2gC,EAAKxD,EAAIyD,YAAY,GAC9EjlC,KAAK+jC,UACb,CACI,OAAAK,CAAQhd,GACJ,IAAKpnB,KAAKsjC,SAAU,CAChB,OAAO,KACnB,CACQ,MAAMG,EAAQzjC,KAAKqjC,QAAQ5c,IAAIW,GAC/B,IAAKqc,IAAUA,EAAMW,UAAYX,EAAMrjC,MAAMwB,OAAQ,CACjD,OAAO,KACnB,CACQ,OAAO,IACf,CACC,IAAA6/B,CAAKra,GACE,MAAMqc,EAAQzjC,KAAKqjC,QAAQ5c,IAAIW,GAC/B,IAAKqc,IAAUA,EAAMrjC,MAAMwB,OAAQ,CAC/B,MACZ,CACQ,MAAMxB,EAAQqjC,EAAMrjC,MACpB,IAAIuG,EAAIvG,EAAMwB,OAAS,EACvB,KAAM+E,GAAK,IAAKA,EAAE,CACdvG,EAAMuG,GAAGu+B,QACrB,CACQzB,EAAMrjC,MAAQ,GACdJ,KAAKwjC,QAAQpc,EAAOqc,EAAOQ,KAAKC,MAAO,WAC/C,CACC,MAAAiB,CAAO/d,GACA,OAAOpnB,KAAKqjC,QAAQpL,OAAO7Q,EACnC,EAEA,IAAIge,GAA2B,IAAIjC,GAEnC,MAAMhwB,GAAc,cACpB,MAAMkyB,GAAgB,CAClB,OAAAC,CAAS5xB,EAAMF,EAAI+xB,GACf,OAAOA,EAAS,GAAM/xB,EAAKE,CACnC,EACC,KAAAsB,CAAOtB,EAAMF,EAAI+xB,GACV,MAAMC,EAAKxwB,GAAMtB,GAAQP,IACzB,MAAM+B,EAAKswB,EAAG3wB,OAASG,GAAMxB,GAAML,IACnC,OAAO+B,GAAMA,EAAGL,MAAQK,EAAGH,IAAIywB,EAAID,GAAQt/B,YAAcuN,CACjE,EACI,MAAAiyB,CAAQ/xB,EAAMF,EAAI+xB,GACd,OAAO7xB,GAAQF,EAAKE,GAAQ6xB,CACpC,GAEA,MAAMG,GACF,WAAAhxB,CAAYixB,EAAK/iC,EAAQgxB,EAAMpgB,GAC3B,MAAMoyB,EAAehjC,EAAOgxB,GAC5BpgB,EAAK2gB,GAAQ,CACTwR,EAAInyB,GACJA,EACAoyB,EACAD,EAAIjyB,OAER,MAAMA,EAAOygB,GAAQ,CACjBwR,EAAIjyB,KACJkyB,EACApyB,IAEJxT,KAAKskC,QAAU,KACftkC,KAAK6lC,IAAMF,EAAI1uB,IAAMouB,GAAcM,EAAIpjC,aAAemR,GACtD1T,KAAK8lC,QAAU3jB,GAAQwjB,EAAI/gB,SAAWzC,GAAQC,OAC9CpiB,KAAK+lC,OAAS3hC,KAAK+W,MAAM8oB,KAAKC,OAASyB,EAAI3lB,OAAS,IACpDhgB,KAAKilC,UAAYjlC,KAAKukC,OAASngC,KAAK+W,MAAMwqB,EAAIhhB,UAC9C3kB,KAAK4hC,QAAU+D,EAAI9gB,KACnB7kB,KAAKgmC,QAAUpjC,EACf5C,KAAKimC,MAAQrS,EACb5zB,KAAKkmC,MAAQxyB,EACb1T,KAAKmmC,IAAM3yB,EACXxT,KAAKomC,UAAYlmC,SACzB,CACI,MAAAilB,GACI,OAAOnlB,KAAKskC,OACpB,CACI,MAAA+B,CAAOV,EAAKnyB,EAAIkwB,GACZ,GAAI1jC,KAAKskC,QAAS,CACdtkC,KAAKwjC,QAAQ,OACb,MAAMoC,EAAe5lC,KAAKgmC,QAAQhmC,KAAKimC,OACvC,MAAMK,EAAU5C,EAAO1jC,KAAK+lC,OAC5B,MAAMje,EAAS9nB,KAAKilC,UAAYqB,EAChCtmC,KAAK+lC,OAASrC,EACd1jC,KAAKilC,UAAY7gC,KAAK+W,MAAM/W,KAAKC,IAAIyjB,EAAQ6d,EAAIhhB,WACjD3kB,KAAKukC,QAAU+B,EACftmC,KAAK4hC,QAAU+D,EAAI9gB,KACnB7kB,KAAKmmC,IAAMhS,GAAQ,CACfwR,EAAInyB,GACJA,EACAoyB,EACAD,EAAIjyB,OAER1T,KAAKkmC,MAAQ/R,GAAQ,CACjBwR,EAAIjyB,KACJkyB,EACApyB,GAEhB,CACA,CACI,MAAA0xB,GACI,GAAIllC,KAAKskC,QAAS,CACdtkC,KAAKwkC,KAAKP,KAAKC,OACflkC,KAAKskC,QAAU,MACftkC,KAAKwjC,QAAQ,MACzB,CACA,CACI,IAAAgB,CAAKd,GACD,MAAM4C,EAAU5C,EAAO1jC,KAAK+lC,OAC5B,MAAMphB,EAAW3kB,KAAKilC,UACtB,MAAMrR,EAAO5zB,KAAKimC,MAClB,MAAMvyB,EAAO1T,KAAKkmC,MAClB,MAAMrhB,EAAO7kB,KAAK4hC,MAClB,MAAMpuB,EAAKxT,KAAKmmC,IAChB,IAAIZ,EACJvlC,KAAKskC,QAAU5wB,IAASF,IAAOqR,GAAQyhB,EAAU3hB,GACjD,IAAK3kB,KAAKskC,QAAS,CACftkC,KAAKgmC,QAAQpS,GAAQpgB,EACrBxT,KAAKwjC,QAAQ,MACb,MACZ,CACQ,GAAI8C,EAAU,EAAG,CACbtmC,KAAKgmC,QAAQpS,GAAQlgB,EACrB,MACZ,CACQ6xB,EAASe,EAAU3hB,EAAW,EAC9B4gB,EAAS1gB,GAAQ0gB,EAAS,EAAI,EAAIA,EAASA,EAC3CA,EAASvlC,KAAK8lC,QAAQ1hC,KAAKE,IAAI,EAAGF,KAAKC,IAAI,EAAGkhC,KAC9CvlC,KAAKgmC,QAAQpS,GAAQ5zB,KAAK6lC,IAAInyB,EAAMF,EAAI+xB,EAChD,CACI,IAAAgB,GACI,MAAMC,EAAWxmC,KAAKomC,YAAcpmC,KAAKomC,UAAY,IACrD,OAAO,IAAIK,SAAQ,CAACrnB,EAAKsnB,KACrBF,EAAS5iC,KAAK,CACVwb,MACAsnB,OACF,GAEd,CACI,OAAAlD,CAAQmD,GACJ,MAAMznB,EAASynB,EAAW,MAAQ,MAClC,MAAMH,EAAWxmC,KAAKomC,WAAa,GACnC,IAAI,IAAIz/B,EAAI,EAAGA,EAAI6/B,EAAS5kC,OAAQ+E,IAAI,CACpC6/B,EAAS7/B,GAAGuY,IACxB,CACA,EAGA,MAAM0nB,GACF,WAAAlyB,CAAY0S,EAAOyf,GACf7mC,KAAKkiC,OAAS9a,EACdpnB,KAAK8mC,YAAc,IAAI5gB,IACvBlmB,KAAK+mC,UAAUF,EACvB,CACI,SAAAE,CAAUF,GACN,IAAKxwB,GAASwwB,GAAS,CACnB,MACZ,CACQ,MAAMG,EAAmBr0B,OAAOD,KAAK+R,GAASW,WAC9C,MAAM6hB,EAAgBjnC,KAAK8mC,YAC3Bn0B,OAAOu0B,oBAAoBL,GAAQ5nB,SAAS5c,IACxC,MAAMsjC,EAAMkB,EAAOxkC,GACnB,IAAKgU,GAASsvB,GAAM,CAChB,MAChB,CACY,MAAMgB,EAAW,GACjB,IAAK,MAAMQ,KAAUH,EAAiB,CAClCL,EAASQ,GAAUxB,EAAIwB,EACvC,EACalgC,GAAQ0+B,EAAIzgB,aAAeygB,EAAIzgB,YAAc,CAC1C7iB,IACD4c,SAAS2U,IACR,GAAIA,IAASvxB,IAAQ4kC,EAAcjtB,IAAI4Z,GAAO,CAC1CqT,EAAcviB,IAAIkP,EAAM+S,EAC5C,IACc,GAEd,CACC,eAAAS,CAAgBxkC,EAAQokB,GACjB,MAAMqgB,EAAargB,EAAO1O,QAC1B,MAAMA,EAAUgvB,GAAqB1kC,EAAQykC,GAC7C,IAAK/uB,EAAS,CACV,MAAO,EACnB,CACQ,MAAMiN,EAAavlB,KAAKunC,kBAAkBjvB,EAAS+uB,GACnD,GAAIA,EAAWG,QAAS,CACpBC,GAAS7kC,EAAO0V,QAAQovB,YAAaL,GAAYM,MAAK,KAClD/kC,EAAO0V,QAAU+uB,CAAU,IAC5B,QAEf,CACQ,OAAO9hB,CACf,CACC,iBAAAgiB,CAAkB3kC,EAAQokB,GACnB,MAAMigB,EAAgBjnC,KAAK8mC,YAC3B,MAAMvhB,EAAa,GACnB,MAAM6e,EAAUxhC,EAAO8kC,cAAgB9kC,EAAO8kC,YAAc,IAC5D,MAAMjU,EAAQ9gB,OAAOD,KAAKsU,GAC1B,MAAM0c,EAAOO,KAAKC,MAClB,IAAIv9B,EACJ,IAAIA,EAAI8sB,EAAM7xB,OAAS,EAAG+E,GAAK,IAAKA,EAAE,CAClC,MAAMitB,EAAOH,EAAM9sB,GACnB,GAAIitB,EAAKpf,OAAO,KAAO,IAAK,CACxB,QAChB,CACY,GAAIof,IAAS,UAAW,CACpBrO,EAAW3hB,QAAQ5D,KAAKonC,gBAAgBxkC,EAAQokB,IAChD,QAChB,CACY,MAAMxkB,EAAQwkB,EAAO4M,GACrB,IAAIxO,EAAYgf,EAAQxQ,GACxB,MAAM+R,EAAMsB,EAAcxgB,IAAImN,GAC9B,GAAIxO,EAAW,CACX,GAAIugB,GAAOvgB,EAAUD,SAAU,CAC3BC,EAAUihB,OAAOV,EAAKnjC,EAAOkhC,GAC7B,QACpB,KAAuB,CACHte,EAAU8f,QAC9B,CACA,CACY,IAAKS,IAAQA,EAAIhhB,SAAU,CACvB/hB,EAAOgxB,GAAQpxB,EACf,QAChB,CACY4hC,EAAQxQ,GAAQxO,EAAY,IAAIsgB,GAAUC,EAAK/iC,EAAQgxB,EAAMpxB,GAC7D+iB,EAAW3hB,KAAKwhB,EAC5B,CACQ,OAAOG,CACf,CACC,MAAA8gB,CAAOzjC,EAAQokB,GACR,GAAIhnB,KAAK8mC,YAAY/sB,OAAS,EAAG,CAC7BpH,OAAOyB,OAAOxR,EAAQokB,GACtB,MACZ,CACQ,MAAMzB,EAAavlB,KAAKunC,kBAAkB3kC,EAAQokB,GAClD,GAAIzB,EAAW3jB,OAAQ,CACnBwjC,GAASzQ,IAAI30B,KAAKkiC,OAAQ3c,GAC1B,OAAO,IACnB,CACA,EAEA,SAASkiB,GAASliB,EAAYL,GAC1B,MAAMkf,EAAU,GAChB,MAAM1xB,EAAOC,OAAOD,KAAKwS,GACzB,IAAI,IAAIve,EAAI,EAAGA,EAAI+L,EAAK9Q,OAAQ+E,IAAI,CAChC,MAAMihC,EAAOriB,EAAW7S,EAAK/L,IAC7B,GAAIihC,GAAQA,EAAKziB,SAAU,CACvBif,EAAQxgC,KAAKgkC,EAAKrB,OAC9B,CACA,CACI,OAAOE,QAAQoB,IAAIzD,EACvB,CACA,SAASkD,GAAqB1kC,EAAQykC,GAClC,IAAKA,EAAY,CACb,MACR,CACI,IAAI/uB,EAAU1V,EAAO0V,QACrB,IAAKA,EAAS,CACV1V,EAAO0V,QAAU+uB,EACjB,MACR,CACI,GAAI/uB,EAAQkvB,QAAS,CACjB5kC,EAAO0V,QAAUA,EAAU3F,OAAOyB,OAAO,GAAIkE,EAAS,CAClDkvB,QAAS,MACTE,YAAa,IAEzB,CACI,OAAOpvB,CACX,CAEA,SAASwvB,GAAUnb,EAAOob,GACtB,MAAMzW,EAAO3E,GAASA,EAAMrU,SAAW,GACvC,MAAMf,EAAU+Z,EAAK/Z,QACrB,MAAMjT,EAAMgtB,EAAKhtB,MAAQpE,UAAY6nC,EAAkB,EACvD,MAAM1jC,EAAMitB,EAAKjtB,MAAQnE,UAAY6nC,EAAkB,EACvD,MAAO,CACH1qB,MAAO9F,EAAUlT,EAAMC,EACvBgZ,IAAK/F,EAAUjT,EAAMD,EAE7B,CACA,SAAS2jC,GAAY1mB,EAAQC,EAAQwmB,GACjC,GAAIA,IAAoB,MAAO,CAC3B,OAAO,KACf,CACI,MAAMjgC,EAAIggC,GAAUxmB,EAAQymB,GAC5B,MAAM7uB,EAAI4uB,GAAUvmB,EAAQwmB,GAC5B,MAAO,CACHliB,IAAK3M,EAAEoE,IACPwI,MAAOhe,EAAEwV,IACTyI,OAAQ7M,EAAEmE,MACV2I,KAAMle,EAAEuV,MAEhB,CACA,SAAS4qB,GAAOzlC,GACZ,IAAIsR,EAAGpO,EAAGnE,EAAG4C,EACb,GAAIkS,GAAS7T,GAAQ,CACjBsR,EAAItR,EAAMqjB,IACVngB,EAAIlD,EAAMsjB,MACVvkB,EAAIiB,EAAMujB,OACV5hB,EAAI3B,EAAMwjB,IAClB,KAAW,CACHlS,EAAIpO,EAAInE,EAAI4C,EAAI3B,CACxB,CACI,MAAO,CACHqjB,IAAK/R,EACLgS,MAAOpgB,EACPqgB,OAAQxkB,EACRykB,KAAM7hB,EACN+jC,SAAU1lC,IAAU,MAE5B,CACA,SAAS2lC,GAAwB/gB,EAAOghB,GACpC,MAAM11B,EAAO,GACb,MAAM21B,EAAWjhB,EAAMkhB,uBAAuBF,GAC9C,IAAIzhC,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAO0wB,EAASzmC,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC7C+L,EAAK9O,KAAKykC,EAAS1hC,GAAGoR,MAC9B,CACI,OAAOrF,CACX,CACA,SAAS61B,GAAWC,EAAOhmC,EAAOimC,EAASnwB,EAAU,IACjD,MAAM5F,EAAO81B,EAAM91B,KACnB,MAAMg2B,EAAapwB,EAAQ6T,OAAS,SACpC,IAAIxlB,EAAGgR,EAAMG,EAAc6wB,EAC3B,GAAInmC,IAAU,KAAM,CAChB,MACR,CACI,IAAIomC,EAAQ,MACZ,IAAIjiC,EAAI,EAAGgR,EAAOjF,EAAK9Q,OAAQ+E,EAAIgR,IAAQhR,EAAE,CACzCmR,GAAgBpF,EAAK/L,GACrB,GAAImR,IAAiB2wB,EAAS,CAC1BG,EAAQ,KACR,GAAItwB,EAAQuvB,IAAK,CACb,QAChB,CACY,KACZ,CACQc,EAAaH,EAAMxhB,OAAOlP,GAC1B,GAAIxB,GAAeqyB,KAAgBD,GAAclmC,IAAU,GAAKoY,GAAKpY,KAAWoY,GAAK+tB,IAAc,CAC/FnmC,GAASmmC,CACrB,CACA,CACI,IAAKC,IAAUtwB,EAAQuvB,IAAK,CACxB,OAAO,CACf,CACI,OAAOrlC,CACX,CACA,SAASqmC,GAAyBlb,EAAMnN,GACpC,MAAMM,OAAEA,EAAMgoB,OAAGA,GAAYtoB,EAC7B,MAAMuoB,EAAWjoB,EAAOE,OAAS,IAAM,IAAM,IAC7C,MAAMgoB,EAAWF,EAAO9nB,OAAS,IAAM,IAAM,IAC7C,MAAMtO,EAAOC,OAAOD,KAAKib,GACzB,MAAMsb,EAAQ,IAAIjiC,MAAM0L,EAAK9Q,QAC7B,IAAI+E,EAAGgR,EAAMtV,EACb,IAAIsE,EAAI,EAAGgR,EAAOjF,EAAK9Q,OAAQ+E,EAAIgR,IAAQhR,EAAE,CACzCtE,EAAMqQ,EAAK/L,GACXsiC,EAAMtiC,GAAK,CACPoiC,CAACA,GAAW1mC,EACZ2mC,CAACA,GAAWrb,EAAKtrB,GAE7B,CACI,OAAO4mC,CACX,CACA,SAASC,GAAUvc,EAAOnM,GACtB,MAAM2oB,EAAUxc,GAASA,EAAMrU,QAAQ6wB,QACvC,OAAOA,GAAWA,IAAYjpC,WAAasgB,EAAKgoB,QAAUtoC,SAC9D,CACA,SAASkpC,GAAYC,EAAYC,EAAY9oB,GACzC,MAAO,GAAG6oB,EAAWzoC,MAAM0oC,EAAW1oC,MAAM4f,EAAKgoB,OAAShoB,EAAKje,MACnE,CACA,SAAS4e,GAAcwL,GACnB,MAAMroB,IAAEA,EAAGD,IAAGA,EAAG4c,WAAGA,EAAUC,WAAGA,GAAgByL,EAAMxL,gBACvD,MAAO,CACH7c,IAAK2c,EAAa3c,EAAMiS,OAAOgzB,kBAC/BllC,IAAK6c,EAAa7c,EAAMkS,OAAO+D,kBAEvC,CACA,SAASkvB,GAAiBC,EAAQC,EAAUC,GACxC,MAAMC,EAAWH,EAAOC,KAAcD,EAAOC,GAAY,IACzD,OAAOE,EAASD,KAAgBC,EAASD,GAAc,GAC3D,CACA,SAASE,GAAoBrB,EAAOM,EAAQgB,EAAUvnC,GAClD,IAAK,MAAMie,KAAQsoB,EAAOiB,wBAAwBxnC,GAAMgV,UAAU,CAC9D,MAAM/U,EAAQgmC,EAAMhoB,EAAKzI,OACzB,GAAI+xB,GAAYtnC,EAAQ,IAAMsnC,GAAYtnC,EAAQ,EAAG,CACjD,OAAOge,EAAKzI,KACxB,CACA,CACI,OAAO,IACX,CACA,SAASiyB,GAAaC,EAAYC,GAC9B,MAAM9iB,MAAEA,EAAQ+iB,YAAa3pB,GAAUypB,EACvC,MAAMR,EAASriB,EAAMgjB,UAAYhjB,EAAMgjB,QAAU,IACjD,MAAMtpB,OAAEA,EAAMgoB,OAAGA,EAAS/wB,MAAOD,GAAkB0I,EACnD,MAAM6pB,EAAQvpB,EAAOE,KACrB,MAAMspB,EAAQxB,EAAO9nB,KACrB,MAAM3e,EAAM+mC,GAAYtoB,EAAQgoB,EAAQtoB,GACxC,MAAM7I,EAAOuyB,EAAOtoC,OACpB,IAAI4mC,EACJ,IAAI,IAAI7hC,EAAI,EAAGA,EAAIgR,IAAQhR,EAAE,CACzB,MAAMjG,EAAOwpC,EAAOvjC,GACpB,MAAQ0jC,CAACA,GAAQtyB,EAAQuyB,CAACA,GAAQ9nC,GAAW9B,EAC7C,MAAM6pC,EAAa7pC,EAAK0pC,UAAY1pC,EAAK0pC,QAAU,IACnD5B,EAAQ+B,EAAWD,GAASd,GAAiBC,EAAQpnC,EAAK0V,GAC1DywB,EAAM1wB,GAAgBtV,EACtBgmC,EAAMgC,KAAOX,GAAoBrB,EAAOM,EAAQ,KAAMtoB,EAAKje,MAC3DimC,EAAMiC,QAAUZ,GAAoBrB,EAAOM,EAAQ,MAAOtoB,EAAKje,MAC/D,MAAMmoC,EAAelC,EAAMmC,gBAAkBnC,EAAMmC,cAAgB,IACnED,EAAa5yB,GAAgBtV,CACrC,CACA,CACA,SAASooC,GAAgBxjB,EAAOpG,GAC5B,MAAM4L,EAASxF,EAAMwF,OACrB,OAAOja,OAAOD,KAAKka,GAAQ1pB,QAAQb,GAAMuqB,EAAOvqB,GAAK2e,OAASA,IAAM6pB,OACxE,CACA,SAASC,GAAqBxS,EAAQvgB,GAClC,OAAO6c,GAAc0D,EAAQ,CACzBnT,OAAQ,MACR4lB,QAAS7qC,UACT4X,aAAcC,EACdA,QACAoU,KAAM,UACN5pB,KAAM,WAEd,CACA,SAASyoC,GAAkB1S,EAAQvgB,EAAOskB,GACtC,OAAOzH,GAAc0D,EAAQ,CACzBnT,OAAQ,MACR8lB,UAAWlzB,EACXmyB,OAAQhqC,UACRgrC,IAAKhrC,UACLm8B,UACAtkB,QACAoU,KAAM,UACN5pB,KAAM,QAEd,CACA,SAAS4oC,GAAY3qB,EAAMpgB,GACvB,MAAM0X,EAAe0I,EAAKypB,WAAWlyB,MACrC,MAAMiJ,EAAOR,EAAKsoB,QAAUtoB,EAAKsoB,OAAO9nB,KACxC,IAAKA,EAAM,CACP,MACR,CACI5gB,EAAQA,GAASogB,EAAKO,QACtB,IAAK,MAAMmpB,KAAU9pC,EAAM,CACvB,MAAMqpC,EAASS,EAAOE,QACtB,IAAKX,GAAUA,EAAOzoB,KAAU9gB,WAAaupC,EAAOzoB,GAAMlJ,KAAkB5X,UAAW,CACnF,MACZ,QACeupC,EAAOzoB,GAAMlJ,GACpB,GAAI2xB,EAAOzoB,GAAM2pB,gBAAkBzqC,WAAaupC,EAAOzoB,GAAM2pB,cAAc7yB,KAAkB5X,UAAW,QAC7FupC,EAAOzoB,GAAM2pB,cAAc7yB,EAC9C,CACA,CACA,CACA,MAAMszB,GAAsBjf,GAAOA,IAAS,SAAWA,IAAS,OAChE,MAAMkf,GAAmB,CAACC,EAAQC,IAASA,EAASD,EAAS34B,OAAOyB,OAAO,GAAIk3B,GAC/E,MAAME,GAAc,CAACC,EAAUjrB,EAAM4G,IAAQqkB,IAAajrB,EAAKkrB,QAAUlrB,EAAKmrB,UAAY,CAClFj5B,KAAMy1B,GAAwB/gB,EAAO,MACrCJ,OAAQ,MAEhB,MAAM4kB,GACLC,gBAAkB,GAClBA,0BAA4B,KAC5BA,uBAAyB,KACzB,WAAAn3B,CAAY0S,EAAOtP,GACZ9X,KAAKonB,MAAQA,EACbpnB,KAAK+oB,KAAO3B,EAAM0E,IAClB9rB,KAAK+X,MAAQD,EACb9X,KAAK8rC,gBAAkB,GACvB9rC,KAAKmqC,YAAcnqC,KAAK+rC,UACxB/rC,KAAKgsC,MAAQhsC,KAAKmqC,YAAY5nC,KAC9BvC,KAAKsY,QAAUpY,UACdF,KAAKisC,SAAW,MACjBjsC,KAAKksC,MAAQhsC,UACbF,KAAKmsC,YAAcjsC,UACnBF,KAAKosC,eAAiBlsC,UACtBF,KAAKqsC,WAAansC,UAClBF,KAAKssC,WAAapsC,UAClBF,KAAKusC,oBAAsB,MAC3BvsC,KAAKwsC,mBAAqB,MAC1BxsC,KAAKysC,SAAWvsC,UAChBF,KAAK0sC,UAAY,GACjB1sC,KAAK2sC,8BAAgCA,mBACrC3sC,KAAK4sC,2BAA6BA,gBAClC5sC,KAAK6sC,YACb,CACI,UAAAA,GACI,MAAMrsB,EAAOxgB,KAAKmqC,YAClBnqC,KAAK+mC,YACL/mC,KAAK8sC,aACLtsB,EAAKmrB,SAAWzC,GAAU1oB,EAAKsoB,OAAQtoB,GACvCxgB,KAAK+sC,cACL,GAAI/sC,KAAKsY,QAAQ4X,OAASlwB,KAAKonB,MAAM4lB,gBAAgB,UAAW,CAC5D/Y,QAAQC,KAAK,qKACzB,CACA,CACI,WAAA+Y,CAAYn1B,GACR,GAAI9X,KAAK+X,QAAUD,EAAc,CAC7BqzB,GAAYnrC,KAAKmqC,YAC7B,CACQnqC,KAAK+X,MAAQD,CACrB,CACI,UAAAg1B,GACI,MAAM1lB,EAAQpnB,KAAKonB,MACnB,MAAM5G,EAAOxgB,KAAKmqC,YAClB,MAAMY,EAAU/qC,KAAKktC,aACrB,MAAMC,EAAW,CAACnsB,EAAMlZ,EAAGoR,EAAGxT,IAAIsb,IAAS,IAAMlZ,EAAIkZ,IAAS,IAAMtb,EAAIwT,EACxE,MAAMk0B,EAAM5sB,EAAK6sB,QAAU12B,GAAeo0B,EAAQsC,QAASzC,GAAgBxjB,EAAO,MAClF,MAAMkmB,EAAM9sB,EAAK+sB,QAAU52B,GAAeo0B,EAAQwC,QAAS3C,GAAgBxjB,EAAO,MAClF,MAAMomB,EAAMhtB,EAAKitB,QAAU92B,GAAeo0B,EAAQ0C,QAAS7C,GAAgBxjB,EAAO,MAClF,MAAM6E,EAAYzL,EAAKyL,UACvB,MAAMyhB,EAAMltB,EAAKmtB,QAAUR,EAASlhB,EAAWmhB,EAAKE,EAAKE,GACzD,MAAMI,EAAMptB,EAAKqtB,QAAUV,EAASlhB,EAAWqhB,EAAKF,EAAKI,GACzDhtB,EAAKc,OAASthB,KAAK8tC,cAAcV,GACjC5sB,EAAKe,OAASvhB,KAAK8tC,cAAcR,GACjC9sB,EAAKutB,OAAS/tC,KAAK8tC,cAAcN,GACjChtB,EAAKM,OAAS9gB,KAAK8tC,cAAcJ,GACjCltB,EAAKsoB,OAAS9oC,KAAK8tC,cAAcF,EACzC,CACI,UAAAV,GACI,OAAOltC,KAAKonB,MAAMuG,KAAK1C,SAASjrB,KAAK+X,MAC7C,CACI,OAAAg0B,GACI,OAAO/rC,KAAKonB,MAAM4mB,eAAehuC,KAAK+X,MAC9C,CACC,aAAA+1B,CAAcG,GACP,OAAOjuC,KAAKonB,MAAMwF,OAAOqhB,EACjC,CACC,cAAAC,CAAevhB,GACR,MAAMnM,EAAOxgB,KAAKmqC,YAClB,OAAOxd,IAAUnM,EAAKM,OAASN,EAAKsoB,OAAStoB,EAAKM,MAC1D,CACI,KAAAqtB,GACInuC,KAAKgkC,QAAQ,QACrB,CACC,QAAAoK,GACO,MAAM5tB,EAAOxgB,KAAKmqC,YAClB,GAAInqC,KAAKksC,MAAO,CACZ5sB,GAAoBtf,KAAKksC,MAAOlsC,KAC5C,CACQ,GAAIwgB,EAAKmrB,SAAU,CACfR,GAAY3qB,EACxB,CACA,CACC,UAAA6tB,GACO,MAAMtD,EAAU/qC,KAAKktC,aACrB,MAAMvf,EAAOod,EAAQpd,OAASod,EAAQpd,KAAO,IAC7C,MAAMue,EAAQlsC,KAAKksC,MACnB,GAAI71B,GAASsX,GAAO,CAChB,MAAMnN,EAAOxgB,KAAKmqC,YAClBnqC,KAAKksC,MAAQrD,GAAyBlb,EAAMnN,EACxD,MAAe,GAAI0rB,IAAUve,EAAM,CACvB,GAAIue,EAAO,CACP5sB,GAAoB4sB,EAAOlsC,MAC3B,MAAMwgB,EAAOxgB,KAAKmqC,YAClBgB,GAAY3qB,GACZA,EAAKO,QAAU,EAC/B,CACY,GAAI4M,GAAQhb,OAAO27B,aAAa3gB,GAAO,CACnCjP,GAAkBiP,EAAM3tB,KACxC,CACYA,KAAK0sC,UAAY,GACjB1sC,KAAKksC,MAAQve,CACzB,CACA,CACI,WAAAof,GACI,MAAMvsB,EAAOxgB,KAAKmqC,YAClBnqC,KAAKquC,aACL,GAAIruC,KAAK2sC,mBAAoB,CACzBnsB,EAAKuqB,QAAU,IAAI/qC,KAAK2sC,kBACpC,CACA,CACI,qBAAA4B,CAAsBC,GAClB,MAAMhuB,EAAOxgB,KAAKmqC,YAClB,MAAMY,EAAU/qC,KAAKktC,aACrB,IAAIuB,EAAe,MACnBzuC,KAAKquC,aACL,MAAMK,EAAaluB,EAAKmrB,SACxBnrB,EAAKmrB,SAAWzC,GAAU1oB,EAAKsoB,OAAQtoB,GACvC,GAAIA,EAAKgoB,QAAUuC,EAAQvC,MAAO,CAC9BiG,EAAe,KACftD,GAAY3qB,GACZA,EAAKgoB,MAAQuC,EAAQvC,KACjC,CACQxoC,KAAK2uC,gBAAgBH,GACrB,GAAIC,GAAgBC,IAAeluB,EAAKmrB,SAAU,CAC9C3B,GAAahqC,KAAMwgB,EAAKO,SACxBP,EAAKmrB,SAAWzC,GAAU1oB,EAAKsoB,OAAQtoB,EACnD,CACA,CACC,SAAAumB,GACO,MAAMF,EAAS7mC,KAAKonB,MAAMyf,OAC1B,MAAM+H,EAAY/H,EAAOgI,iBAAiB7uC,KAAKgsC,OAC/C,MAAMjX,EAAS8R,EAAOiI,gBAAgB9uC,KAAKktC,aAAc0B,EAAW,MACpE5uC,KAAKsY,QAAUuuB,EAAOkI,eAAeha,EAAQ/0B,KAAKuuB,cAClDvuB,KAAKisC,SAAWjsC,KAAKsY,QAAQkU,QAC7BxsB,KAAK8rC,gBAAkB,EAC/B,CACC,KAAAkD,CAAM3xB,EAAOuD,GACN,MAAQupB,YAAa3pB,EAAO0rB,MAAOve,GAAU3tB,KAC7C,MAAM8gB,OAAEA,EAAM6qB,SAAGA,GAAcnrB,EAC/B,MAAM6pB,EAAQvpB,EAAOE,KACrB,IAAIiuB,EAAS5xB,IAAU,GAAKuD,IAAU+M,EAAK/rB,OAAS,KAAO4e,EAAKK,QAChE,IAAI2a,EAAOne,EAAQ,GAAKmD,EAAKO,QAAQ1D,EAAQ,GAC7C,IAAI1W,EAAG66B,EAAK0I,EACZ,GAAIlqC,KAAKisC,WAAa,MAAO,CACzBzrB,EAAKO,QAAU4M,EACfnN,EAAKK,QAAU,KACfqpB,EAASvc,CACrB,KAAe,CACH,GAAI1mB,GAAQ0mB,EAAKtQ,IAAS,CACtB6sB,EAASlqC,KAAKkvC,eAAe1uB,EAAMmN,EAAMtQ,EAAOuD,EAChE,MAAmB,GAAIvK,GAASsX,EAAKtQ,IAAS,CAC9B6sB,EAASlqC,KAAKmvC,gBAAgB3uB,EAAMmN,EAAMtQ,EAAOuD,EACjE,KAAmB,CACHspB,EAASlqC,KAAKovC,mBAAmB5uB,EAAMmN,EAAMtQ,EAAOuD,EACpE,CACY,MAAMyuB,EAA6B,IAAI7N,EAAI6I,KAAW,MAAQ7O,GAAQgG,EAAI6I,GAAS7O,EAAK6O,GACxF,IAAI1jC,EAAI,EAAGA,EAAIia,IAASja,EAAE,CACtB6Z,EAAKO,QAAQpa,EAAI0W,GAASmkB,EAAM0I,EAAOvjC,GACvC,GAAIsoC,EAAQ,CACR,GAAII,IAA8B,CAC9BJ,EAAS,KACjC,CACoBzT,EAAOgG,CAC3B,CACA,CACYhhB,EAAKK,QAAUouB,CAC3B,CACQ,GAAItD,EAAU,CACV3B,GAAahqC,KAAMkqC,EAC/B,CACA,CACC,kBAAAkF,CAAmB5uB,EAAMmN,EAAMtQ,EAAOuD,GAC/B,MAAME,OAAEA,EAAMgoB,OAAGA,GAAYtoB,EAC7B,MAAM6pB,EAAQvpB,EAAOE,KACrB,MAAMspB,EAAQxB,EAAO9nB,KACrB,MAAMsuB,EAASxuB,EAAOyuB,YACtB,MAAMC,EAAc1uB,IAAWgoB,EAC/B,MAAMoB,EAAS,IAAIljC,MAAM4Z,GACzB,IAAIja,EAAGgR,EAAMI,EACb,IAAIpR,EAAI,EAAGgR,EAAOiJ,EAAOja,EAAIgR,IAAQhR,EAAE,CACnCoR,EAAQpR,EAAI0W,EACZ6sB,EAAOvjC,GAAK,CACR0jC,CAACA,GAAQmF,GAAe1uB,EAAOkuB,MAAMM,EAAOv3B,GAAQA,GACpDuyB,CAACA,GAAQxB,EAAOkG,MAAMrhB,EAAK5V,GAAQA,GAEnD,CACQ,OAAOmyB,CACf,CACC,cAAAgF,CAAe1uB,EAAMmN,EAAMtQ,EAAOuD,GAC3B,MAAMU,OAAEA,EAAMC,OAAGA,GAAYf,EAC7B,MAAM0pB,EAAS,IAAIljC,MAAM4Z,GACzB,IAAIja,EAAGgR,EAAMI,EAAOrX,EACpB,IAAIiG,EAAI,EAAGgR,EAAOiJ,EAAOja,EAAIgR,IAAQhR,EAAE,CACnCoR,EAAQpR,EAAI0W,EACZ3c,EAAOitB,EAAK5V,GACZmyB,EAAOvjC,GAAK,CACRmB,EAAGwZ,EAAO0tB,MAAMtuC,EAAK,GAAIqX,GACzBmB,EAAGqI,EAAOytB,MAAMtuC,EAAK,GAAIqX,GAEzC,CACQ,OAAOmyB,CACf,CACC,eAAAiF,CAAgB3uB,EAAMmN,EAAMtQ,EAAOuD,GAC5B,MAAMU,OAAEA,EAAMC,OAAGA,GAAYf,EAC7B,MAAMivB,SAAEA,EAAU,IAAGC,SAAGA,EAAU,KAAS1vC,KAAKisC,SAChD,MAAM/B,EAAS,IAAIljC,MAAM4Z,GACzB,IAAIja,EAAGgR,EAAMI,EAAOrX,EACpB,IAAIiG,EAAI,EAAGgR,EAAOiJ,EAAOja,EAAIgR,IAAQhR,EAAE,CACnCoR,EAAQpR,EAAI0W,EACZ3c,EAAOitB,EAAK5V,GACZmyB,EAAOvjC,GAAK,CACRmB,EAAGwZ,EAAO0tB,MAAMx1B,GAAiB9Y,EAAM+uC,GAAW13B,GAClDmB,EAAGqI,EAAOytB,MAAMx1B,GAAiB9Y,EAAMgvC,GAAW33B,GAElE,CACQ,OAAOmyB,CACf,CACC,SAAAyF,CAAU53B,GACH,OAAO/X,KAAKmqC,YAAYppB,QAAQhJ,EACxC,CACC,cAAA63B,CAAe73B,GACR,OAAO/X,KAAKmqC,YAAYxc,KAAK5V,EACrC,CACC,UAAAwwB,CAAW5b,EAAOud,EAAQ/d,GACnB,MAAM/E,EAAQpnB,KAAKonB,MACnB,MAAM5G,EAAOxgB,KAAKmqC,YAClB,MAAM3nC,EAAQ0nC,EAAOvd,EAAM3L,MAC3B,MAAMwnB,EAAQ,CACV91B,KAAMy1B,GAAwB/gB,EAAO,MACrCJ,OAAQkjB,EAAOE,QAAQzd,EAAM3L,MAAM2pB,eAEvC,OAAOpC,GAAWC,EAAOhmC,EAAOge,EAAKzI,MAAO,CACxCoU,QAEZ,CACC,qBAAA0jB,CAAsB/oC,EAAO6lB,EAAOud,EAAQ1B,GACrC,MAAMsH,EAAc5F,EAAOvd,EAAM3L,MACjC,IAAIxe,EAAQstC,IAAgB,KAAOC,IAAMD,EACzC,MAAM9oB,EAASwhB,GAAS0B,EAAOE,QAAQzd,EAAM3L,MAC7C,GAAIwnB,GAASxhB,EAAQ,CACjBwhB,EAAMxhB,OAASA,EACfxkB,EAAQ+lC,GAAWC,EAAOsH,EAAa9vC,KAAKmqC,YAAYpyB,MACpE,CACQjR,EAAMxC,IAAMF,KAAKE,IAAIwC,EAAMxC,IAAK9B,GAChCsE,EAAMzC,IAAMD,KAAKC,IAAIyC,EAAMzC,IAAK7B,EACxC,CACC,SAAAwtC,CAAUrjB,EAAO8e,GACV,MAAMjrB,EAAOxgB,KAAKmqC,YAClB,MAAMppB,EAAUP,EAAKO,QACrB,MAAMkuB,EAASzuB,EAAKK,SAAW8L,IAAUnM,EAAKM,OAC9C,MAAMnJ,EAAOoJ,EAAQnf,OACrB,MAAMquC,EAAajwC,KAAKkuC,eAAevhB,GACvC,MAAM6b,EAAQgD,GAAYC,EAAUjrB,EAAMxgB,KAAKonB,OAC/C,MAAMtgB,EAAQ,CACVxC,IAAKiS,OAAO+D,kBACZjW,IAAKkS,OAAOgzB,mBAEhB,MAAQjlC,IAAK4rC,EAAW7rC,IAAK8rC,GAAchvB,GAAc8uB,GACzD,IAAItpC,EAAGujC,EACP,SAASkG,IACLlG,EAASnpB,EAAQpa,GACjB,MAAMgiC,EAAauB,EAAO+F,EAAWjvB,MACrC,OAAQ1K,GAAe4zB,EAAOvd,EAAM3L,QAAUkvB,EAAWvH,GAAcwH,EAAWxH,CAC9F,CACQ,IAAIhiC,EAAI,EAAGA,EAAIgR,IAAQhR,EAAE,CACrB,GAAIypC,IAAS,CACT,QAChB,CACYpwC,KAAK6vC,sBAAsB/oC,EAAO6lB,EAAOud,EAAQ1B,GACjD,GAAIyG,EAAQ,CACR,KAChB,CACA,CACQ,GAAIA,EAAQ,CACR,IAAItoC,EAAIgR,EAAO,EAAGhR,GAAK,IAAKA,EAAE,CAC1B,GAAIypC,IAAS,CACT,QACpB,CACgBpwC,KAAK6vC,sBAAsB/oC,EAAO6lB,EAAOud,EAAQ1B,GACjD,KAChB,CACA,CACQ,OAAO1hC,CACf,CACI,kBAAAupC,CAAmB1jB,GACf,MAAMud,EAASlqC,KAAKmqC,YAAYppB,QAChC,MAAMiG,EAAS,GACf,IAAIrgB,EAAGgR,EAAMnV,EACb,IAAImE,EAAI,EAAGgR,EAAOuyB,EAAOtoC,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3CnE,EAAQ0nC,EAAOvjC,GAAGgmB,EAAM3L,MACxB,GAAI1K,GAAe9T,GAAQ,CACvBwkB,EAAOpjB,KAAKpB,EAC5B,CACA,CACQ,OAAOwkB,CACf,CACC,cAAAspB,GACO,OAAO,KACf,CACC,gBAAAC,CAAiBx4B,GACV,MAAMyI,EAAOxgB,KAAKmqC,YAClB,MAAMrpB,EAASN,EAAKM,OACpB,MAAMgoB,EAAStoB,EAAKsoB,OACpB,MAAMoB,EAASlqC,KAAK2vC,UAAU53B,GAC9B,MAAO,CACHy4B,MAAO1vB,EAAS,GAAKA,EAAO2vB,iBAAiBvG,EAAOppB,EAAOE,OAAS,GACpExe,MAAOsmC,EAAS,GAAKA,EAAO2H,iBAAiBvG,EAAOpB,EAAO9nB,OAAS,GAEhF,CACC,OAAAgjB,CAAQ7X,GACD,MAAM3L,EAAOxgB,KAAKmqC,YAClBnqC,KAAKqmC,OAAOla,GAAQ,WACpB3L,EAAKkwB,MAAQzI,GAAOtxB,GAAe3W,KAAKsY,QAAQiQ,KAAMyf,GAAYxnB,EAAKc,OAAQd,EAAKe,OAAQvhB,KAAKswC,mBACzG,CACC,MAAAjK,CAAOla,GAAM,CACV,IAAAkY,GACI,MAAMvY,EAAM9rB,KAAK+oB,KACjB,MAAM3B,EAAQpnB,KAAKonB,MACnB,MAAM5G,EAAOxgB,KAAKmqC,YAClB,MAAM7e,EAAW9K,EAAKmN,MAAQ,GAC9B,MAAM4C,EAAOnJ,EAAMupB,UACnB,MAAMxrB,EAAS,GACf,MAAM9H,EAAQrd,KAAKqsC,YAAc,EACjC,MAAMzrB,EAAQ5gB,KAAKssC,YAAchhB,EAAS1pB,OAASyb,EACnD,MAAMyP,EAA0B9sB,KAAKsY,QAAQwU,wBAC7C,IAAInmB,EACJ,GAAI6Z,EAAKuqB,QAAS,CACdvqB,EAAKuqB,QAAQ1G,KAAKvY,EAAKyE,EAAMlT,EAAOuD,EAChD,CACQ,IAAIja,EAAI0W,EAAO1W,EAAI0W,EAAQuD,IAASja,EAAE,CAClC,MAAM01B,EAAU/Q,EAAS3kB,GACzB,GAAI01B,EAAQqP,OAAQ,CAChB,QAChB,CACY,GAAIrP,EAAQlX,QAAU2H,EAAyB,CAC3C3H,EAAOvhB,KAAKy4B,EAC5B,KAAmB,CACHA,EAAQgI,KAAKvY,EAAKyE,EAClC,CACA,CACQ,IAAI5pB,EAAI,EAAGA,EAAIwe,EAAOvjB,SAAU+E,EAAE,CAC9Bwe,EAAOxe,GAAG09B,KAAKvY,EAAKyE,EAChC,CACA,CACC,QAAAiM,CAASzkB,EAAOoN,GACT,MAAMgH,EAAOhH,EAAS,SAAW,UACjC,OAAOpN,IAAU7X,WAAaF,KAAKmqC,YAAYY,QAAU/qC,KAAK4wC,6BAA6BzkB,GAAQnsB,KAAK6wC,0BAA0B94B,GAAS,EAAGoU,EACtJ,CACC,UAAAoC,CAAWxW,EAAOoN,EAAQgH,GACnB,MAAM4e,EAAU/qC,KAAKktC,aACrB,IAAI/hB,EACJ,GAAIpT,GAAS,GAAKA,EAAQ/X,KAAKmqC,YAAYxc,KAAK/rB,OAAQ,CACpD,MAAMy6B,EAAUr8B,KAAKmqC,YAAYxc,KAAK5V,GACtCoT,EAAUkR,EAAQoQ,WAAapQ,EAAQoQ,SAAWzB,GAAkBhrC,KAAKuuB,aAAcxW,EAAOskB,IAC9FlR,EAAQ+e,OAASlqC,KAAK2vC,UAAU53B,GAChCoT,EAAQ+f,IAAMH,EAAQpd,KAAK5V,GAC3BoT,EAAQpT,MAAQoT,EAAQ8f,UAAYlzB,CAChD,KAAe,CACHoT,EAAUnrB,KAAKysC,WAAazsC,KAAKysC,SAAW3B,GAAqB9qC,KAAKonB,MAAMmH,aAAcvuB,KAAK+X,QAC/FoT,EAAQ4f,QAAUA,EAClB5f,EAAQpT,MAAQoT,EAAQrT,aAAe9X,KAAK+X,KACxD,CACQoT,EAAQhG,SAAWA,EACnBgG,EAAQgB,KAAOA,EACf,OAAOhB,CACf,CACC,4BAAAylB,CAA6BzkB,GACtB,OAAOnsB,KAAK8wC,uBAAuB9wC,KAAK2sC,mBAAmB/rC,GAAIurB,EACvE,CACC,yBAAA0kB,CAA0B94B,EAAOoU,GAC1B,OAAOnsB,KAAK8wC,uBAAuB9wC,KAAK4sC,gBAAgBhsC,GAAIurB,EAAMpU,EAC1E,CACC,sBAAA+4B,CAAuBC,EAAa5kB,EAAO,UAAWpU,GAC/C,MAAMoN,EAASgH,IAAS,SACxB,MAAMkJ,EAAQr1B,KAAK8rC,gBACnB,MAAMzlB,EAAW0qB,EAAc,IAAM5kB,EACrC,MAAMmf,EAASjW,EAAMhP,GACrB,MAAM2qB,EAAUhxC,KAAKusC,qBAAuB3yB,GAAQ7B,GACpD,GAAIuzB,EAAQ,CACR,OAAOD,GAAiBC,EAAQ0F,EAC5C,CACQ,MAAMnK,EAAS7mC,KAAKonB,MAAMyf,OAC1B,MAAM+H,EAAY/H,EAAOoK,wBAAwBjxC,KAAKgsC,MAAO+E,GAC7D,MAAM/b,EAAW7P,EAAS,CACtB,GAAG4rB,SACH,QACAA,EACA,IACA,CACAA,EACA,IAEJ,MAAMhc,EAAS8R,EAAOiI,gBAAgB9uC,KAAKktC,aAAc0B,GACzD,MAAM37B,EAAQN,OAAOD,KAAK+R,GAAS6G,SAASylB,IAC5C,MAAM5lB,EAAU,IAAInrB,KAAKuuB,WAAWxW,EAAOoN,EAAQgH,GACnD,MAAMnF,EAAS6f,EAAOqK,oBAAoBnc,EAAQ9hB,EAAOkY,EAAS6J,GAClE,GAAIhO,EAAOwgB,QAAS,CAChBxgB,EAAOwgB,QAAUwJ,EACjB3b,EAAMhP,GAAY1T,OAAOw+B,OAAO9F,GAAiBrkB,EAAQgqB,GACrE,CACQ,OAAOhqB,CACf,CACC,kBAAAoqB,CAAmBr5B,EAAOs5B,EAAYlsB,GAC/B,MAAMiC,EAAQpnB,KAAKonB,MACnB,MAAMiO,EAAQr1B,KAAK8rC,gBACnB,MAAMzlB,EAAW,aAAagrB,IAC9B,MAAM/F,EAASjW,EAAMhP,GACrB,GAAIilB,EAAQ,CACR,OAAOA,CACnB,CACQ,IAAIhzB,EACJ,GAAI8O,EAAM9O,QAAQ8M,YAAc,MAAO,CACnC,MAAMyhB,EAAS7mC,KAAKonB,MAAMyf,OAC1B,MAAM+H,EAAY/H,EAAOyK,0BAA0BtxC,KAAKgsC,MAAOqF,GAC/D,MAAMtc,EAAS8R,EAAOiI,gBAAgB9uC,KAAKktC,aAAc0B,GACzDt2B,EAAUuuB,EAAOkI,eAAeha,EAAQ/0B,KAAKuuB,WAAWxW,EAAOoN,EAAQksB,GACnF,CACQ,MAAM9rB,EAAa,IAAIqhB,GAAWxf,EAAO9O,GAAWA,EAAQiN,YAC5D,GAAIjN,GAAWA,EAAQkd,WAAY,CAC/BH,EAAMhP,GAAY1T,OAAOw+B,OAAO5rB,EAC5C,CACQ,OAAOA,CACf,CACC,gBAAAgsB,CAAiBj5B,GACV,IAAKA,EAAQkvB,QAAS,CAClB,MACZ,CACQ,OAAOxnC,KAAKosC,iBAAmBpsC,KAAKosC,eAAiBz5B,OAAOyB,OAAO,GAAIkE,GAC/E,CACC,cAAAk5B,CAAerlB,EAAMslB,GACd,OAAQA,GAAiBrG,GAAmBjf,IAASnsB,KAAKonB,MAAMsqB,mBACxE,CACC,iBAAAC,CAAkBt0B,EAAO8O,GAClB,MAAMylB,EAAY5xC,KAAK6wC,0BAA0BxzB,EAAO8O,GACxD,MAAM0lB,EAA0B7xC,KAAKosC,eACrC,MAAMqF,EAAgBzxC,KAAKuxC,iBAAiBK,GAC5C,MAAMJ,EAAiBxxC,KAAKwxC,eAAerlB,EAAMslB,IAAkBA,IAAkBI,EACrF7xC,KAAK8xC,oBAAoBL,EAAetlB,EAAMylB,GAC9C,MAAO,CACHH,gBACAD,iBAEZ,CACC,aAAAO,CAAc1V,EAAStkB,EAAOmN,EAAYiH,GACnC,GAAIif,GAAmBjf,GAAO,CAC1BxZ,OAAOyB,OAAOioB,EAASnX,EACnC,KAAe,CACHllB,KAAKoxC,mBAAmBr5B,EAAOoU,GAAMka,OAAOhK,EAASnX,EACjE,CACA,CACC,mBAAA4sB,CAAoBL,EAAetlB,EAAMkb,GAClC,GAAIoK,IAAkBrG,GAAmBjf,GAAO,CAC5CnsB,KAAKoxC,mBAAmBlxC,UAAWisB,GAAMka,OAAOoL,EAAepK,EAC3E,CACA,CACC,SAAA2K,CAAU3V,EAAStkB,EAAOoU,EAAMhH,GACzBkX,EAAQlX,OAASA,EACjB,MAAM7M,EAAUtY,KAAKw8B,SAASzkB,EAAOoN,GACrCnlB,KAAKoxC,mBAAmBr5B,EAAOoU,EAAMhH,GAAQkhB,OAAOhK,EAAS,CACzD/jB,SAAU6M,GAAUnlB,KAAKuxC,iBAAiBj5B,IAAYA,GAElE,CACI,gBAAA25B,CAAiB5V,EAASvkB,EAAcC,GACpC/X,KAAKgyC,UAAU3V,EAAStkB,EAAO,SAAU,MACjD,CACI,aAAAm6B,CAAc7V,EAASvkB,EAAcC,GACjC/X,KAAKgyC,UAAU3V,EAAStkB,EAAO,SAAU,KACjD,CACC,wBAAAo6B,GACO,MAAM9V,EAAUr8B,KAAKmqC,YAAYY,QACjC,GAAI1O,EAAS,CACTr8B,KAAKgyC,UAAU3V,EAASn8B,UAAW,SAAU,MACzD,CACA,CACC,qBAAAkyC,GACO,MAAM/V,EAAUr8B,KAAKmqC,YAAYY,QACjC,GAAI1O,EAAS,CACTr8B,KAAKgyC,UAAU3V,EAASn8B,UAAW,SAAU,KACzD,CACA,CACC,eAAAyuC,CAAgBH,GACT,MAAM7gB,EAAO3tB,KAAKksC,MAClB,MAAM5gB,EAAWtrB,KAAKmqC,YAAYxc,KAClC,IAAK,MAAOzO,EAAQmzB,EAAMC,KAAStyC,KAAK0sC,UAAU,CAC9C1sC,KAAKkf,GAAQmzB,EAAMC,EAC/B,CACQtyC,KAAK0sC,UAAY,GACjB,MAAM6F,EAAUjnB,EAAS1pB,OACzB,MAAM4wC,EAAU7kB,EAAK/rB,OACrB,MAAMgf,EAAQxc,KAAKE,IAAIkuC,EAASD,GAChC,GAAI3xB,EAAO,CACP5gB,KAAKgvC,MAAM,EAAGpuB,EAC1B,CACQ,GAAI4xB,EAAUD,EAAS,CACnBvyC,KAAKyyC,gBAAgBF,EAASC,EAAUD,EAAS/D,EAC7D,MAAe,GAAIgE,EAAUD,EAAS,CAC1BvyC,KAAK0yC,gBAAgBF,EAASD,EAAUC,EACpD,CACA,CACC,eAAAC,CAAgBp1B,EAAOuD,EAAO4tB,EAAmB,MAC1C,MAAMhuB,EAAOxgB,KAAKmqC,YAClB,MAAMxc,EAAOnN,EAAKmN,KAClB,MAAMrQ,EAAMD,EAAQuD,EACpB,IAAIja,EACJ,MAAMgsC,EAAQxa,IACVA,EAAIv2B,QAAUgf,EACd,IAAIja,EAAIwxB,EAAIv2B,OAAS,EAAG+E,GAAK2W,EAAK3W,IAAI,CAClCwxB,EAAIxxB,GAAKwxB,EAAIxxB,EAAIia,EACjC,GAEQ+xB,EAAKhlB,GACL,IAAIhnB,EAAI0W,EAAO1W,EAAI2W,IAAO3W,EAAE,CACxBgnB,EAAKhnB,GAAK,IAAI3G,KAAK4sC,eAC/B,CACQ,GAAI5sC,KAAKisC,SAAU,CACf0G,EAAKnyB,EAAKO,QACtB,CACQ/gB,KAAKgvC,MAAM3xB,EAAOuD,GAClB,GAAI4tB,EAAkB,CAClBxuC,KAAK4yC,eAAejlB,EAAMtQ,EAAOuD,EAAO,QACpD,CACA,CACI,cAAAgyB,CAAevW,EAAShf,EAAOuD,EAAOuL,GAAM,CAC/C,eAAAumB,CAAgBr1B,EAAOuD,GAChB,MAAMJ,EAAOxgB,KAAKmqC,YAClB,GAAInqC,KAAKisC,SAAU,CACf,MAAM4G,EAAUryB,EAAKO,QAAQvB,OAAOnC,EAAOuD,GAC3C,GAAIJ,EAAKmrB,SAAU,CACfR,GAAY3qB,EAAMqyB,EAClC,CACA,CACQryB,EAAKmN,KAAKnO,OAAOnC,EAAOuD,EAChC,CACC,KAAAkyB,CAAM57B,GACC,GAAIlX,KAAKisC,SAAU,CACfjsC,KAAK0sC,UAAU9oC,KAAKsT,EAChC,KAAe,CACH,MAAOgI,EAAQmzB,EAAMC,GAAQp7B,EAC7BlX,KAAKkf,GAAQmzB,EAAMC,EAC/B,CACQtyC,KAAKonB,MAAM2rB,aAAanvC,KAAK,CACzB5D,KAAK+X,SACFb,GAEf,CACI,WAAA87B,GACI,MAAMpyB,EAAQqyB,UAAUrxC,OACxB5B,KAAK8yC,MAAM,CACP,kBACA9yC,KAAKktC,aAAavf,KAAK/rB,OAASgf,EAChCA,GAEZ,CACI,UAAAsyB,GACIlzC,KAAK8yC,MAAM,CACP,kBACA9yC,KAAKmqC,YAAYxc,KAAK/rB,OAAS,EAC/B,GAEZ,CACI,YAAAuxC,GACInzC,KAAK8yC,MAAM,CACP,kBACA,EACA,GAEZ,CACI,aAAAM,CAAc/1B,EAAOuD,GACjB,GAAIA,EAAO,CACP5gB,KAAK8yC,MAAM,CACP,kBACAz1B,EACAuD,GAEhB,CACQ,MAAMyyB,EAAWJ,UAAUrxC,OAAS,EACpC,GAAIyxC,EAAU,CACVrzC,KAAK8yC,MAAM,CACP,kBACAz1B,EACAg2B,GAEhB,CACA,CACI,cAAAC,GACItzC,KAAK8yC,MAAM,CACP,kBACA,EACAG,UAAUrxC,QAEtB,EAg4BA,MAAM2xC,WAAuB3H,GACzBC,UAAY,OACfA,gBAAkB,CACXc,mBAAoB,OACpBC,gBAAiB,QACjB/f,SAAU,KACVyO,SAAU,OAEjBuQ,iBAAmB,CACZjf,OAAQ,CACJ4mB,QAAS,CACLjxC,KAAM,YAEVkxC,QAAS,CACLlxC,KAAM,YAIlB,UAAAsqC,GACI7sC,KAAKusC,oBAAsB,KAC3BvsC,KAAKwsC,mBAAqB,KAC1BkH,MAAM7G,YACd,CACI,MAAAxG,CAAOla,GACH,MAAM3L,EAAOxgB,KAAKmqC,YAClB,MAAQY,QAASnZ,EAAOjE,KAAMlN,EAAS,GAAEkzB,SAAGA,GAAcnzB,EAC1D,MAAME,EAAqB1gB,KAAKonB,MAAMsqB,oBACtC,IAAIr0B,MAAEA,EAAKuD,MAAGA,GAAWL,GAAiCC,EAAMC,EAAQC,GACxE1gB,KAAKqsC,WAAahvB,EAClBrd,KAAKssC,WAAa1rB,EAClB,GAAIS,GAAoBb,GAAO,CAC3BnD,EAAQ,EACRuD,EAAQH,EAAO7e,MAC3B,CACQgwB,EAAKsQ,OAASliC,KAAKonB,MACnBwK,EAAKyQ,cAAgBriC,KAAK+X,MAC1B6Z,EAAKgiB,aAAeD,EAASC,WAC7BhiB,EAAKnR,OAASA,EACd,MAAMnI,EAAUtY,KAAK4wC,6BAA6BzkB,GAClD,IAAKnsB,KAAKsY,QAAQuU,SAAU,CACxBvU,EAAQ6X,YAAc,CAClC,CACQ7X,EAAQkoB,QAAUxgC,KAAKsY,QAAQkoB,QAC/BxgC,KAAK+xC,cAAcngB,EAAM1xB,UAAW,CAChC2zC,UAAWnzB,EACXpI,WACD6T,GACHnsB,KAAK4yC,eAAenyB,EAAQpD,EAAOuD,EAAOuL,EAClD,CACI,cAAAymB,CAAenyB,EAAQpD,EAAOuD,EAAOuL,GACjC,MAAMgiB,EAAQhiB,IAAS,QACvB,MAAMrL,OAAEA,EAAMgoB,OAAGA,EAAM6C,SAAGA,EAAQgI,SAAGA,GAAc3zC,KAAKmqC,YACxD,MAAMsH,cAAEA,EAAaD,eAAGA,GAAoBxxC,KAAK2xC,kBAAkBt0B,EAAO8O,GAC1E,MAAMke,EAAQvpB,EAAOE,KACrB,MAAMspB,EAAQxB,EAAO9nB,KACrB,MAAMsa,SAAEA,EAAQkF,QAAGA,GAAaxgC,KAAKsY,QACrC,MAAMw7B,EAAep4B,GAAS4f,GAAYA,EAAW/kB,OAAO+D,kBAC5D,MAAMy5B,EAAe/zC,KAAKonB,MAAMsqB,qBAAuBvD,GAAShiB,IAAS,OACzE,MAAM7O,EAAMD,EAAQuD,EACpB,MAAMozB,EAAcvzB,EAAO7e,OAC3B,IAAIqyC,EAAa52B,EAAQ,GAAKrd,KAAK2vC,UAAUtyB,EAAQ,GACrD,IAAI,IAAI1W,EAAI,EAAGA,EAAIqtC,IAAertC,EAAE,CAChC,MAAM2pB,EAAQ7P,EAAO9Z,GACrB,MAAMue,EAAa6uB,EAAezjB,EAAQ,GAC1C,GAAI3pB,EAAI0W,GAAS1W,GAAK2W,EAAK,CACvB4H,EAAW8T,KAAO,KAClB,QAChB,CACY,MAAMkR,EAASlqC,KAAK2vC,UAAUhpC,GAC9B,MAAMutC,EAAWj+B,GAAci0B,EAAOI,IACtC,MAAM5P,EAASxV,EAAWmlB,GAASvpB,EAAOM,iBAAiB8oB,EAAOG,GAAQ1jC,GAC1E,MAAMg0B,EAASzV,EAAWolB,GAAS6D,GAAS+F,EAAWpL,EAAOqL,eAAiBrL,EAAO1nB,iBAAiBuqB,EAAW3rC,KAAKuoC,WAAWO,EAAQoB,EAAQyB,GAAYzB,EAAOI,GAAQ3jC,GAC7Kue,EAAW8T,KAAOrd,MAAM+e,IAAW/e,MAAMgf,IAAWuZ,EACpDhvB,EAAWuc,KAAO96B,EAAI,GAAKvC,KAAK2W,IAAImvB,EAAOG,GAAS4J,EAAW5J,IAAUyJ,EACzE,GAAItT,EAAS,CACTtb,EAAWglB,OAASA,EACpBhlB,EAAWgmB,IAAMyI,EAAShmB,KAAKhnB,EAC/C,CACY,GAAI6qC,EAAgB,CAChBtsB,EAAW5M,QAAUm5B,GAAiBzxC,KAAK6wC,0BAA0BlqC,EAAG2pB,EAAMnL,OAAS,SAAWgH,EAClH,CACY,IAAK4nB,EAAc,CACf/zC,KAAK+xC,cAAczhB,EAAO3pB,EAAGue,EAAYiH,EACzD,CACY8nB,EAAa/J,CACzB,CACA,CACC,cAAAoG,GACO,MAAM9vB,EAAOxgB,KAAKmqC,YAClB,MAAMY,EAAUvqB,EAAKuqB,QACrB,MAAM9hB,EAAS8hB,EAAQzyB,SAAWyyB,EAAQzyB,QAAQ6X,aAAe,EACjE,MAAMxC,EAAOnN,EAAKmN,MAAQ,GAC1B,IAAKA,EAAK/rB,OAAQ,CACd,OAAOqnB,CACnB,CACQ,MAAMkQ,EAAaxL,EAAK,GAAG5T,KAAK/Z,KAAK6wC,0BAA0B,IAC/D,MAAMuD,EAAYzmB,EAAKA,EAAK/rB,OAAS,GAAGmY,KAAK/Z,KAAK6wC,0BAA0BljB,EAAK/rB,OAAS,IAC1F,OAAOwC,KAAKC,IAAI4kB,EAAQkQ,EAAYib,GAAa,CACzD,CACI,IAAA/P,GACI,MAAM7jB,EAAOxgB,KAAKmqC,YAClB3pB,EAAKuqB,QAAQsJ,oBAAoBr0C,KAAKonB,MAAMupB,UAAWnwB,EAAKM,OAAOE,MACnE0yB,MAAMrP,MACd,EAkdA,SAASiQ,GAAaC,EAASvzB,EAAMxe,EAAO4pB,GACxC,MAAM6d,WAAEA,EAAUtc,KAAGA,EAAI9M,QAAGA,GAAa0zB,EACzC,MAAMzzB,EAASmpB,EAAWE,YAAYrpB,OACtC,GAAIA,GAAUE,IAASF,EAAOE,MAAQA,IAAS,KAAOH,GAAW8M,EAAK/rB,OAAQ,CAC1E,MAAM4yC,EAAe1zB,EAAO2zB,eAAiBj2B,GAAgBH,GAC7D,IAAK+N,EAAW,CACZ,OAAOooB,EAAa7mB,EAAM3M,EAAMxe,EAC5C,MAAe,GAAIynC,EAAWmC,eAAgB,CAClC,MAAM3P,EAAK9O,EAAK,GAChB,MAAM7mB,SAAe21B,EAAGiY,WAAa,YAAcjY,EAAGiY,SAAS1zB,GAC/D,GAAIla,EAAO,CACP,MAAMuW,EAAQm3B,EAAa7mB,EAAM3M,EAAMxe,EAAQsE,GAC/C,MAAMwW,EAAMk3B,EAAa7mB,EAAM3M,EAAMxe,EAAQsE,GAC7C,MAAO,CACHqX,GAAId,EAAMc,GACVD,GAAIZ,EAAIY,GAE5B,CACA,CACA,CACI,MAAO,CACHC,GAAI,EACJD,GAAIyP,EAAK/rB,OAAS,EAE1B,CACC,SAAS+yC,GAAyBvtB,EAAOpG,EAAM4zB,EAAUC,EAASzoB,GAC/D,MAAMic,EAAWjhB,EAAM0tB,+BACvB,MAAMtyC,EAAQoyC,EAAS5zB,GACvB,IAAI,IAAIra,EAAI,EAAGgR,EAAO0wB,EAASzmC,OAAQ+E,EAAIgR,IAAQhR,EAAE,CACjD,MAAMoR,MAAEA,EAAK4V,KAAGA,GAAU0a,EAAS1hC,GACnC,MAAMwX,GAAEA,EAAED,GAAGA,GAAQo2B,GAAajM,EAAS1hC,GAAIqa,EAAMxe,EAAO4pB,GAC5D,IAAI,IAAIvZ,EAAIsL,EAAItL,GAAKqL,IAAMrL,EAAE,CACzB,MAAMwpB,EAAU1O,EAAK9a,GACrB,IAAKwpB,EAAQrD,KAAM,CACf6b,EAAQxY,EAAStkB,EAAOlF,EACxC,CACA,CACA,CACA,CACC,SAASkiC,GAAyB/zB,GAC/B,MAAMg0B,EAAOh0B,EAAK5I,QAAQ,QAAU,EACpC,MAAM68B,EAAOj0B,EAAK5I,QAAQ,QAAU,EACpC,OAAO,SAAS4E,EAAKC,GACjB,MAAMi4B,EAASF,EAAO5wC,KAAK2W,IAAIiC,EAAIlV,EAAImV,EAAInV,GAAK,EAChD,MAAMqtC,EAASF,EAAO7wC,KAAK2W,IAAIiC,EAAI9D,EAAI+D,EAAI/D,GAAK,EAChD,OAAO9U,KAAKoX,KAAKpX,KAAKqP,IAAIyhC,EAAQ,GAAK9wC,KAAKqP,IAAI0hC,EAAQ,GAChE,CACA,CACC,SAASC,GAAkBhuB,EAAOwtB,EAAU5zB,EAAMq0B,EAAkBhpB,GACjE,MAAMjsB,EAAQ,GACd,IAAKisB,IAAqBjF,EAAMkuB,cAAcV,GAAW,CACrD,OAAOx0C,CACf,CACI,MAAMm1C,EAAiB,SAASlZ,EAASvkB,EAAcC,GACnD,IAAKsU,IAAqBgE,GAAegM,EAASjV,EAAMupB,UAAW,GAAI,CACnE,MACZ,CACQ,GAAItU,EAAQmZ,QAAQZ,EAAS9sC,EAAG8sC,EAAS17B,EAAGm8B,GAAmB,CAC3Dj1C,EAAMwD,KAAK,CACPy4B,UACAvkB,eACAC,SAEhB,CACA,EACI48B,GAAyBvtB,EAAOpG,EAAM4zB,EAAUW,EAAgB,MAChE,OAAOn1C,CACX,CACC,SAASq1C,GAAsBruB,EAAOwtB,EAAU5zB,EAAMq0B,GACnD,IAAIj1C,EAAQ,GACZ,SAASm1C,EAAelZ,EAASvkB,EAAcC,GAC3C,MAAM29B,WAAEA,EAAUC,SAAGA,GAActZ,EAAQuZ,SAAS,CAChD,aACA,YACDP,GACH,MAAMz4B,MAAEA,GAAWN,GAAkB+f,EAAS,CAC1Cv0B,EAAG8sC,EAAS9sC,EACZoR,EAAG07B,EAAS17B,IAEhB,GAAIkE,GAAcR,EAAO84B,EAAYC,GAAW,CAC5Cv1C,EAAMwD,KAAK,CACPy4B,UACAvkB,eACAC,SAEhB,CACA,CACI48B,GAAyBvtB,EAAOpG,EAAM4zB,EAAUW,GAChD,OAAOn1C,CACX,CACC,SAASy1C,GAAyBzuB,EAAOwtB,EAAU5zB,EAAMoL,EAAWipB,EAAkBhpB,GACnF,IAAIjsB,EAAQ,GACZ,MAAM01C,EAAiBf,GAAyB/zB,GAChD,IAAI+0B,EAAcx/B,OAAO+D,kBACzB,SAASi7B,EAAelZ,EAASvkB,EAAcC,GAC3C,MAAMy9B,EAAUnZ,EAAQmZ,QAAQZ,EAAS9sC,EAAG8sC,EAAS17B,EAAGm8B,GACxD,GAAIjpB,IAAcopB,EAAS,CACvB,MACZ,CACQ,MAAMQ,EAAS3Z,EAAQ4Z,eAAeZ,GACtC,MAAMa,IAAgB7pB,GAAoBjF,EAAMkuB,cAAcU,GAC9D,IAAKE,IAAgBV,EAAS,CAC1B,MACZ,CACQ,MAAM14B,EAAWg5B,EAAelB,EAAUoB,GAC1C,GAAIl5B,EAAWi5B,EAAa,CACxB31C,EAAQ,CACJ,CACIi8B,UACAvkB,eACAC,UAGRg+B,EAAcj5B,CAC1B,MAAe,GAAIA,IAAai5B,EAAa,CACjC31C,EAAMwD,KAAK,CACPy4B,UACAvkB,eACAC,SAEhB,CACA,CACI48B,GAAyBvtB,EAAOpG,EAAM4zB,EAAUW,GAChD,OAAOn1C,CACX,CACC,SAAS+1C,GAAgB/uB,EAAOwtB,EAAU5zB,EAAMoL,EAAWipB,EAAkBhpB,GAC1E,IAAKA,IAAqBjF,EAAMkuB,cAAcV,GAAW,CACrD,MAAO,EACf,CACI,OAAO5zB,IAAS,MAAQoL,EAAYqpB,GAAsBruB,EAAOwtB,EAAU5zB,EAAMq0B,GAAoBQ,GAAyBzuB,EAAOwtB,EAAU5zB,EAAMoL,EAAWipB,EAAkBhpB,EACtL,CACC,SAAS+pB,GAAahvB,EAAOwtB,EAAU5zB,EAAMoL,EAAWipB,GACrD,MAAMj1C,EAAQ,GACd,MAAMi2C,EAAcr1B,IAAS,IAAM,WAAa,WAChD,IAAIs1B,EAAiB,MACrB3B,GAAyBvtB,EAAOpG,EAAM4zB,GAAU,CAACvY,EAASvkB,EAAcC,KACpE,GAAIskB,EAAQga,IAAgBha,EAAQga,GAAazB,EAAS5zB,GAAOq0B,GAAmB,CAChFj1C,EAAMwD,KAAK,CACPy4B,UACAvkB,eACAC,UAEJu+B,EAAiBA,GAAkBja,EAAQmZ,QAAQZ,EAAS9sC,EAAG8sC,EAAS17B,EAAGm8B,EACvF,KAEI,GAAIjpB,IAAckqB,EAAgB,CAC9B,MAAO,EACf,CACI,OAAOl2C,CACX,CACC,IAAIm2C,GAAc,CACf5B,4BACA6B,MAAO,CACV,KAAAz+B,CAAOqP,EAAOzkB,EAAG2V,EAAS+8B,GACf,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,MAAMpG,EAAO1I,EAAQ0I,MAAQ,IAC7B,MAAMqL,EAAmB/T,EAAQ+T,kBAAoB,MACrD,MAAMjsB,EAAQkY,EAAQ8T,UAAYgpB,GAAkBhuB,EAAOwtB,EAAU5zB,EAAMq0B,EAAkBhpB,GAAoB8pB,GAAgB/uB,EAAOwtB,EAAU5zB,EAAM,MAAOq0B,EAAkBhpB,GACjL,MAAMf,EAAW,GACjB,IAAKlrB,EAAMwB,OAAQ,CACf,MAAO,EACvB,CACYwlB,EAAM0tB,+BAA+B71B,SAASuB,IAC1C,MAAMzI,EAAQ3X,EAAM,GAAG2X,MACvB,MAAMskB,EAAU7b,EAAKmN,KAAK5V,GAC1B,GAAIskB,IAAYA,EAAQrD,KAAM,CAC1B1N,EAAS1nB,KAAK,CACVy4B,UACAvkB,aAAc0I,EAAKzI,MACnBA,SAExB,KAEY,OAAOuT,CACnB,EACC,OAAAyf,CAAS3jB,EAAOzkB,EAAG2V,EAAS+8B,GACjB,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,MAAMpG,EAAO1I,EAAQ0I,MAAQ,KAC7B,MAAMqL,EAAmB/T,EAAQ+T,kBAAoB,MACrD,IAAIjsB,EAAQkY,EAAQ8T,UAAYgpB,GAAkBhuB,EAAOwtB,EAAU5zB,EAAMq0B,EAAkBhpB,GAAoB8pB,GAAgB/uB,EAAOwtB,EAAU5zB,EAAM,MAAOq0B,EAAkBhpB,GAC/K,GAAIjsB,EAAMwB,OAAS,EAAG,CAClB,MAAMkW,EAAe1X,EAAM,GAAG0X,aAC9B,MAAM6V,EAAOvG,EAAM4mB,eAAel2B,GAAc6V,KAChDvtB,EAAQ,GACR,IAAI,IAAIuG,EAAI,EAAGA,EAAIgnB,EAAK/rB,SAAU+E,EAAE,CAChCvG,EAAMwD,KAAK,CACPy4B,QAAS1O,EAAKhnB,GACdmR,eACAC,MAAOpR,GAE/B,CACA,CACY,OAAOvG,CACnB,EACC,KAAAkwB,CAAOlJ,EAAOzkB,EAAG2V,EAAS+8B,GACf,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,MAAMpG,EAAO1I,EAAQ0I,MAAQ,KAC7B,MAAMqL,EAAmB/T,EAAQ+T,kBAAoB,MACrD,OAAO+oB,GAAkBhuB,EAAOwtB,EAAU5zB,EAAMq0B,EAAkBhpB,EAC9E,EACC,OAAAoqB,CAASrvB,EAAOzkB,EAAG2V,EAAS+8B,GACjB,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,MAAMpG,EAAO1I,EAAQ0I,MAAQ,KAC7B,MAAMqL,EAAmB/T,EAAQ+T,kBAAoB,MACrD,OAAO8pB,GAAgB/uB,EAAOwtB,EAAU5zB,EAAM1I,EAAQ8T,UAAWipB,EAAkBhpB,EAC/F,EACC,CAAAvkB,CAAGsf,EAAOzkB,EAAG2V,EAAS+8B,GACX,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,OAAOgvB,GAAahvB,EAAOwtB,EAAU,IAAKt8B,EAAQ8T,UAAWipB,EACzE,EACC,CAAAn8B,CAAGkO,EAAOzkB,EAAG2V,EAAS+8B,GACX,MAAMT,EAAWlX,GAAoB/6B,EAAGykB,GACxC,OAAOgvB,GAAahvB,EAAOwtB,EAAU,IAAKt8B,EAAQ8T,UAAWipB,EACzE,IAIA,MAAMqB,GAAmB,CACrB,OACA,MACA,QACA,UAEJ,SAASC,GAAiB56B,EAAO64B,GAC7B,OAAO74B,EAAM7Y,QAAQe,GAAIA,EAAE84B,MAAQ6X,GACvC,CACA,SAASgC,GAA4B76B,EAAOiF,GACxC,OAAOjF,EAAM7Y,QAAQe,GAAIyyC,GAAiBt+B,QAAQnU,EAAE84B,QAAU,GAAK94B,EAAEq5B,IAAItc,OAASA,GACtF,CACA,SAAS61B,GAAa96B,EAAOxE,GACzB,OAAOwE,EAAM1a,MAAK,CAACC,EAAGC,KAClB,MAAMqW,EAAKL,EAAUhW,EAAID,EACzB,MAAMuW,EAAKN,EAAUjW,EAAIC,EACzB,OAAOqW,EAAG3C,SAAW4C,EAAG5C,OAAS2C,EAAGG,MAAQF,EAAGE,MAAQH,EAAG3C,OAAS4C,EAAG5C,MAAM,GAEpF,CACA,SAAS6hC,GAAUC,GACf,MAAMC,EAAc,GACpB,IAAIrwC,EAAGgR,EAAM2lB,EAAKP,EAAKyL,EAAOyO,EAC9B,IAAItwC,EAAI,EAAGgR,GAAQo/B,GAAS,IAAIn1C,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAClD22B,EAAMyZ,EAAMpwC,KACTiuC,SAAU7X,EAAMzkB,SAAWkwB,QAAQyO,cAAa,IAAU3Z,GAC7D0Z,EAAYpzC,KAAK,CACbmU,MAAOpR,EACP22B,MACAP,MACAma,WAAY5Z,EAAI6Z,eAChBliC,OAAQqoB,EAAIroB,OACZuzB,MAAOA,GAASzL,EAAMyL,EACtByO,eAEZ,CACI,OAAOD,CACX,CACA,SAASI,GAAYC,GACjB,MAAM5N,EAAS,GACf,IAAK,MAAM6N,KAAQD,EAAQ,CACvB,MAAM7O,MAAEA,EAAKzL,IAAGA,EAAGka,YAAGA,GAAiBK,EACvC,IAAK9O,IAAUkO,GAAiB1uB,SAAS+U,GAAM,CAC3C,QACZ,CACQ,MAAMhG,EAAS0S,EAAOjB,KAAWiB,EAAOjB,GAAS,CAC7C5nB,MAAO,EACP22B,OAAQ,EACRtiC,OAAQ,EACR8E,KAAM,IAEVgd,EAAOnW,QACPmW,EAAO9hB,QAAUgiC,CACzB,CACI,OAAOxN,CACX,CACC,SAAS+N,GAAcH,EAASI,GAC7B,MAAMhO,EAAS2N,GAAYC,GAC3B,MAAMK,aAAEA,EAAYC,cAAGA,GAAmBF,EAC1C,IAAI9wC,EAAGgR,EAAMigC,EACb,IAAIjxC,EAAI,EAAGgR,EAAO0/B,EAAQz1C,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC5CixC,EAASP,EAAQ1wC,GACjB,MAAMkxC,SAAEA,GAAcD,EAAOta,IAC7B,MAAMkL,EAAQiB,EAAOmO,EAAOpP,OAC5B,MAAMjD,EAASiD,GAASoP,EAAOX,YAAczO,EAAMvzB,OACnD,GAAI2iC,EAAOV,WAAY,CACnBU,EAAOxuB,MAAQmc,EAASA,EAASmS,EAAeG,GAAYJ,EAAOK,eACnEF,EAAOjpB,OAASgpB,CAC5B,KAAe,CACHC,EAAOxuB,MAAQsuB,EACfE,EAAOjpB,OAAS4W,EAASA,EAASoS,EAAgBE,GAAYJ,EAAOM,eACjF,CACA,CACI,OAAOtO,CACX,CACA,SAASuO,GAAiBjB,GACtB,MAAMC,EAAcF,GAAUC,GAC9B,MAAMc,EAAWhB,GAAaG,EAAY9zC,QAAQo0C,GAAOA,EAAKha,IAAIua,WAAW,MAC7E,MAAM7xB,EAAO6wB,GAAaF,GAAiBK,EAAa,QAAS,MACjE,MAAMlxB,EAAQ+wB,GAAaF,GAAiBK,EAAa,UACzD,MAAMnxB,EAAMgxB,GAAaF,GAAiBK,EAAa,OAAQ,MAC/D,MAAMjxB,EAAS8wB,GAAaF,GAAiBK,EAAa,WAC1D,MAAMiB,EAAmBrB,GAA4BI,EAAa,KAClE,MAAMkB,EAAiBtB,GAA4BI,EAAa,KAChE,MAAO,CACHa,WACAM,WAAYnyB,EAAKoyB,OAAOvyB,GACxBwyB,eAAgBvyB,EAAMsyB,OAAOF,GAAgBE,OAAOryB,GAAQqyB,OAAOH,GACnEtH,UAAWgG,GAAiBK,EAAa,aACzCsB,SAAUtyB,EAAKoyB,OAAOtyB,GAAOsyB,OAAOF,GACpChB,WAAYrxB,EAAIuyB,OAAOryB,GAAQqyB,OAAOH,GAE9C,CACA,SAASM,GAAeC,EAAY7H,EAAWrvC,EAAGC,GAC9C,OAAO6C,KAAKC,IAAIm0C,EAAWl3C,GAAIqvC,EAAUrvC,IAAM8C,KAAKC,IAAIm0C,EAAWj3C,GAAIovC,EAAUpvC,GACrF,CACA,SAASk3C,GAAiBD,EAAYE,GAClCF,EAAW3yB,IAAMzhB,KAAKC,IAAIm0C,EAAW3yB,IAAK6yB,EAAW7yB,KACrD2yB,EAAWxyB,KAAO5hB,KAAKC,IAAIm0C,EAAWxyB,KAAM0yB,EAAW1yB,MACvDwyB,EAAWzyB,OAAS3hB,KAAKC,IAAIm0C,EAAWzyB,OAAQ2yB,EAAW3yB,QAC3DyyB,EAAW1yB,MAAQ1hB,KAAKC,IAAIm0C,EAAW1yB,MAAO4yB,EAAW5yB,MAC7D,CACA,SAAS6yB,GAAWhI,EAAW8G,EAAQG,EAAQnO,GAC3C,MAAM1M,IAAEA,EAAGO,IAAGA,GAASsa,EACvB,MAAMY,EAAa7H,EAAU6H,WAC7B,IAAKniC,GAAS0mB,GAAM,CAChB,GAAI6a,EAAO79B,KAAM,CACb42B,EAAU5T,IAAQ6a,EAAO79B,IACrC,CACQ,MAAMyuB,EAAQiB,EAAOmO,EAAOpP,QAAU,CAClCzuB,KAAM,EACN6G,MAAO,GAEX4nB,EAAMzuB,KAAO3V,KAAKC,IAAImkC,EAAMzuB,KAAM69B,EAAOV,WAAa5Z,EAAI3O,OAAS2O,EAAIlU,OACvEwuB,EAAO79B,KAAOyuB,EAAMzuB,KAAOyuB,EAAM5nB,MACjC+vB,EAAU5T,IAAQ6a,EAAO79B,IACjC,CACI,GAAIujB,EAAIsb,WAAY,CAChBH,GAAiBD,EAAYlb,EAAIsb,aACzC,CACI,MAAMC,EAAWz0C,KAAKC,IAAI,EAAGozC,EAAOqB,WAAaP,GAAeC,EAAY7H,EAAW,OAAQ,UAC/F,MAAMoI,EAAY30C,KAAKC,IAAI,EAAGozC,EAAOuB,YAAcT,GAAeC,EAAY7H,EAAW,MAAO,WAChG,MAAMsI,EAAeJ,IAAalI,EAAUlqC,EAC5C,MAAMyyC,EAAgBH,IAAcpI,EAAUvuC,EAC9CuuC,EAAUlqC,EAAIoyC,EACdlI,EAAUvuC,EAAI22C,EACd,OAAOnB,EAAOV,WAAa,CACvBiC,KAAMF,EACNG,MAAOF,GACP,CACAC,KAAMD,EACNE,MAAOH,EAEf,CACA,SAASI,GAAiB1I,GACtB,MAAM6H,EAAa7H,EAAU6H,WAC7B,SAASc,EAAUvc,GACf,MAAMtI,EAASrwB,KAAKC,IAAIm0C,EAAWzb,GAAO4T,EAAU5T,GAAM,GAC1D4T,EAAU5T,IAAQtI,EAClB,OAAOA,CACf,CACIkc,EAAUz3B,GAAKogC,EAAU,OACzB3I,EAAU7oC,GAAKwxC,EAAU,QACzBA,EAAU,SACVA,EAAU,SACd,CACA,SAASC,GAAWrC,EAAYvG,GAC5B,MAAM6H,EAAa7H,EAAU6H,WAC7B,SAASgB,EAAmB7c,GACxB,MAAMnM,EAAS,CACXxK,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GAEZ4W,EAAU1d,SAAS8d,IACfvM,EAAOuM,GAAO34B,KAAKC,IAAIssC,EAAU5T,GAAMyb,EAAWzb,GAAK,IAE3D,OAAOvM,CACf,CACI,OAAO0mB,EAAasC,EAAmB,CACnC,OACA,UACCA,EAAmB,CACpB,MACA,UAER,CACA,SAASC,GAAS1C,EAAOpG,EAAW8G,EAAQhO,GACxC,MAAMiQ,EAAa,GACnB,IAAI/yC,EAAGgR,EAAMigC,EAAQta,EAAKqc,EAAO73B,EACjC,IAAInb,EAAI,EAAGgR,EAAOo/B,EAAMn1C,OAAQ+3C,EAAQ,EAAGhzC,EAAIgR,IAAQhR,EAAE,CACrDixC,EAASb,EAAMpwC,GACf22B,EAAMsa,EAAOta,IACbA,EAAI+I,OAAOuR,EAAOxuB,OAASunB,EAAUlqC,EAAGmxC,EAAOjpB,QAAUgiB,EAAUvuC,EAAGm3C,GAAW3B,EAAOV,WAAYvG,IACpG,MAAMwI,KAAEA,EAAIC,MAAGA,GAAWT,GAAWhI,EAAW8G,EAAQG,EAAQnO,GAChEkQ,GAASR,GAAQO,EAAW93C,OAC5BkgB,EAAUA,GAAWs3B,EACrB,IAAK9b,EAAIua,SAAU,CACf6B,EAAW91C,KAAKg0C,EAC5B,CACA,CACI,OAAO+B,GAASF,GAASC,EAAY/I,EAAW8G,EAAQhO,IAAW3nB,CACvE,CACA,SAAS83B,GAAWtc,EAAKtX,EAAMH,EAAKuD,EAAOuF,GACvC2O,EAAIzX,IAAMA,EACVyX,EAAItX,KAAOA,EACXsX,EAAIxX,MAAQE,EAAOoD,EACnBkU,EAAIvX,OAASF,EAAM8I,EACnB2O,EAAIlU,MAAQA,EACZkU,EAAI3O,OAASA,CACjB,CACA,SAASkrB,GAAW9C,EAAOpG,EAAW8G,EAAQhO,GAC1C,MAAMqQ,EAAcrC,EAAO7xB,QAC3B,IAAI9d,EAAEA,EAACoR,EAAGA,GAAOy3B,EACjB,IAAK,MAAMiH,KAAUb,EAAM,CACvB,MAAMzZ,EAAMsa,EAAOta,IACnB,MAAMkL,EAAQiB,EAAOmO,EAAOpP,QAAU,CAClC5nB,MAAO,EACP22B,OAAQ,EACRtiC,OAAQ,GAEZ,MAAMA,EAAS2iC,EAAOX,YAAczO,EAAMvzB,QAAU,EACpD,GAAI2iC,EAAOV,WAAY,CACnB,MAAM9tB,EAAQunB,EAAUlqC,EAAIwO,EAC5B,MAAM0Z,EAAS6Z,EAAMzuB,MAAQujB,EAAI3O,OACjC,GAAI/U,GAAQ4uB,EAAMnrB,OAAQ,CACtBnE,EAAIsvB,EAAMnrB,KAC1B,CACY,GAAIigB,EAAIua,SAAU,CACd+B,GAAWtc,EAAKwc,EAAY9zB,KAAM9M,EAAGu+B,EAAOqB,WAAagB,EAAYh0B,MAAQg0B,EAAY9zB,KAAM2I,EAC/G,KAAmB,CACHirB,GAAWtc,EAAKqT,EAAU3qB,KAAOwiB,EAAM+O,OAAQr+B,EAAGkQ,EAAOuF,EACzE,CACY6Z,EAAMnrB,MAAQnE,EACdsvB,EAAM+O,QAAUnuB,EAChBlQ,EAAIokB,EAAIvX,MACpB,KAAe,CACH,MAAM4I,EAASgiB,EAAUvuC,EAAI6S,EAC7B,MAAMmU,EAAQof,EAAMzuB,MAAQujB,EAAIlU,MAChC,GAAIxP,GAAQ4uB,EAAMnrB,OAAQ,CACtBvV,EAAI0gC,EAAMnrB,KAC1B,CACY,GAAIigB,EAAIua,SAAU,CACd+B,GAAWtc,EAAKx1B,EAAGgyC,EAAYj0B,IAAKuD,EAAOquB,EAAOuB,YAAcc,EAAY/zB,OAAS+zB,EAAYj0B,IACjH,KAAmB,CACH+zB,GAAWtc,EAAKx1B,EAAG6oC,EAAU9qB,IAAM2iB,EAAM+O,OAAQnuB,EAAOuF,EACxE,CACY6Z,EAAMnrB,MAAQvV,EACd0gC,EAAM+O,QAAU5oB,EAChB7mB,EAAIw1B,EAAIxX,KACpB,CACA,CACI6qB,EAAU7oC,EAAIA,EACd6oC,EAAUz3B,EAAIA,CAClB,CACA,IAAIm+B,GAAU,CACb,MAAA0C,CAAQ3yB,EAAO1mB,GACR,IAAK0mB,EAAM2vB,MAAO,CACd3vB,EAAM2vB,MAAQ,EAC1B,CACQr2C,EAAKm3C,SAAWn3C,EAAKm3C,UAAY,MACjCn3C,EAAKk0C,SAAWl0C,EAAKk0C,UAAY,MACjCl0C,EAAKuU,OAASvU,EAAKuU,QAAU,EAC7BvU,EAAKs5C,QAAUt5C,EAAKs5C,SAAW,WAC3B,MAAO,CACH,CACIC,EAAG,EACH,IAAA5V,CAAMsM,GACFjwC,EAAK2jC,KAAKsM,EAClC,GAGA,EACQvpB,EAAM2vB,MAAMnzC,KAAKlD,EACzB,EACC,SAAAw5C,CAAW9yB,EAAO+yB,GACX,MAAMpiC,EAAQqP,EAAM2vB,MAAQ3vB,EAAM2vB,MAAM3+B,QAAQ+hC,IAAe,EAC/D,GAAIpiC,KAAW,EAAG,CACdqP,EAAM2vB,MAAMv3B,OAAOzH,EAAO,EACtC,CACA,EACC,SAAAgvB,CAAW3f,EAAO1mB,EAAM4X,GACjB5X,EAAKm3C,SAAWv/B,EAAQu/B,SACxBn3C,EAAKk0C,SAAWt8B,EAAQs8B,SACxBl0C,EAAKuU,OAASqD,EAAQrD,MAC9B,EACC,MAAAoxB,CAAQjf,EAAOgC,EAAOuF,EAAQyrB,GACvB,IAAKhzB,EAAO,CACR,MACZ,CACQ,MAAMxB,EAAUkO,GAAU1M,EAAM9O,QAAQs/B,OAAOhyB,SAC/C,MAAMkyB,EAAiB1zC,KAAKC,IAAI+kB,EAAQxD,EAAQwD,MAAO,GACvD,MAAM2uB,EAAkB3zC,KAAKC,IAAIsqB,EAAS/I,EAAQ+I,OAAQ,GAC1D,MAAMooB,EAAQiB,GAAiB5wB,EAAM2vB,OACrC,MAAMsD,EAAgBtD,EAAMuB,SAC5B,MAAMgC,EAAkBvD,EAAMG,WAC9B7/B,GAAK+P,EAAM2vB,OAAQzZ,IACf,UAAWA,EAAIid,eAAiB,WAAY,CACxCjd,EAAIid,cACpB,KAEQ,MAAMC,EAA0BH,EAActV,QAAO,CAAC0V,EAAOnD,IAAOA,EAAKha,IAAIhlB,SAAWg/B,EAAKha,IAAIhlB,QAAQ6P,UAAY,MAAQsyB,EAAQA,EAAQ,GAAG,IAAM,EACtJ,MAAMhD,EAAS9kC,OAAOw+B,OAAO,CACzB2H,WAAY1vB,EACZ4vB,YAAarqB,EACb/I,UACAkyB,iBACAC,kBACAL,aAAcI,EAAiB,EAAI0C,EACnC7C,cAAeI,EAAkB,IAErC,MAAMS,EAAa7lC,OAAOyB,OAAO,GAAIwR,GACrC6yB,GAAiBD,EAAY1kB,GAAUsmB,IACvC,MAAMzJ,EAAYh+B,OAAOyB,OAAO,CAC5BokC,aACA/xC,EAAGqxC,EACH11C,EAAG21C,EACHjwC,EAAG8d,EAAQI,KACX9M,EAAG0M,EAAQC,KACZD,GACH,MAAM6jB,EAAS+N,GAAc6C,EAAcjC,OAAOkC,GAAkB7C,GACpEgC,GAAS1C,EAAMc,SAAUlH,EAAW8G,EAAQhO,GAC5CgQ,GAASY,EAAe1J,EAAW8G,EAAQhO,GAC3C,GAAIgQ,GAASa,EAAiB3J,EAAW8G,EAAQhO,GAAS,CACtDgQ,GAASY,EAAe1J,EAAW8G,EAAQhO,EACvD,CACQ4P,GAAiB1I,GACjBkJ,GAAW9C,EAAMoB,WAAYxH,EAAW8G,EAAQhO,GAChDkH,EAAU7oC,GAAK6oC,EAAUlqC,EACzBkqC,EAAUz3B,GAAKy3B,EAAUvuC,EACzBy3C,GAAW9C,EAAMsB,eAAgB1H,EAAW8G,EAAQhO,GACpDriB,EAAMupB,UAAY,CACd3qB,KAAM2qB,EAAU3qB,KAChBH,IAAK8qB,EAAU9qB,IACfC,MAAO6qB,EAAU3qB,KAAO2qB,EAAUlqC,EAClCsf,OAAQ4qB,EAAU9qB,IAAM8qB,EAAUvuC,EAClCusB,OAAQgiB,EAAUvuC,EAClBgnB,MAAOunB,EAAUlqC,GAErB4Q,GAAK0/B,EAAMpG,WAAYiH,IACnB,MAAMta,EAAMsa,EAAOta,IACnB3qB,OAAOyB,OAAOkpB,EAAKlW,EAAMupB,WACzBrT,EAAI+I,OAAOsK,EAAUlqC,EAAGkqC,EAAUvuC,EAAG,CACjC4jB,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GACV,GAEd,GAGA,MAAM20B,GACL,cAAAC,CAAersB,EAAQsQ,GAAa,CACpC,cAAAgc,CAAezvB,GACR,OAAO,KACf,CACC,gBAAAuU,CAAiBtY,EAAO7kB,EAAMoc,GAAU,CACxC,mBAAAghB,CAAoBvY,EAAO7kB,EAAMoc,GAAU,CAC3C,mBAAA0M,GACO,OAAO,CACf,CACC,cAAAoT,CAAepC,EAASjT,EAAOuF,EAAQiQ,GAChCxV,EAAQhlB,KAAKC,IAAI,EAAG+kB,GAASiT,EAAQjT,OACrCuF,EAASA,GAAU0N,EAAQ1N,OAC3B,MAAO,CACHvF,QACAuF,OAAQvqB,KAAKC,IAAI,EAAGu6B,EAAcx6B,KAAK+W,MAAMiO,EAAQwV,GAAejQ,GAEhF,CACC,UAAAksB,CAAWvsB,GACJ,OAAO,IACf,CACC,YAAAwsB,CAAajU,GACd,EAGA,MAAMkU,WAAsBL,GACxB,cAAAC,CAAej6C,GACX,OAAOA,GAAQA,EAAK6tB,YAAc7tB,EAAK6tB,WAAW,OAAS,IACnE,CACI,YAAAusB,CAAajU,GACTA,EAAOvuB,QAAQ8M,UAAY,KACnC,EAGA,MAAM41B,GAAc,WACnB,MAAMC,GAAc,CACjBC,WAAY,YACZC,UAAW,YACXC,SAAU,UACVC,aAAc,aACdC,YAAa,YACbC,YAAa,YACbC,UAAW,UACXC,aAAc,WACdC,WAAY,YAEhB,MAAMC,GAAiBn5C,GAAQA,IAAU,MAAQA,IAAU,GAC1D,SAASo5C,GAAWttB,EAAQsQ,GACzB,MAAMlT,EAAQ4C,EAAO5C,MACrB,MAAMmwB,EAAevtB,EAAOwtB,aAAa,UACzC,MAAMC,EAAcztB,EAAOwtB,aAAa,SACxCxtB,EAAO0sB,IAAe,CAClBnX,QAAS,CACLlV,OAAQktB,EACRzyB,MAAO2yB,EACPrwB,MAAO,CACHvD,QAASuD,EAAMvD,QACfwG,OAAQjD,EAAMiD,OACdvF,MAAOsC,EAAMtC,SAIzBsC,EAAMvD,QAAUuD,EAAMvD,SAAW,QACjCuD,EAAMmS,UAAYnS,EAAMmS,WAAa,aACrC,GAAI8d,GAAcI,GAAc,CAC5B,MAAMC,EAAepc,GAAatR,EAAQ,SAC1C,GAAI0tB,IAAiB97C,UAAW,CAC5BouB,EAAOlF,MAAQ4yB,CAC3B,CACA,CACI,GAAIL,GAAcE,GAAe,CAC7B,GAAIvtB,EAAO5C,MAAMiD,SAAW,GAAI,CAC5BL,EAAOK,OAASL,EAAOlF,OAASwV,GAAe,EAC3D,KAAe,CACH,MAAMqd,EAAgBrc,GAAatR,EAAQ,UAC3C,GAAI2tB,IAAkB/7C,UAAW,CAC7BouB,EAAOK,OAASstB,CAChC,CACA,CACA,CACI,OAAO3tB,CACX,CACA,MAAM4tB,GAAuB3c,GAA+B,CACxDE,QAAS,MACT,MACJ,SAAS0c,GAAY1xB,EAAMloB,EAAMoc,GAC7B,GAAI8L,EAAM,CACNA,EAAKiV,iBAAiBn9B,EAAMoc,EAAUu9B,GAC9C,CACA,CACA,SAASE,GAAeh1B,EAAO7kB,EAAMoc,GACjC,GAAIyI,GAASA,EAAMkH,OAAQ,CACvBlH,EAAMkH,OAAOqR,oBAAoBp9B,EAAMoc,EAAUu9B,GACzD,CACA,CACA,SAASG,GAAgB1e,EAAOvW,GAC5B,MAAM7kB,EAAO04C,GAAYtd,EAAMp7B,OAASo7B,EAAMp7B,KAC9C,MAAMuF,EAAEA,EAACoR,EAAGA,GAAOwkB,GAAoBC,EAAOvW,GAC9C,MAAO,CACH7kB,OACA6kB,QACAk1B,OAAQ3e,EACR71B,EAAGA,IAAM5H,UAAY4H,EAAI,KACzBoR,EAAGA,IAAMhZ,UAAYgZ,EAAI,KAEjC,CACA,SAASqjC,GAAiBC,EAAUluB,GAChC,IAAK,MAAM7D,KAAQ+xB,EAAS,CACxB,GAAI/xB,IAAS6D,GAAU7D,EAAKgyB,SAASnuB,GAAS,CAC1C,OAAO,IACnB,CACA,CACA,CACA,SAASouB,GAAqBt1B,EAAO7kB,EAAMoc,GACvC,MAAM2P,EAASlH,EAAMkH,OACrB,MAAMquB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,EAAU,MACd,IAAK,MAAMC,KAASF,EAAQ,CACxBC,EAAUA,GAAWP,GAAiBQ,EAAMC,WAAY1uB,GACxDwuB,EAAUA,IAAYP,GAAiBQ,EAAME,aAAc3uB,EACvE,CACQ,GAAIwuB,EAAS,CACTn+B,GACZ,KAEIg+B,EAASO,QAAQvhB,SAAU,CACvBwhB,UAAW,KACXC,QAAS,OAEb,OAAOT,CACX,CACA,SAASU,GAAqBj2B,EAAO7kB,EAAMoc,GACvC,MAAM2P,EAASlH,EAAMkH,OACrB,MAAMquB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,EAAU,MACd,IAAK,MAAMC,KAASF,EAAQ,CACxBC,EAAUA,GAAWP,GAAiBQ,EAAME,aAAc3uB,GAC1DwuB,EAAUA,IAAYP,GAAiBQ,EAAMC,WAAY1uB,EACrE,CACQ,GAAIwuB,EAAS,CACTn+B,GACZ,KAEIg+B,EAASO,QAAQvhB,SAAU,CACvBwhB,UAAW,KACXC,QAAS,OAEb,OAAOT,CACX,CACA,MAAMW,GAAqB,IAAIp3B,IAC/B,IAAIq3B,GAAsB,EAC1B,SAASC,KACL,MAAMC,EAAM/9B,OAAOwL,iBACnB,GAAIuyB,IAAQF,GAAqB,CAC7B,MACR,CACIA,GAAsBE,EACtBH,GAAmBr+B,SAAQ,CAACoG,EAAQ+B,KAChC,GAAIA,EAAM+G,0BAA4BsvB,EAAK,CACvCp4B,GACZ,IAEA,CACA,SAASq4B,GAA8Bt2B,EAAO/B,GAC1C,IAAKi4B,GAAmBvjC,KAAM,CAC1B2F,OAAOggB,iBAAiB,SAAU8d,GAC1C,CACIF,GAAmB54B,IAAI0C,EAAO/B,EAClC,CACA,SAASs4B,GAAgCv2B,GACrCk2B,GAAmBrlB,OAAO7Q,GAC1B,IAAKk2B,GAAmBvjC,KAAM,CAC1B2F,OAAOigB,oBAAoB,SAAU6d,GAC7C,CACA,CACA,SAASI,GAAqBx2B,EAAO7kB,EAAMoc,GACvC,MAAM2P,EAASlH,EAAMkH,OACrB,MAAM4P,EAAY5P,GAAUsN,GAAetN,GAC3C,IAAK4P,EAAW,CACZ,MACR,CACI,MAAM7Y,EAASzF,IAAU,CAACwJ,EAAOuF,KAC7B,MAAMloB,EAAIy3B,EAAUC,YACpBxf,EAASyK,EAAOuF,GAChB,GAAIloB,EAAIy3B,EAAUC,YAAa,CAC3Bxf,GACZ,IACOe,QACH,MAAMi9B,EAAW,IAAIkB,gBAAgBhB,IACjC,MAAME,EAAQF,EAAQ,GACtB,MAAMzzB,EAAQ2zB,EAAMe,YAAY10B,MAChC,MAAMuF,EAASouB,EAAMe,YAAYnvB,OACjC,GAAIvF,IAAU,GAAKuF,IAAW,EAAG,CAC7B,MACZ,CACQtJ,EAAO+D,EAAOuF,EAAO,IAEzBguB,EAASO,QAAQhf,GACjBwf,GAA8Bt2B,EAAO/B,GACrC,OAAOs3B,CACX,CACA,SAASoB,GAAgB32B,EAAO7kB,EAAMo6C,GAClC,GAAIA,EAAU,CACVA,EAASqB,YACjB,CACI,GAAIz7C,IAAS,SAAU,CACnBo7C,GAAgCv2B,EACxC,CACA,CACA,SAAS62B,GAAqB72B,EAAO7kB,EAAMoc,GACvC,MAAM2P,EAASlH,EAAMkH,OACrB,MAAMmI,EAAQ7W,IAAW+d,IACrB,GAAIvW,EAAM0E,MAAQ,KAAM,CACpBnN,EAAS09B,GAAgB1e,EAAOvW,GAC5C,IACOA,GACH+0B,GAAY7tB,EAAQ/rB,EAAMk0B,GAC1B,OAAOA,CACX,CACC,MAAMynB,WAAoBxD,GAC1B,cAAAC,CAAersB,EAAQsQ,GAChB,MAAMzT,EAAUmD,GAAUA,EAAOC,YAAcD,EAAOC,WAAW,MACjE,GAAIpD,GAAWA,EAAQmD,SAAWA,EAAQ,CACtCstB,GAAWttB,EAAQsQ,GACnB,OAAOzT,CACnB,CACQ,OAAO,IACf,CACC,cAAAyvB,CAAezvB,GACR,MAAMmD,EAASnD,EAAQmD,OACvB,IAAKA,EAAO0sB,IAAc,CACtB,OAAO,KACnB,CACQ,MAAMnX,EAAUvV,EAAO0sB,IAAanX,QACpC,CACI,SACA,SACF5kB,SAAS2U,IACP,MAAMpxB,EAAQqhC,EAAQjQ,GACtB,GAAI3d,GAAczT,GAAQ,CACtB8rB,EAAO6vB,gBAAgBvqB,EACvC,KAAmB,CACHtF,EAAO8vB,aAAaxqB,EAAMpxB,EAC1C,KAEQ,MAAMkpB,EAAQmY,EAAQnY,OAAS,GAC/B/Y,OAAOD,KAAKgZ,GAAOzM,SAAS5c,IACxBisB,EAAO5C,MAAMrpB,GAAOqpB,EAAMrpB,EAAI,IAElCisB,EAAOlF,MAAQkF,EAAOlF,aACfkF,EAAO0sB,IACd,OAAO,IACf,CACC,gBAAAtb,CAAiBtY,EAAO7kB,EAAMoc,GACvB3e,KAAK2/B,oBAAoBvY,EAAO7kB,GAChC,MAAM87C,EAAUj3B,EAAMk3B,WAAal3B,EAAMk3B,SAAW,IACpD,MAAMC,EAAW,CACbC,OAAQ9B,GACR+B,OAAQpB,GACRh4B,OAAQu4B,IAEZ,MAAM/I,EAAU0J,EAASh8C,IAAS07C,GAClCI,EAAQ97C,GAAQsyC,EAAQztB,EAAO7kB,EAAMoc,EAC7C,CACC,mBAAAghB,CAAoBvY,EAAO7kB,GACpB,MAAM87C,EAAUj3B,EAAMk3B,WAAal3B,EAAMk3B,SAAW,IACpD,MAAM7nB,EAAQ4nB,EAAQ97C,GACtB,IAAKk0B,EAAO,CACR,MACZ,CACQ,MAAM8nB,EAAW,CACbC,OAAQT,GACRU,OAAQV,GACR14B,OAAQ04B,IAEZ,MAAMlJ,EAAU0J,EAASh8C,IAAS65C,GAClCvH,EAAQztB,EAAO7kB,EAAMk0B,GACrB4nB,EAAQ97C,GAAQrC,SACxB,CACI,mBAAAmrB,GACI,OAAO3L,OAAOwL,gBACtB,CACC,cAAAuT,CAAenQ,EAAQlF,EAAOuF,EAAQiQ,GAC/B,OAAOH,GAAenQ,EAAQlF,EAAOuF,EAAQiQ,EACrD,CACC,UAAAic,CAAWvsB,GACJ,MAAM4P,EAAY5P,GAAUsN,GAAetN,GAC3C,SAAU4P,GAAaA,EAAUwgB,YACzC,EAGA,SAASC,GAAgBrwB,GACrB,IAAKoN,aAA4BkjB,kBAAoB,aAAetwB,aAAkBswB,gBAAiB,CACnG,OAAO7D,EACf,CACI,OAAOmD,EACX,CAEA,MAAMW,GACFhT,gBAAkB,GAClBA,qBAAuB3rC,UACvB4H,EACAoR,EACAiM,OAAS,MACT7M,QACAovB,YACA,eAAAoX,CAAgBzJ,GACZ,MAAMvtC,EAAEA,EAACoR,EAAGA,GAAOlZ,KAAK41C,SAAS,CAC7B,IACA,KACDP,GACH,MAAO,CACHvtC,IACAoR,IAEZ,CACI,QAAA6lC,GACI,OAAOrjC,GAAS1b,KAAK8H,IAAM4T,GAAS1b,KAAKkZ,EACjD,CACI,QAAA08B,CAASniB,EAAOurB,GACZ,MAAMvb,EAAQzjC,KAAK0nC,YACnB,IAAKsX,IAAUvb,EAAO,CAElB,OAAOzjC,IACnB,CACQ,MAAM+F,EAAM,GACZ0tB,EAAMxU,SAAS2U,IACX7tB,EAAI6tB,GAAQ6P,EAAM7P,IAAS6P,EAAM7P,GAAMzO,SAAWse,EAAM7P,GAAMuS,IAAMnmC,KAAK4zB,EAAK,IAElF,OAAO7tB,CACf,EAGA,SAAS6jB,GAAS+C,EAAOxF,GACrB,MAAM83B,EAAWtyB,EAAMrU,QAAQ6O,MAC/B,MAAM+3B,EAAqBC,GAAkBxyB,GAC7C,MAAMyyB,EAAah7C,KAAKE,IAAI26C,EAASI,eAAiBH,EAAoBA,GAC1E,MAAMI,EAAeL,EAASj1B,MAAMu1B,QAAUC,GAAgBr4B,GAAS,GACvE,MAAMs4B,EAAkBH,EAAa19C,OACrC,MAAM89C,EAAQJ,EAAa,GAC3B,MAAMhhC,EAAOghC,EAAaG,EAAkB,GAC5C,MAAME,EAAW,GACjB,GAAIF,EAAkBL,EAAY,CAC9BQ,GAAWz4B,EAAOw4B,EAAUL,EAAcG,EAAkBL,GAC5D,OAAOO,CACf,CACI,MAAME,EAAUC,GAAiBR,EAAcn4B,EAAOi4B,GACtD,GAAIK,EAAkB,EAAG,CACrB,IAAI94C,EAAGgR,EACP,MAAMooC,EAAkBN,EAAkB,EAAIr7C,KAAKJ,OAAOsa,EAAOohC,IAAUD,EAAkB,IAAM,KACnGzmB,GAAK7R,EAAOw4B,EAAUE,EAAS5pC,GAAc8pC,GAAmB,EAAIL,EAAQK,EAAiBL,GAC7F,IAAI/4C,EAAI,EAAGgR,EAAO8nC,EAAkB,EAAG94C,EAAIgR,EAAMhR,IAAI,CACjDqyB,GAAK7R,EAAOw4B,EAAUE,EAASP,EAAa34C,GAAI24C,EAAa34C,EAAI,GAC7E,CACQqyB,GAAK7R,EAAOw4B,EAAUE,EAASvhC,EAAMrI,GAAc8pC,GAAmB54B,EAAMvlB,OAAS0c,EAAOyhC,GAC5F,OAAOJ,CACf,CACI3mB,GAAK7R,EAAOw4B,EAAUE,GACtB,OAAOF,CACX,CACA,SAASR,GAAkBxyB,GACvB,MAAMvE,EAASuE,EAAMrU,QAAQ8P,OAC7B,MAAMS,EAAa8D,EAAMqzB,YACzB,MAAMC,EAAWtzB,EAAMuzB,QAAUr3B,GAAcT,EAAS,EAAI,GAC5D,MAAM+3B,EAAWxzB,EAAMyzB,WAAav3B,EACpC,OAAOzkB,KAAK+W,MAAM/W,KAAKE,IAAI27C,EAAUE,GACzC,CACC,SAASL,GAAiBR,EAAcn4B,EAAOi4B,GAC5C,MAAMiB,EAAmBC,GAAehB,GACxC,MAAMO,EAAU14B,EAAMvlB,OAASw9C,EAC/B,IAAKiB,EAAkB,CACnB,OAAOj8C,KAAKC,IAAIw7C,EAAS,EACjC,CACI,MAAMU,EAAUjlC,GAAW+kC,GAC3B,IAAI,IAAI15C,EAAI,EAAGgR,EAAO4oC,EAAQ3+C,OAAS,EAAG+E,EAAIgR,EAAMhR,IAAI,CACpD,MAAM4+B,EAASgb,EAAQ55C,GACvB,GAAI4+B,EAASsa,EAAS,CAClB,OAAOta,CACnB,CACA,CACI,OAAOnhC,KAAKC,IAAIw7C,EAAS,EAC7B,CACC,SAASL,GAAgBr4B,GACtB,MAAM5L,EAAS,GACf,IAAI5U,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAOwP,EAAMvlB,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC1C,GAAIwgB,EAAMxgB,GAAGqjB,MAAO,CAChBzO,EAAO3X,KAAK+C,EACxB,CACA,CACI,OAAO4U,CACX,CACC,SAASqkC,GAAWz4B,EAAOw4B,EAAUL,EAAcO,GAChD,IAAIj/B,EAAQ,EACZ,IAAI0Y,EAAOgmB,EAAa,GACxB,IAAI34C,EACJk5C,EAAUz7C,KAAKo8C,KAAKX,GACpB,IAAIl5C,EAAI,EAAGA,EAAIwgB,EAAMvlB,OAAQ+E,IAAI,CAC7B,GAAIA,IAAM2yB,EAAM,CACZqmB,EAAS/7C,KAAKujB,EAAMxgB,IACpBia,IACA0Y,EAAOgmB,EAAa1+B,EAAQi/B,EACxC,CACA,CACA,CACC,SAAS7mB,GAAK7R,EAAOw4B,EAAUE,EAASY,EAAYC,GACjD,MAAMrjC,EAAQ1G,GAAe8pC,EAAY,GACzC,MAAMnjC,EAAMlZ,KAAKE,IAAIqS,GAAe+pC,EAAUv5B,EAAMvlB,QAASulB,EAAMvlB,QACnE,IAAIgf,EAAQ,EACZ,IAAIhf,EAAQ+E,EAAG2yB,EACfumB,EAAUz7C,KAAKo8C,KAAKX,GACpB,GAAIa,EAAU,CACV9+C,EAAS8+C,EAAWD,EACpBZ,EAAUj+C,EAASwC,KAAK+W,MAAMvZ,EAASi+C,EAC/C,CACIvmB,EAAOjc,EACP,MAAMic,EAAO,EAAE,CACX1Y,IACA0Y,EAAOl1B,KAAKJ,MAAMqZ,EAAQuD,EAAQi/B,EAC1C,CACI,IAAIl5C,EAAIvC,KAAKC,IAAIgZ,EAAO,GAAI1W,EAAI2W,EAAK3W,IAAI,CACrC,GAAIA,IAAM2yB,EAAM,CACZqmB,EAAS/7C,KAAKujB,EAAMxgB,IACpBia,IACA0Y,EAAOl1B,KAAKJ,MAAMqZ,EAAQuD,EAAQi/B,EAC9C,CACA,CACA,CACC,SAASS,GAAenoB,GACrB,MAAMryB,EAAMqyB,EAAIv2B,OAChB,IAAI+E,EAAGg6C,EACP,GAAI76C,EAAM,EAAG,CACT,OAAO,KACf,CACI,IAAI66C,EAAOxoB,EAAI,GAAIxxB,EAAI,EAAGA,EAAIb,IAAOa,EAAE,CACnC,GAAIwxB,EAAIxxB,GAAKwxB,EAAIxxB,EAAI,KAAOg6C,EAAM,CAC9B,OAAO,KACnB,CACA,CACI,OAAOA,CACX,CAEA,MAAMC,GAAgBvgC,GAAQA,IAAU,OAAS,QAAUA,IAAU,QAAU,OAASA,EACxF,MAAMwgC,GAAiB,CAACl0B,EAAOm0B,EAAM14B,IAAS04B,IAAS,OAASA,IAAS,OAASn0B,EAAMm0B,GAAQ14B,EAASuE,EAAMm0B,GAAQ14B,EACvH,MAAM24B,GAAgB,CAACC,EAAa3B,IAAgBj7C,KAAKE,IAAI+6C,GAAiB2B,EAAaA,GAC1F,SAASC,GAAO9oB,EAAK+oB,GAClB,MAAM3lC,EAAS,GACf,MAAM4lC,EAAYhpB,EAAIv2B,OAASs/C,EAC/B,MAAMp7C,EAAMqyB,EAAIv2B,OAChB,IAAI+E,EAAI,EACR,KAAMA,EAAIb,EAAKa,GAAKw6C,EAAU,CAC1B5lC,EAAO3X,KAAKu0B,EAAI/zB,KAAK+W,MAAMxU,IACnC,CACI,OAAO4U,CACX,CACC,SAAS6lC,GAAoBz0B,EAAO5U,EAAOspC,GACxC,MAAMz/C,EAAS+qB,EAAMxF,MAAMvlB,OAC3B,MAAM0/C,EAAal9C,KAAKE,IAAIyT,EAAOnW,EAAS,GAC5C,MAAMyb,EAAQsP,EAAM40B,YACpB,MAAMjkC,EAAMqP,EAAM60B,UAClB,MAAM1mC,EAAU,KAChB,IAAI2mC,EAAY90B,EAAM+0B,gBAAgBJ,GACtC,IAAIl5B,EACJ,GAAIi5B,EAAiB,CACjB,GAAIz/C,IAAW,EAAG,CACdwmB,EAAShkB,KAAKC,IAAIo9C,EAAYpkC,EAAOC,EAAMmkC,EACvD,MAAe,GAAI1pC,IAAU,EAAG,CACpBqQ,GAAUuE,EAAM+0B,gBAAgB,GAAKD,GAAa,CAC9D,KAAe,CACHr5B,GAAUq5B,EAAY90B,EAAM+0B,gBAAgBJ,EAAa,IAAM,CAC3E,CACQG,GAAaH,EAAavpC,EAAQqQ,GAAUA,EAC5C,GAAIq5B,EAAYpkC,EAAQvC,GAAW2mC,EAAYnkC,EAAMxC,EAAS,CAC1D,MACZ,CACA,CACI,OAAO2mC,CACX,CACC,SAASE,GAAeC,EAAQhgD,GAC7ByV,GAAKuqC,GAASvsB,IACV,MAAMzH,EAAKyH,EAAMzH,GACjB,MAAMi0B,EAAQj0B,EAAGhsB,OAAS,EAC1B,IAAI+E,EACJ,GAAIk7C,EAAQjgD,EAAQ,CAChB,IAAI+E,EAAI,EAAGA,EAAIk7C,IAASl7C,EAAE,QACf0uB,EAAM1H,KAAKC,EAAGjnB,GACrC,CACYinB,EAAGpO,OAAO,EAAGqiC,EACzB,IAEA,CACC,SAASC,GAAkBxpC,GACxB,OAAOA,EAAQsQ,UAAYtQ,EAAQuQ,WAAa,CACpD,CACC,SAASk5B,GAAezpC,EAAS0b,GAC9B,IAAK1b,EAAQ6P,QAAS,CAClB,OAAO,CACf,CACI,MAAMqD,EAAOuI,GAAOzb,EAAQkT,KAAMwI,GAClC,MAAMpO,EAAUkO,GAAUxb,EAAQsN,SAClC,MAAM+M,EAAQ1rB,GAAQqR,EAAQgR,MAAQhR,EAAQgR,KAAK1nB,OAAS,EAC5D,OAAO+wB,EAAQnH,EAAKG,WAAa/F,EAAQ+I,MAC7C,CACA,SAASqzB,GAAmB1pB,EAAQ3L,GAChC,OAAOiI,GAAc0D,EAAQ,CACzB3L,QACApqB,KAAM,SAEd,CACA,SAAS0/C,GAAkB3pB,EAAQvgB,EAAOysB,GACtC,OAAO5P,GAAc0D,EAAQ,CACzBkM,OACAzsB,QACAxV,KAAM,QAEd,CACA,SAAS2/C,GAAW7hC,EAAOu0B,EAAUr9B,GAChC,IAAIxR,EAAMqa,GAAmBC,GAC9B,GAAI9I,GAAWq9B,IAAa,UAAYr9B,GAAWq9B,IAAa,QAAS,CACrE7uC,EAAM66C,GAAa76C,EAC3B,CACI,OAAOA,CACX,CACA,SAASo8C,GAAUx1B,EAAOvE,EAAQwsB,EAAUv0B,GACxC,MAAMwF,IAAEA,EAAGG,KAAGA,EAAID,OAAGA,EAAMD,MAAGA,EAAKsB,MAAGA,GAAWuF,EACjD,MAAMgkB,UAAEA,EAAS/jB,OAAGA,GAAYxF,EAChC,IAAIiI,EAAW,EACf,IAAI2D,EAAUovB,EAAQC,EACtB,MAAM1zB,EAAS5I,EAASF,EACxB,MAAMuD,EAAQtD,EAAQE,EACtB,GAAI2G,EAAMwqB,eAAgB,CACtBiL,EAAS9hC,GAAeD,EAAO2F,EAAMF,GACrC,GAAIzP,GAASu+B,GAAW,CACpB,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvBD,EAASz1B,EAAO01B,GAAgBlhC,iBAAiB5e,GAASmsB,EAASvG,CAC/E,MAAe,GAAIwsB,IAAa,SAAU,CAC9ByN,GAAU1R,EAAU5qB,OAAS4qB,EAAU9qB,KAAO,EAAI8I,EAASvG,CACvE,KAAe,CACHi6B,EAASxB,GAAel0B,EAAOioB,EAAUxsB,EACrD,CACQ4K,EAAWlN,EAAQE,CAC3B,KAAW,CACH,GAAI3P,GAASu+B,GAAW,CACpB,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvBF,EAASx1B,EAAO01B,GAAgBlhC,iBAAiB5e,GAAS4mB,EAAQhB,CAC9E,MAAe,GAAIwsB,IAAa,SAAU,CAC9BwN,GAAUzR,EAAU3qB,KAAO2qB,EAAU7qB,OAAS,EAAIsD,EAAQhB,CACtE,KAAe,CACHg6B,EAASvB,GAAel0B,EAAOioB,EAAUxsB,EACrD,CACQi6B,EAAS/hC,GAAeD,EAAO0F,EAAQF,GACvCwJ,EAAWulB,IAAa,QAAUp6B,GAAUA,EACpD,CACI,MAAO,CACH4nC,SACAC,SACArvB,WACA3D,WAER,CACA,MAAMkzB,WAAc1D,GAChB,WAAAnqC,CAAYixB,GACR+N,QACC1zC,KAAKY,GAAK+kC,EAAI/kC,GACdZ,KAAKuC,KAAOojC,EAAIpjC,KAChBvC,KAAKsY,QAAUpY,UACfF,KAAK8rB,IAAM6Z,EAAI7Z,IACf9rB,KAAKonB,MAAQue,EAAIve,MACjBpnB,KAAK6lB,IAAM3lB,UACXF,KAAK+lB,OAAS7lB,UACdF,KAAKgmB,KAAO9lB,UACZF,KAAK8lB,MAAQ5lB,UACbF,KAAKopB,MAAQlpB,UACbF,KAAK2uB,OAASzuB,UACfF,KAAKwiD,SAAW,CACZx8B,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEX/lB,KAAKgzB,SAAW9yB,UAChBF,KAAKi+B,UAAY/9B,UACjBF,KAAKyiD,WAAaviD,UAClBF,KAAK0iD,cAAgBxiD,UACrBF,KAAK2iD,YAAcziD,UACnBF,KAAK4iD,aAAe1iD,UACpBF,KAAKghB,KAAO9gB,UACZF,KAAK6iD,cAAgB3iD,UACtBF,KAAKsE,IAAMpE,UACXF,KAAKqE,IAAMnE,UACXF,KAAK8iD,OAAS5iD,UACbF,KAAKmnB,MAAQ,GACbnnB,KAAK+iD,eAAiB,KACtB/iD,KAAKgjD,YAAc,KACnBhjD,KAAKijD,YAAc,KACpBjjD,KAAKkgD,QAAU,EACflgD,KAAKogD,WAAa,EAClBpgD,KAAKkjD,kBAAoB,GACxBljD,KAAKuhD,YAAcrhD,UACnBF,KAAKwhD,UAAYthD,UAClBF,KAAKy0C,eAAiB,MACtBz0C,KAAKmjD,SAAWjjD,UAChBF,KAAKojD,SAAWljD,UAChBF,KAAKqjD,cAAgBnjD,UACrBF,KAAKsjD,cAAgBpjD,UACrBF,KAAKujD,aAAe,EACpBvjD,KAAKwjD,aAAe,EACpBxjD,KAAKyjD,OAAS,GACdzjD,KAAK0jD,kBAAoB,MACzB1jD,KAAKysC,SAAWvsC,SACxB,CACC,IAAAyjD,CAAKrrC,GACEtY,KAAKsY,QAAUA,EAAQ2e,WAAWj3B,KAAKuuB,cACvCvuB,KAAKghB,KAAO1I,EAAQ0I,KACpBhhB,KAAKojD,SAAWpjD,KAAKgvC,MAAM12B,EAAQhU,KACnCtE,KAAKmjD,SAAWnjD,KAAKgvC,MAAM12B,EAAQjU,KACnCrE,KAAKsjD,cAAgBtjD,KAAKgvC,MAAM12B,EAAQsrC,cACxC5jD,KAAKqjD,cAAgBrjD,KAAKgvC,MAAM12B,EAAQurC,aAChD,CACC,KAAA7U,CAAM9D,EAAKnzB,GACJ,OAAOmzB,CACf,CACC,aAAA/pB,GACO,IAAIiiC,SAAEA,EAAQD,SAAGA,EAAQG,cAAGA,EAAaD,cAAGA,GAAmBrjD,KAC/DojD,EAAW3sC,GAAgB2sC,EAAU7sC,OAAO+D,mBAC5C6oC,EAAW1sC,GAAgB0sC,EAAU5sC,OAAOgzB,mBAC5C+Z,EAAgB7sC,GAAgB6sC,EAAe/sC,OAAO+D,mBACtD+oC,EAAgB5sC,GAAgB4sC,EAAe9sC,OAAOgzB,mBACtD,MAAO,CACHjlC,IAAKmS,GAAgB2sC,EAAUE,GAC/Bj/C,IAAKoS,GAAgB0sC,EAAUE,GAC/BpiC,WAAY3K,GAAe8sC,GAC3BliC,WAAY5K,GAAe6sC,GAEvC,CACC,SAAAnT,CAAUvE,GACH,IAAInnC,IAAEA,EAAGD,IAAGA,EAAG4c,WAAGA,EAAUC,WAAGA,GAAgBlhB,KAAKmhB,gBACpD,IAAIra,EACJ,GAAIma,GAAcC,EAAY,CAC1B,MAAO,CACH5c,MACAD,MAEhB,CACQ,MAAMy/C,EAAQ9jD,KAAK+pC,0BACnB,IAAI,IAAIpjC,EAAI,EAAGgR,EAAOmsC,EAAMliD,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC9CG,EAAQg9C,EAAMn9C,GAAGsjC,WAAW+F,UAAUhwC,KAAMyrC,GAC5C,IAAKxqB,EAAY,CACb3c,EAAMF,KAAKE,IAAIA,EAAKwC,EAAMxC,IAC1C,CACY,IAAK4c,EAAY,CACb7c,EAAMD,KAAKC,IAAIA,EAAKyC,EAAMzC,IAC1C,CACA,CACQC,EAAM4c,GAAc5c,EAAMD,EAAMA,EAAMC,EACtCD,EAAM4c,GAAc3c,EAAMD,EAAMC,EAAMD,EACtC,MAAO,CACHC,IAAKmS,GAAgBnS,EAAKmS,GAAgBpS,EAAKC,IAC/CD,IAAKoS,GAAgBpS,EAAKoS,GAAgBnS,EAAKD,IAE3D,CACC,UAAAu0C,GACO,MAAO,CACH5yB,KAAMhmB,KAAK2iD,aAAe,EAC1B98B,IAAK7lB,KAAKyiD,YAAc,EACxB38B,MAAO9lB,KAAK4iD,cAAgB,EAC5B78B,OAAQ/lB,KAAK0iD,eAAiB,EAE1C,CACC,QAAAqB,GACO,OAAO/jD,KAAKmnB,KACpB,CACC,SAAAooB,GACO,MAAM5hB,EAAO3tB,KAAKonB,MAAMuG,KACxB,OAAO3tB,KAAKsY,QAAQg3B,SAAWtvC,KAAKm3C,eAAiBxpB,EAAKq2B,QAAUr2B,EAAKs2B,UAAYt2B,EAAK2hB,QAAU,EAC5G,CACC,aAAA4U,CAAcvT,EAAY3wC,KAAKonB,MAAMupB,WAC9B,MAAMvwC,EAAQJ,KAAKgjD,cAAgBhjD,KAAKgjD,YAAchjD,KAAKmkD,mBAAmBxT,IAC9E,OAAOvwC,CACf,CACI,YAAAm6C,GACIv6C,KAAKyjD,OAAS,GACdzjD,KAAK0jD,kBAAoB,KACjC,CACI,YAAAU,GACIptC,GAAShX,KAAKsY,QAAQ8rC,aAAc,CAChCpkD,MAEZ,CACC,MAAAqmC,CAAOrT,EAAUiL,EAAWY,GACrB,MAAMxW,YAAEA,EAAWG,MAAGA,EAAQrB,MAAO83B,GAAcj/C,KAAKsY,QACxD,MAAM+rC,EAAapF,EAASoF,WAC5BrkD,KAAKokD,eACLpkD,KAAKgzB,SAAWA,EAChBhzB,KAAKi+B,UAAYA,EACjBj+B,KAAKwiD,SAAW3jB,EAAUlsB,OAAOyB,OAAO,CACpC4R,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GACT8Y,GACH7+B,KAAKmnB,MAAQ,KACbnnB,KAAKijD,YAAc,KACnBjjD,KAAK+iD,eAAiB,KACtB/iD,KAAKgjD,YAAc,KACnBhjD,KAAKskD,sBACLtkD,KAAKukD,gBACLvkD,KAAKwkD,qBACLxkD,KAAKogD,WAAapgD,KAAKm3C,eAAiBn3C,KAAKopB,MAAQyV,EAAQ7Y,KAAO6Y,EAAQ/Y,MAAQ9lB,KAAK2uB,OAASkQ,EAAQhZ,IAAMgZ,EAAQ9Y,OACxH,IAAK/lB,KAAK0jD,kBAAmB,CACzB1jD,KAAKykD,mBACLzkD,KAAK0kD,sBACL1kD,KAAK2kD,kBACL3kD,KAAK8iD,OAASvuB,GAAUv0B,KAAMwoB,EAAOH,GACrCroB,KAAK0jD,kBAAoB,IACrC,CACQ1jD,KAAK4kD,mBACL5kD,KAAKmnB,MAAQnnB,KAAK6kD,cAAgB,GAClC7kD,KAAK8kD,kBACL,MAAMC,EAAkBV,EAAarkD,KAAKmnB,MAAMvlB,OAChD5B,KAAKglD,sBAAsBD,EAAkB9D,GAAOjhD,KAAKmnB,MAAOk9B,GAAcrkD,KAAKmnB,OACnFnnB,KAAK+mC,YACL/mC,KAAKilD,+BACLjlD,KAAKklD,yBACLllD,KAAKmlD,8BACL,GAAIlG,EAAS92B,UAAY82B,EAASr1B,UAAYq1B,EAASjnC,SAAW,QAAS,CACvEhY,KAAKmnB,MAAQyC,GAAS5pB,KAAMA,KAAKmnB,OACjCnnB,KAAKijD,YAAc,KACnBjjD,KAAKolD,eACjB,CACQ,GAAIL,EAAiB,CACjB/kD,KAAKglD,sBAAsBhlD,KAAKmnB,MAC5C,CACQnnB,KAAKqlD,YACLrlD,KAAKslD,MACLtlD,KAAKulD,WACLvlD,KAAKwlD,aACb,CACC,SAAAze,GACO,IAAI0e,EAAgBzlD,KAAKsY,QAAQf,QACjC,IAAImuC,EAAYC,EAChB,GAAI3lD,KAAKm3C,eAAgB,CACrBuO,EAAa1lD,KAAKgmB,KAClB2/B,EAAW3lD,KAAK8lB,KAC5B,KAAe,CACH4/B,EAAa1lD,KAAK6lB,IAClB8/B,EAAW3lD,KAAK+lB,OAChB0/B,GAAiBA,CAC7B,CACQzlD,KAAKuhD,YAAcmE,EACnB1lD,KAAKwhD,UAAYmE,EACjB3lD,KAAKy0C,eAAiBgR,EACtBzlD,KAAKkgD,QAAUyF,EAAWD,EAC1B1lD,KAAK4lD,eAAiB5lD,KAAKsY,QAAQutC,aAC3C,CACI,WAAAL,GACIxuC,GAAShX,KAAKsY,QAAQktC,YAAa,CAC/BxlD,MAEZ,CACI,mBAAAskD,GACIttC,GAAShX,KAAKsY,QAAQgsC,oBAAqB,CACvCtkD,MAEZ,CACI,aAAAukD,GACI,GAAIvkD,KAAKm3C,eAAgB,CACrBn3C,KAAKopB,MAAQppB,KAAKgzB,SAClBhzB,KAAKgmB,KAAO,EACZhmB,KAAK8lB,MAAQ9lB,KAAKopB,KAC9B,KAAe,CACHppB,KAAK2uB,OAAS3uB,KAAKi+B,UACnBj+B,KAAK6lB,IAAM,EACX7lB,KAAK+lB,OAAS/lB,KAAK2uB,MAC/B,CACQ3uB,KAAK2iD,YAAc,EACnB3iD,KAAKyiD,WAAa,EAClBziD,KAAK4iD,aAAe,EACpB5iD,KAAK0iD,cAAgB,CAC7B,CACI,kBAAA8B,GACIxtC,GAAShX,KAAKsY,QAAQksC,mBAAoB,CACtCxkD,MAEZ,CACI,UAAA8lD,CAAW/iD,GACP/C,KAAKonB,MAAM2+B,cAAchjD,EAAM/C,KAAKuuB,cACpCvX,GAAShX,KAAKsY,QAAQvV,GAAO,CACzB/C,MAEZ,CACI,gBAAAykD,GACIzkD,KAAK8lD,WAAW,mBACxB,CACI,mBAAApB,GAAsB,CACtB,eAAAC,GACI3kD,KAAK8lD,WAAW,kBACxB,CACI,gBAAAlB,GACI5kD,KAAK8lD,WAAW,mBACxB,CACC,UAAAjB,GACO,MAAO,EACf,CACI,eAAAC,GACI9kD,KAAK8lD,WAAW,kBACxB,CACI,2BAAAE,GACIhvC,GAAShX,KAAKsY,QAAQ0tC,4BAA6B,CAC/ChmD,MAEZ,CACC,kBAAAimD,CAAmB9+B,GACZ,MAAM83B,EAAWj/C,KAAKsY,QAAQ6O,MAC9B,IAAIxgB,EAAGgR,EAAM6sB,EACb,IAAI79B,EAAI,EAAGgR,EAAOwP,EAAMvlB,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC1C69B,EAAOrd,EAAMxgB,GACb69B,EAAKgM,MAAQx5B,GAASioC,EAASjoC,SAAU,CACrCwtB,EAAKhiC,MACLmE,EACAwgB,GACDnnB,KACf,CACA,CACI,0BAAAkmD,GACIlvC,GAAShX,KAAKsY,QAAQ4tC,2BAA4B,CAC9ClmD,MAEZ,CACI,4BAAAilD,GACIjuC,GAAShX,KAAKsY,QAAQ2sC,6BAA8B,CAChDjlD,MAEZ,CACI,sBAAAklD,GACI,MAAM5sC,EAAUtY,KAAKsY,QACrB,MAAM2mC,EAAW3mC,EAAQ6O,MACzB,MAAMg/B,EAAWpF,GAAc/gD,KAAKmnB,MAAMvlB,OAAQ0W,EAAQ6O,MAAMk4B,eAChE,MAAM91B,EAAc01B,EAAS11B,aAAe,EAC5C,MAAMC,EAAcy1B,EAASz1B,YAC7B,IAAIq5B,EAAgBt5B,EACpB,IAAIT,EAAWmV,EAAWmoB,EAC1B,IAAKpmD,KAAKqmD,eAAiBpH,EAAS92B,SAAWoB,GAAeC,GAAe28B,GAAY,IAAMnmD,KAAKm3C,eAAgB,CAChHn3C,KAAK6iD,cAAgBt5B,EACrB,MACZ,CACQ,MAAM+8B,EAAatmD,KAAKumD,iBACxB,MAAMC,EAAgBF,EAAWG,OAAOr9B,MACxC,MAAMs9B,EAAiBJ,EAAWK,QAAQh4B,OAC1C,MAAMqE,EAAWpV,GAAY5d,KAAKonB,MAAMgC,MAAQo9B,EAAe,EAAGxmD,KAAKgzB,UACvElK,EAAYxQ,EAAQ8P,OAASpoB,KAAKgzB,SAAWmzB,EAAWnzB,GAAYmzB,EAAW,GAC/E,GAAIK,EAAgB,EAAI19B,EAAW,CAC/BA,EAAYkK,GAAYmzB,GAAY7tC,EAAQ8P,OAAS,GAAM,IAC3D6V,EAAYj+B,KAAKi+B,UAAY6jB,GAAkBxpC,EAAQmQ,MAAQw2B,EAASr5B,QAAUm8B,GAAezpC,EAAQ+Q,MAAOrpB,KAAKonB,MAAM9O,QAAQkT,MACnI46B,EAAmBhiD,KAAKoX,KAAKgrC,EAAgBA,EAAgBE,EAAiBA,GAC9E7D,EAAgB1mC,GAAU/X,KAAKE,IAAIF,KAAKwiD,KAAKhpC,IAAa0oC,EAAWK,QAAQh4B,OAAS,GAAK7F,GAAY,EAAG,IAAK1kB,KAAKwiD,KAAKhpC,GAAYqgB,EAAYmoB,GAAmB,EAAG,IAAMhiD,KAAKwiD,KAAKhpC,GAAY8oC,EAAiBN,GAAmB,EAAG,MAC1OvD,EAAgBz+C,KAAKC,IAAIklB,EAAanlB,KAAKE,IAAIklB,EAAaq5B,GACxE,CACQ7iD,KAAK6iD,cAAgBA,CAC7B,CACI,2BAAAsC,GACInuC,GAAShX,KAAKsY,QAAQ6sC,4BAA6B,CAC/CnlD,MAEZ,CACI,aAAAolD,GAAgB,CAChB,SAAAC,GACIruC,GAAShX,KAAKsY,QAAQ+sC,UAAW,CAC7BrlD,MAEZ,CACI,GAAAslD,GACI,MAAMuB,EAAU,CACZz9B,MAAO,EACPuF,OAAQ,GAEZ,MAAMvH,MAAEA,EAAQ9O,SAAW6O,MAAO83B,EAAW51B,MAAOy9B,EAAYr+B,KAAMs+B,IAAiB/mD,KACvF,MAAMmoB,EAAUnoB,KAAKqmD,aACrB,MAAMlP,EAAen3C,KAAKm3C,eAC1B,GAAIhvB,EAAS,CACT,MAAM6+B,EAAcjF,GAAe+E,EAAW1/B,EAAM9O,QAAQkT,MAC5D,GAAI2rB,EAAc,CACd0P,EAAQz9B,MAAQppB,KAAKgzB,SACrB6zB,EAAQl4B,OAASmzB,GAAkBiF,GAAYC,CAC/D,KAAmB,CACHH,EAAQl4B,OAAS3uB,KAAKi+B,UACtB4oB,EAAQz9B,MAAQ04B,GAAkBiF,GAAYC,CAC9D,CACY,GAAI/H,EAAS92B,SAAWnoB,KAAKmnB,MAAMvlB,OAAQ,CACvC,MAAM89C,MAAEA,EAAKphC,KAAGA,EAAImoC,OAAGA,EAAME,QAAGA,GAAa3mD,KAAKumD,iBAClD,MAAMU,EAAchI,EAASr5B,QAAU,EACvC,MAAMshC,EAAejrC,GAAUjc,KAAK6iD,eACpC,MAAM3/B,EAAM9e,KAAK8e,IAAIgkC,GACrB,MAAMjlC,EAAM7d,KAAK6d,IAAIilC,GACrB,GAAI/P,EAAc,CACd,MAAMgQ,EAAclI,EAASx1B,OAAS,EAAIxH,EAAMwkC,EAAOr9B,MAAQlG,EAAMyjC,EAAQh4B,OAC7Ek4B,EAAQl4B,OAASvqB,KAAKE,IAAItE,KAAKi+B,UAAW4oB,EAAQl4B,OAASw4B,EAAcF,EAC7F,KAAuB,CACH,MAAMG,EAAanI,EAASx1B,OAAS,EAAIvG,EAAMujC,EAAOr9B,MAAQnH,EAAM0kC,EAAQh4B,OAC5Ek4B,EAAQz9B,MAAQhlB,KAAKE,IAAItE,KAAKgzB,SAAU6zB,EAAQz9B,MAAQg+B,EAAaH,EACzF,CACgBjnD,KAAKqnD,kBAAkB3H,EAAOphC,EAAM2D,EAAKiB,EACzD,CACA,CACQljB,KAAKsnD,iBACL,GAAInQ,EAAc,CACdn3C,KAAKopB,MAAQppB,KAAKkgD,QAAU94B,EAAMgC,MAAQppB,KAAKwiD,SAASx8B,KAAOhmB,KAAKwiD,SAAS18B,MAC7E9lB,KAAK2uB,OAASk4B,EAAQl4B,MAClC,KAAe,CACH3uB,KAAKopB,MAAQy9B,EAAQz9B,MACrBppB,KAAK2uB,OAAS3uB,KAAKkgD,QAAU94B,EAAMuH,OAAS3uB,KAAKwiD,SAAS38B,IAAM7lB,KAAKwiD,SAASz8B,MAC1F,CACA,CACI,iBAAAshC,CAAkB3H,EAAOphC,EAAM2D,EAAKiB,GAChC,MAAQiE,OAAO9G,MAAEA,EAAKuF,QAAGA,GAAUgvB,SAAGA,GAAc50C,KAAKsY,QACzD,MAAMivC,EAAYvnD,KAAK6iD,gBAAkB,EACzC,MAAM2E,EAAmB5S,IAAa,OAAS50C,KAAKghB,OAAS,IAC7D,GAAIhhB,KAAKm3C,eAAgB,CACrB,MAAMsQ,EAAaznD,KAAK0hD,gBAAgB,GAAK1hD,KAAKgmB,KAClD,MAAM0hC,EAAc1nD,KAAK8lB,MAAQ9lB,KAAK0hD,gBAAgB1hD,KAAKmnB,MAAMvlB,OAAS,GAC1E,IAAI+gD,EAAc,EAClB,IAAIC,EAAe,EACnB,GAAI2E,EAAW,CACX,GAAIC,EAAkB,CAClB7E,EAAcz/B,EAAMw8B,EAAMt2B,MAC1Bw5B,EAAe3gC,EAAM3D,EAAKqQ,MAC9C,KAAuB,CACHg0B,EAAc1gC,EAAMy9B,EAAM/wB,OAC1Bi0B,EAAe1/B,EAAM5E,EAAK8K,KAC9C,CACA,MAAmB,GAAI/I,IAAU,QAAS,CAC1BuiC,EAAetkC,EAAK8K,KACpC,MAAmB,GAAI/I,IAAU,MAAO,CACxBsiC,EAAcjD,EAAMt2B,KACpC,MAAmB,GAAI/I,IAAU,QAAS,CAC1BsiC,EAAcjD,EAAMt2B,MAAQ,EAC5Bw5B,EAAetkC,EAAK8K,MAAQ,CAC5C,CACYppB,KAAK2iD,YAAcv+C,KAAKC,KAAKs+C,EAAc8E,EAAa7hC,GAAW5lB,KAAKopB,OAASppB,KAAKopB,MAAQq+B,GAAa,GAC3GznD,KAAK4iD,aAAex+C,KAAKC,KAAKu+C,EAAe8E,EAAc9hC,GAAW5lB,KAAKopB,OAASppB,KAAKopB,MAAQs+B,GAAc,EAC3H,KAAe,CACH,IAAIjF,EAAankC,EAAKqQ,OAAS,EAC/B,IAAI+zB,EAAgBhD,EAAM/wB,OAAS,EACnC,GAAItO,IAAU,QAAS,CACnBoiC,EAAa,EACbC,EAAgBhD,EAAM/wB,MACtC,MAAmB,GAAItO,IAAU,MAAO,CACxBoiC,EAAankC,EAAKqQ,OAClB+zB,EAAgB,CAChC,CACY1iD,KAAKyiD,WAAaA,EAAa78B,EAC/B5lB,KAAK0iD,cAAgBA,EAAgB98B,CACjD,CACA,CACC,cAAA0hC,GACO,GAAItnD,KAAKwiD,SAAU,CACfxiD,KAAKwiD,SAASx8B,KAAO5hB,KAAKC,IAAIrE,KAAK2iD,YAAa3iD,KAAKwiD,SAASx8B,MAC9DhmB,KAAKwiD,SAAS38B,IAAMzhB,KAAKC,IAAIrE,KAAKyiD,WAAYziD,KAAKwiD,SAAS38B,KAC5D7lB,KAAKwiD,SAAS18B,MAAQ1hB,KAAKC,IAAIrE,KAAK4iD,aAAc5iD,KAAKwiD,SAAS18B,OAChE9lB,KAAKwiD,SAASz8B,OAAS3hB,KAAKC,IAAIrE,KAAK0iD,cAAe1iD,KAAKwiD,SAASz8B,OAC9E,CACA,CACI,QAAAw/B,GACIvuC,GAAShX,KAAKsY,QAAQitC,SAAU,CAC5BvlD,MAEZ,CACC,YAAAm3C,GACO,MAAMn2B,KAAEA,EAAI4zB,SAAGA,GAAc50C,KAAKsY,QAClC,OAAOs8B,IAAa,OAASA,IAAa,UAAY5zB,IAAS,GACvE,CACC,UAAA2mC,GACO,OAAO3nD,KAAKsY,QAAQu/B,QAC5B,CACC,qBAAAmN,CAAsB79B,GACfnnB,KAAKgmD,8BACLhmD,KAAKimD,mBAAmB9+B,GACxB,IAAIxgB,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAOwP,EAAMvlB,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC1C,GAAIsP,GAAckR,EAAMxgB,GAAG6pC,OAAQ,CAC/BrpB,EAAM3H,OAAO7Y,EAAG,GAChBgR,IACAhR,GAChB,CACA,CACQ3G,KAAKkmD,4BACb,CACC,cAAAK,GACO,IAAID,EAAatmD,KAAKijD,YACtB,IAAKqD,EAAY,CACb,MAAMjC,EAAarkD,KAAKsY,QAAQ6O,MAAMk9B,WACtC,IAAIl9B,EAAQnnB,KAAKmnB,MACjB,GAAIk9B,EAAal9B,EAAMvlB,OAAQ,CAC3BulB,EAAQ85B,GAAO95B,EAAOk9B,EACtC,CACYrkD,KAAKijD,YAAcqD,EAAatmD,KAAK4nD,mBAAmBzgC,EAAOA,EAAMvlB,OAAQ5B,KAAKsY,QAAQ6O,MAAMk4B,cAC5G,CACQ,OAAOiH,CACf,CACC,kBAAAsB,CAAmBzgC,EAAOvlB,EAAQy9C,GAC3B,MAAMvzB,IAAEA,EAAMo3B,kBAAmBtB,GAAY5hD,KAC7C,MAAM6nD,EAAS,GACf,MAAMC,EAAU,GAChB,MAAM3G,EAAY/8C,KAAK+W,MAAMvZ,EAASm/C,GAAcn/C,EAAQy9C,IAC5D,IAAI0I,EAAkB,EACtB,IAAIC,EAAmB,EACvB,IAAIrhD,EAAGkM,EAAGo1C,EAAMzX,EAAO0X,EAAUC,EAAY9yB,EAAO1J,EAAYvC,EAAOuF,EAAQy5B,EAC/E,IAAIzhD,EAAI,EAAGA,EAAI/E,EAAQ+E,GAAKw6C,EAAU,CAClC3Q,EAAQrpB,EAAMxgB,GAAG6pC,MACjB0X,EAAWloD,KAAKqoD,wBAAwB1hD,GACxCmlB,EAAIN,KAAO28B,EAAaD,EAASp6B,OACjCuH,EAAQusB,EAAOuG,GAAcvG,EAAOuG,IAAe,CAC/Cx6B,KAAM,GACNC,GAAI,IAERjC,EAAau8B,EAASv8B,WACtBvC,EAAQuF,EAAS,EACjB,IAAK1Y,GAAcu6B,KAAWvpC,GAAQupC,GAAQ,CAC1CpnB,EAAQsE,GAAa5B,EAAKuJ,EAAM1H,KAAM0H,EAAMzH,GAAIxE,EAAOonB,GACvD7hB,EAAShD,CACzB,MAAmB,GAAI1kB,GAAQupC,GAAQ,CACvB,IAAI39B,EAAI,EAAGo1C,EAAOzX,EAAM5uC,OAAQiR,EAAIo1C,IAAQp1C,EAAE,CAC1Cu1C,EAAe5X,EAAM39B,GACrB,IAAKoD,GAAcmyC,KAAiBnhD,GAAQmhD,GAAc,CACtDh/B,EAAQsE,GAAa5B,EAAKuJ,EAAM1H,KAAM0H,EAAMzH,GAAIxE,EAAOg/B,GACvDz5B,GAAUhD,CAClC,CACA,CACA,CACYk8B,EAAOjkD,KAAKwlB,GACZ0+B,EAAQlkD,KAAK+qB,GACbo5B,EAAkB3jD,KAAKC,IAAI+kB,EAAO2+B,GAClCC,EAAmB5jD,KAAKC,IAAIsqB,EAAQq5B,EAChD,CACQrG,GAAeC,EAAQhgD,GACvB,MAAM6kD,EAASoB,EAAOzvC,QAAQ2vC,GAC9B,MAAMpB,EAAUmB,EAAQ1vC,QAAQ4vC,GAChC,MAAMM,EAAWC,IAAG,CACZn/B,MAAOy+B,EAAOU,IAAQ,EACtB55B,OAAQm5B,EAAQS,IAAQ,IAEhC,MAAO,CACH7I,MAAO4I,EAAQ,GACfhqC,KAAMgqC,EAAQ1mD,EAAS,GACvB6kD,OAAQ6B,EAAQ7B,GAChBE,QAAS2B,EAAQ3B,GACjBkB,SACAC,UAEZ,CACC,gBAAArX,CAAiBjuC,GACV,OAAOA,CACf,CACC,gBAAA4e,CAAiB5e,EAAOuV,GACjB,OAAOg4B,GACf,CACC,gBAAAyY,CAAiBt6B,GAAO,CACxB,eAAAwzB,CAAgB3pC,GACT,MAAMoP,EAAQnnB,KAAKmnB,MACnB,GAAIpP,EAAQ,GAAKA,EAAQoP,EAAMvlB,OAAS,EAAG,CACvC,OAAO,IACnB,CACQ,OAAO5B,KAAKohB,iBAAiB+F,EAAMpP,GAAOvV,MAClD,CACC,kBAAAimD,CAAmBC,GACZ,GAAI1oD,KAAKy0C,eAAgB,CACrBiU,EAAU,EAAIA,CAC1B,CACQ,MAAMx6B,EAAQluB,KAAKuhD,YAAcmH,EAAU1oD,KAAKkgD,QAChD,OAAOriC,GAAY7d,KAAK4lD,eAAiB33B,GAAYjuB,KAAKonB,MAAO8G,EAAO,GAAKA,EACrF,CACC,kBAAAy6B,CAAmBz6B,GACZ,MAAMw6B,GAAWx6B,EAAQluB,KAAKuhD,aAAevhD,KAAKkgD,QAClD,OAAOlgD,KAAKy0C,eAAiB,EAAIiU,EAAUA,CACnD,CACC,YAAAvU,GACO,OAAOn0C,KAAKohB,iBAAiBphB,KAAK4oD,eAC1C,CACC,YAAAA,GACO,MAAMtkD,IAAEA,EAAGD,IAAGA,GAASrE,KACvB,OAAOsE,EAAM,GAAKD,EAAM,EAAIA,EAAMC,EAAM,GAAKD,EAAM,EAAIC,EAAM,CACrE,CACC,UAAAiqB,CAAWxW,GACJ,MAAMoP,EAAQnnB,KAAKmnB,OAAS,GAC5B,GAAIpP,GAAS,GAAKA,EAAQoP,EAAMvlB,OAAQ,CACpC,MAAM4iC,EAAOrd,EAAMpP,GACnB,OAAOysB,EAAKiI,WAAajI,EAAKiI,SAAWwV,GAAkBjiD,KAAKuuB,aAAcxW,EAAOysB,GACjG,CACQ,OAAOxkC,KAAKysC,WAAazsC,KAAKysC,SAAWuV,GAAmBhiD,KAAKonB,MAAMmH,aAAcvuB,MAC7F,CACC,SAAAggD,GACO,MAAM6I,EAAc7oD,KAAKsY,QAAQ6O,MACjC,MAAM2hC,EAAM7sC,GAAUjc,KAAK6iD,eAC3B,MAAM3/B,EAAM9e,KAAK2W,IAAI3W,KAAK8e,IAAI4lC,IAC9B,MAAM7mC,EAAM7d,KAAK2W,IAAI3W,KAAK6d,IAAI6mC,IAC9B,MAAMxC,EAAatmD,KAAKumD,iBACxB,MAAM3gC,EAAUijC,EAAYh/B,iBAAmB,EAC/C,MAAMpjB,EAAI6/C,EAAaA,EAAWG,OAAOr9B,MAAQxD,EAAU,EAC3D,MAAMxjB,EAAIkkD,EAAaA,EAAWK,QAAQh4B,OAAS/I,EAAU,EAC7D,OAAO5lB,KAAKm3C,eAAiB/0C,EAAI8gB,EAAMzc,EAAIwb,EAAMxb,EAAIyc,EAAM9gB,EAAI6f,EAAM7f,EAAI6f,EAAMxb,EAAIyc,EAAM9gB,EAAI8gB,EAAMzc,EAAIwb,CAC/G,CACC,UAAAokC,GACO,MAAMl+B,EAAUnoB,KAAKsY,QAAQ6P,QAC7B,GAAIA,IAAY,OAAQ,CACpB,QAASA,CACrB,CACQ,OAAOnoB,KAAK+pC,0BAA0BnoC,OAAS,CACvD,CACC,qBAAAmnD,CAAsBpY,GACf,MAAM3vB,EAAOhhB,KAAKghB,KAClB,MAAMoG,EAAQpnB,KAAKonB,MACnB,MAAM9O,EAAUtY,KAAKsY,QACrB,MAAMmQ,KAAEA,EAAImsB,SAAGA,EAAQ3rB,OAAGA,GAAY3Q,EACtC,MAAM8P,EAASK,EAAKL,OACpB,MAAM+uB,EAAen3C,KAAKm3C,eAC1B,MAAMhwB,EAAQnnB,KAAKmnB,MACnB,MAAM65B,EAAc75B,EAAMvlB,QAAUwmB,EAAS,EAAI,GACjD,MAAM4gC,EAAKlH,GAAkBr5B,GAC7B,MAAMroB,EAAQ,GACd,MAAM6oD,EAAahgC,EAAOgO,WAAWj3B,KAAKuuB,cAC1C,MAAM26B,EAAYD,EAAW9gC,QAAU8gC,EAAW7/B,MAAQ,EAC1D,MAAM+/B,EAAgBD,EAAY,EAClC,MAAME,EAAmB,SAASl7B,GAC9B,OAAOD,GAAY7G,EAAO8G,EAAOg7B,EAC7C,EACQ,IAAIG,EAAa1iD,EAAG86C,EAAW6H,EAC/B,IAAIC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EACpC,GAAIlV,IAAa,MAAO,CACpByU,EAAcD,EAAiBppD,KAAK+lB,QACpCyjC,EAAMxpD,KAAK+lB,OAASijC,EACpBU,EAAML,EAAcF,EACpBS,EAAKR,EAAiBzY,EAAU9qB,KAAOsjC,EACvCW,EAAKnZ,EAAU5qB,MAC3B,MAAe,GAAI6uB,IAAa,SAAU,CAC9ByU,EAAcD,EAAiBppD,KAAK6lB,KACpC+jC,EAAKjZ,EAAU9qB,IACfikC,EAAKV,EAAiBzY,EAAU5qB,QAAUojC,EAC1CK,EAAMH,EAAcF,EACpBO,EAAM1pD,KAAK6lB,IAAMmjC,CAC7B,MAAe,GAAIpU,IAAa,OAAQ,CAC5ByU,EAAcD,EAAiBppD,KAAK8lB,OACpCyjC,EAAMvpD,KAAK8lB,MAAQkjC,EACnBS,EAAMJ,EAAcF,EACpBQ,EAAKP,EAAiBzY,EAAU3qB,MAAQmjC,EACxCU,EAAKlZ,EAAU7qB,KAC3B,MAAe,GAAI8uB,IAAa,QAAS,CAC7ByU,EAAcD,EAAiBppD,KAAKgmB,MACpC2jC,EAAKhZ,EAAU3qB,KACf6jC,EAAKT,EAAiBzY,EAAU7qB,OAASqjC,EACzCI,EAAMF,EAAcF,EACpBM,EAAMzpD,KAAKgmB,KAAOgjC,CAC9B,MAAe,GAAIhoC,IAAS,IAAK,CACrB,GAAI4zB,IAAa,SAAU,CACvByU,EAAcD,GAAkBzY,EAAU9qB,IAAM8qB,EAAU5qB,QAAU,EAAI,GACxF,MAAmB,GAAI1P,GAASu+B,GAAW,CAC3B,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvB+G,EAAcD,EAAiBppD,KAAKonB,MAAMwF,OAAO01B,GAAgBlhC,iBAAiB5e,GAClG,CACYonD,EAAKjZ,EAAU9qB,IACfikC,EAAKnZ,EAAU5qB,OACfyjC,EAAMH,EAAcF,EACpBO,EAAMF,EAAMR,CACxB,MAAe,GAAIhoC,IAAS,IAAK,CACrB,GAAI4zB,IAAa,SAAU,CACvByU,EAAcD,GAAkBzY,EAAU3qB,KAAO2qB,EAAU7qB,OAAS,EACpF,MAAmB,GAAIzP,GAASu+B,GAAW,CAC3B,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvB+G,EAAcD,EAAiBppD,KAAKonB,MAAMwF,OAAO01B,GAAgBlhC,iBAAiB5e,GAClG,CACY+mD,EAAMF,EAAcF,EACpBM,EAAMF,EAAMP,EACZW,EAAKhZ,EAAU3qB,KACf6jC,EAAKlZ,EAAU7qB,KAC3B,CACQ,MAAMikC,EAAQpzC,GAAe2B,EAAQ6O,MAAMk4B,cAAe2B,GAC1D,MAAMgJ,EAAO5lD,KAAKC,IAAI,EAAGD,KAAKo8C,KAAKQ,EAAc+I,IACjD,IAAIpjD,EAAI,EAAGA,EAAIq6C,EAAar6C,GAAKqjD,EAAK,CAClC,MAAM7+B,EAAUnrB,KAAKuuB,WAAW5nB,GAChC,MAAMsjD,EAAcxhC,EAAKwO,WAAW9L,GACpC,MAAM++B,EAAoBjhC,EAAOgO,WAAW9L,GAC5C,MAAMzC,EAAYuhC,EAAYvhC,UAC9B,MAAMyhC,EAAYF,EAAYj1C,MAC9B,MAAM+tB,EAAamnB,EAAkBhhC,MAAQ,GAC7C,MAAM8Z,EAAmBknB,EAAkB/gC,WAC3C,MAAML,EAAYmhC,EAAYnhC,UAC9B,MAAME,EAAYihC,EAAYjhC,UAC9B,MAAMohC,EAAiBH,EAAYG,gBAAkB,GACrD,MAAMC,EAAuBJ,EAAYI,qBACzC5I,EAAYL,GAAoBphD,KAAM2G,EAAGyhB,GACzC,GAAIq5B,IAAcvhD,UAAW,CACzB,QAChB,CACYopD,EAAmBr7B,GAAY7G,EAAOq6B,EAAW/4B,GACjD,GAAIyuB,EAAc,CACdoS,EAAME,EAAME,EAAKE,EAAKP,CACtC,KAAmB,CACHE,EAAME,EAAME,EAAKE,EAAKR,CACtC,CACYlpD,EAAMwD,KAAK,CACP2lD,MACAC,MACAC,MACAC,MACAC,KACAC,KACAC,KACAC,KACA1gC,MAAOV,EACP1T,MAAOm1C,EACPpnB,aACAC,mBACAla,YACAE,YACAohC,iBACAC,wBAEhB,CACQrqD,KAAKujD,aAAevC,EACpBhhD,KAAKwjD,aAAe6F,EACpB,OAAOjpD,CACf,CACC,kBAAA+jD,CAAmBxT,GACZ,MAAM3vB,EAAOhhB,KAAKghB,KAClB,MAAM1I,EAAUtY,KAAKsY,QACrB,MAAMs8B,SAAEA,EAAWztB,MAAO0hC,GAAiBvwC,EAC3C,MAAM6+B,EAAen3C,KAAKm3C,eAC1B,MAAMhwB,EAAQnnB,KAAKmnB,MACnB,MAAM9G,MAAEA,EAAK4J,WAAGA,EAAUrE,QAAGA,EAAO6D,OAAGA,GAAYo/B,EACnD,MAAMG,EAAKlH,GAAkBxpC,EAAQmQ,MACrC,MAAM6hC,EAAiBtB,EAAKpjC,EAC5B,MAAM2kC,EAAkB9gC,GAAU7D,EAAU0kC,EAC5C,MAAMj7B,GAAYpT,GAAUjc,KAAK6iD,eACjC,MAAMziD,EAAQ,GACd,IAAIuG,EAAGgR,EAAM6sB,EAAMgM,EAAO1oC,EAAGoR,EAAGuY,EAAWvD,EAAO1C,EAAMG,EAAY6+B,EAAWC,EAC/E,IAAI/4B,EAAe,SACnB,GAAIkjB,IAAa,MAAO,CACpB17B,EAAIlZ,KAAK+lB,OAASwkC,EAClB94B,EAAYzxB,KAAK0qD,yBAC7B,MAAe,GAAI9V,IAAa,SAAU,CAC9B17B,EAAIlZ,KAAK6lB,IAAM0kC,EACf94B,EAAYzxB,KAAK0qD,yBAC7B,MAAe,GAAI9V,IAAa,OAAQ,CAC5B,MAAM7uC,EAAM/F,KAAK2qD,wBAAwB3B,GACzCv3B,EAAY1rB,EAAI0rB,UAChB3pB,EAAI/B,EAAI+B,CACpB,MAAe,GAAI8sC,IAAa,QAAS,CAC7B,MAAM7uC,EAAM/F,KAAK2qD,wBAAwB3B,GACzCv3B,EAAY1rB,EAAI0rB,UAChB3pB,EAAI/B,EAAI+B,CACpB,MAAe,GAAIkZ,IAAS,IAAK,CACrB,GAAI4zB,IAAa,SAAU,CACvB17B,GAAKy3B,EAAU9qB,IAAM8qB,EAAU5qB,QAAU,EAAIukC,CAC7D,MAAmB,GAAIj0C,GAASu+B,GAAW,CAC3B,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvBppC,EAAIlZ,KAAKonB,MAAMwF,OAAO01B,GAAgBlhC,iBAAiB5e,GAAS8nD,CAChF,CACY74B,EAAYzxB,KAAK0qD,yBAC7B,MAAe,GAAI1pC,IAAS,IAAK,CACrB,GAAI4zB,IAAa,SAAU,CACvB9sC,GAAK6oC,EAAU3qB,KAAO2qB,EAAU7qB,OAAS,EAAIwkC,CAC7D,MAAmB,GAAIj0C,GAASu+B,GAAW,CAC3B,MAAM0N,EAAiB3vC,OAAOD,KAAKkiC,GAAU,GAC7C,MAAMpyC,EAAQoyC,EAAS0N,GACvBx6C,EAAI9H,KAAKonB,MAAMwF,OAAO01B,GAAgBlhC,iBAAiB5e,EACvE,CACYivB,EAAYzxB,KAAK2qD,wBAAwB3B,GAAIv3B,SACzD,CACQ,GAAIzQ,IAAS,IAAK,CACd,GAAIX,IAAU,QAAS,CACnBqR,EAAe,KAC/B,MAAmB,GAAIrR,IAAU,MAAO,CACxBqR,EAAe,QAC/B,CACA,CACQ,MAAM40B,EAAatmD,KAAKumD,iBACxB,IAAI5/C,EAAI,EAAGgR,EAAOwP,EAAMvlB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC1C69B,EAAOrd,EAAMxgB,GACb6pC,EAAQhM,EAAKgM,MACb,MAAMyZ,EAAcpB,EAAY5xB,WAAWj3B,KAAKuuB,WAAW5nB,IAC3DunB,EAAQluB,KAAK0hD,gBAAgB/6C,GAAKkiD,EAAY/+B,YAC9C0B,EAAOxrB,KAAKqoD,wBAAwB1hD,GACpCglB,EAAaH,EAAKG,WAClB6+B,EAAYvjD,GAAQupC,GAASA,EAAM5uC,OAAS,EAC5C,MAAMgpD,EAAYJ,EAAY,EAC9B,MAAMx1C,EAAQi1C,EAAYj1C,MAC1B,MAAM6d,EAAco3B,EAAYtgC,gBAChC,MAAMiJ,EAAcq3B,EAAYvgC,gBAChC,IAAImhC,EAAgBp5B,EACpB,GAAI0lB,EAAc,CACdrvC,EAAIomB,EACJ,GAAIuD,IAAc,QAAS,CACvB,GAAI9qB,IAAMgR,EAAO,EAAG,CAChBkzC,GAAiB7qD,KAAKsY,QAAQf,QAAU,QAAU,MAC1E,MAA2B,GAAI5Q,IAAM,EAAG,CAChBkkD,GAAiB7qD,KAAKsY,QAAQf,QAAU,OAAS,OACzE,KAA2B,CACHszC,EAAgB,QACxC,CACA,CACgB,GAAIjW,IAAa,MAAO,CACpB,GAAI3qB,IAAe,QAAUoF,IAAa,EAAG,CACzCo7B,GAAcD,EAAY7+B,EAAaA,EAAa,CAC5E,MAA2B,GAAI1B,IAAe,SAAU,CAChCwgC,GAAcnE,EAAWK,QAAQh4B,OAAS,EAAIi8B,EAAYj/B,EAAaA,CAC/F,KAA2B,CACH8+B,GAAcnE,EAAWK,QAAQh4B,OAAShD,EAAa,CAC/E,CACA,KAAuB,CACH,GAAI1B,IAAe,QAAUoF,IAAa,EAAG,CACzCo7B,EAAa9+B,EAAa,CAClD,MAA2B,GAAI1B,IAAe,SAAU,CAChCwgC,EAAanE,EAAWK,QAAQh4B,OAAS,EAAIi8B,EAAYj/B,CACjF,KAA2B,CACH8+B,EAAanE,EAAWK,QAAQh4B,OAAS67B,EAAY7+B,CAC7E,CACA,CACgB,GAAIlC,EAAQ,CACRghC,IAAe,CACnC,CACgB,GAAIp7B,IAAa,IAAM46B,EAAY//B,kBAAmB,CAClDpiB,GAAK6jB,EAAa,EAAIvnB,KAAK6d,IAAIoN,EACnD,CACA,KAAmB,CACHnW,EAAIgV,EACJu8B,GAAc,EAAID,GAAa7+B,EAAa,CAC5D,CACY,IAAImH,EACJ,GAAIm3B,EAAY//B,kBAAmB,CAC/B,MAAM4gC,EAAeh3B,GAAUm2B,EAAY7/B,iBAC3C,MAAMuE,EAAS23B,EAAWwB,QAAQnhD,GAClC,MAAMyiB,EAAQk9B,EAAWuB,OAAOlhD,GAChC,IAAIkf,EAAM4kC,EAAaK,EAAajlC,IACpC,IAAIG,EAAO,EAAI8kC,EAAa9kC,KAC5B,OAAO0L,GACH,IAAK,SACD7L,GAAO8I,EAAS,EAChB,MACJ,IAAK,SACD9I,GAAO8I,EACP,MAER,OAAO8C,GACH,IAAK,SACDzL,GAAQoD,EAAQ,EAChB,MACJ,IAAK,QACDpD,GAAQoD,EACR,MACJ,IAAK,QACD,GAAIziB,IAAMgR,EAAO,EAAG,CAChBqO,GAAQoD,CACpC,MAA+B,GAAIziB,EAAI,EAAG,CACdqf,GAAQoD,EAAQ,CAC5C,CACwB,MAER0J,EAAW,CACP9M,OACAH,MACAuD,MAAOA,EAAQ0hC,EAAa1hC,MAC5BuF,OAAQA,EAASm8B,EAAan8B,OAC9B3Z,MAAOi1C,EAAY9/B,cAEvC,CACY/pB,EAAMwD,KAAK,CACP4sC,QACAhlB,OACAi/B,aACAnyC,QAAS,CACL+W,WACAra,QACA6d,cACAD,cACAnB,UAAWo5B,EACXn5B,eACAH,YAAa,CACTzpB,EACAoR,GAEJ4Z,aAGpB,CACQ,OAAO1yB,CACf,CACI,uBAAAsqD,GACI,MAAM9V,SAAEA,EAAQztB,MAAGA,GAAWnnB,KAAKsY,QACnC,MAAM+W,GAAYpT,GAAUjc,KAAK6iD,eACjC,GAAIxzB,EAAU,CACV,OAAOulB,IAAa,MAAQ,OAAS,OACjD,CACQ,IAAIv0B,EAAQ,SACZ,GAAI8G,EAAM9G,QAAU,QAAS,CACzBA,EAAQ,MACpB,MAAe,GAAI8G,EAAM9G,QAAU,MAAO,CAC9BA,EAAQ,OACpB,MAAe,GAAI8G,EAAM9G,QAAU,QAAS,CAChCA,EAAQ,OACpB,CACQ,OAAOA,CACf,CACI,uBAAAsqC,CAAwB3B,GACpB,MAAMpU,SAAEA,EAAWztB,OAAO8C,WAAEA,EAAUR,OAAGA,EAAM7D,QAAGA,IAAgB5lB,KAAKsY,QACvE,MAAMguC,EAAatmD,KAAKumD,iBACxB,MAAM+D,EAAiBtB,EAAKpjC,EAC5B,MAAM6gC,EAASH,EAAWG,OAAOr9B,MACjC,IAAIqI,EACJ,IAAI3pB,EACJ,GAAI8sC,IAAa,OAAQ,CACrB,GAAInrB,EAAQ,CACR3hB,EAAI9H,KAAK8lB,MAAQF,EACjB,GAAIqE,IAAe,OAAQ,CACvBwH,EAAY,MAChC,MAAuB,GAAIxH,IAAe,SAAU,CAChCwH,EAAY,SACZ3pB,GAAK2+C,EAAS,CAClC,KAAuB,CACHh1B,EAAY,QACZ3pB,GAAK2+C,CACzB,CACA,KAAmB,CACH3+C,EAAI9H,KAAK8lB,MAAQwkC,EACjB,GAAIrgC,IAAe,OAAQ,CACvBwH,EAAY,OAChC,MAAuB,GAAIxH,IAAe,SAAU,CAChCwH,EAAY,SACZ3pB,GAAK2+C,EAAS,CAClC,KAAuB,CACHh1B,EAAY,OACZ3pB,EAAI9H,KAAKgmB,IAC7B,CACA,CACA,MAAe,GAAI4uB,IAAa,QAAS,CAC7B,GAAInrB,EAAQ,CACR3hB,EAAI9H,KAAKgmB,KAAOJ,EAChB,GAAIqE,IAAe,OAAQ,CACvBwH,EAAY,OAChC,MAAuB,GAAIxH,IAAe,SAAU,CAChCwH,EAAY,SACZ3pB,GAAK2+C,EAAS,CAClC,KAAuB,CACHh1B,EAAY,OACZ3pB,GAAK2+C,CACzB,CACA,KAAmB,CACH3+C,EAAI9H,KAAKgmB,KAAOskC,EAChB,GAAIrgC,IAAe,OAAQ,CACvBwH,EAAY,MAChC,MAAuB,GAAIxH,IAAe,SAAU,CAChCwH,EAAY,SACZ3pB,GAAK2+C,EAAS,CAClC,KAAuB,CACHh1B,EAAY,QACZ3pB,EAAI9H,KAAK8lB,KAC7B,CACA,CACA,KAAe,CACH2L,EAAY,OACxB,CACQ,MAAO,CACHA,YACA3pB,IAEZ,CACC,iBAAAijD,GACO,GAAI/qD,KAAKsY,QAAQ6O,MAAMsC,OAAQ,CAC3B,MACZ,CACQ,MAAMrC,EAAQpnB,KAAKonB,MACnB,MAAMwtB,EAAW50C,KAAKsY,QAAQs8B,SAC9B,GAAIA,IAAa,QAAUA,IAAa,QAAS,CAC7C,MAAO,CACH/uB,IAAK,EACLG,KAAMhmB,KAAKgmB,KACXD,OAAQqB,EAAMuH,OACd7I,MAAO9lB,KAAK8lB,MAE5B,CACQ,GAAI8uB,IAAa,OAASA,IAAa,SAAU,CAC7C,MAAO,CACH/uB,IAAK7lB,KAAK6lB,IACVG,KAAM,EACND,OAAQ/lB,KAAK+lB,OACbD,MAAOsB,EAAMgC,MAE7B,CACA,CACC,cAAA4hC,GACO,MAAMl/B,IAAEA,EAAMxT,SAASyS,gBAAEA,GAAkB/E,KAAGA,EAAIH,IAAGA,EAAGuD,MAAGA,EAAKuF,OAAGA,GAAY3uB,KAC/E,GAAI+qB,EAAiB,CACjBe,EAAI0C,OACJ1C,EAAI0F,UAAYzG,EAChBe,EAAI2G,SAASzM,EAAMH,EAAKuD,EAAOuF,GAC/B7C,EAAI8C,SAChB,CACA,CACI,oBAAAq8B,CAAqBzoD,GACjB,MAAMimB,EAAOzoB,KAAKsY,QAAQmQ,KAC1B,IAAKzoB,KAAKqmD,eAAiB59B,EAAKN,QAAS,CACrC,OAAO,CACnB,CACQ,MAAMhB,EAAQnnB,KAAKmnB,MACnB,MAAMpP,EAAQoP,EAAM+jC,WAAWp3C,GAAIA,EAAEtR,QAAUA,IAC/C,GAAIuV,GAAS,EAAG,CACZ,MAAMuZ,EAAO7I,EAAKwO,WAAWj3B,KAAKuuB,WAAWxW,IAC7C,OAAOuZ,EAAK5I,SACxB,CACQ,OAAO,CACf,CACC,QAAAyiC,CAASxa,GACF,MAAMloB,EAAOzoB,KAAKsY,QAAQmQ,KAC1B,MAAMqD,EAAM9rB,KAAK8rB,IACjB,MAAM1rB,EAAQJ,KAAK+iD,iBAAmB/iD,KAAK+iD,eAAiB/iD,KAAK+oD,sBAAsBpY,IACvF,IAAIhqC,EAAGgR,EACP,MAAMyzC,EAAW,CAAC3jD,EAAIC,EAAIgkB,KACtB,IAAKA,EAAMtC,QAAUsC,EAAM1W,MAAO,CAC9B,MAChB,CACY8W,EAAI0C,OACJ1C,EAAIpD,UAAYgD,EAAMtC,MACtB0C,EAAIuG,YAAc3G,EAAM1W,MACxB8W,EAAIu/B,YAAY3/B,EAAMqX,YAAc,IACpCjX,EAAIw/B,eAAiB5/B,EAAMsX,iBAC3BlX,EAAI4D,YACJ5D,EAAIgE,OAAOroB,EAAGK,EAAGL,EAAGyR,GACpB4S,EAAIiE,OAAOroB,EAAGI,EAAGJ,EAAGwR,GACpB4S,EAAIsE,SACJtE,EAAI8C,SAAS,EAEjB,GAAInG,EAAKN,QAAS,CACd,IAAIxhB,EAAI,EAAGgR,EAAOvX,EAAMwB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC1C,MAAMjG,EAAON,EAAMuG,GACnB,GAAI8hB,EAAKE,gBAAiB,CACtByiC,EAAS,CACLtjD,EAAGpH,EAAKipD,GACRzwC,EAAGxY,EAAKkpD,IACT,CACC9hD,EAAGpH,EAAKmpD,GACR3wC,EAAGxY,EAAKopD,IACTppD,EACvB,CACgB,GAAI+nB,EAAKG,UAAW,CAChBwiC,EAAS,CACLtjD,EAAGpH,EAAK6oD,IACRrwC,EAAGxY,EAAK8oD,KACT,CACC1hD,EAAGpH,EAAK+oD,IACRvwC,EAAGxY,EAAKgpD,KACT,CACC10C,MAAOtU,EAAKsoB,UACZI,MAAO1oB,EAAKooB,UACZia,WAAYriC,EAAK0pD,eACjBpnB,iBAAkBtiC,EAAK2pD,sBAE/C,CACA,CACA,CACA,CACC,UAAAkB,GACO,MAAMnkC,MAAEA,EAAK0E,IAAGA,EAAMxT,SAAS2Q,OAAEA,EAAMR,KAAGA,IAAazoB,KACvD,MAAMipD,EAAahgC,EAAOgO,WAAWj3B,KAAKuuB,cAC1C,MAAM26B,EAAYjgC,EAAOd,QAAU8gC,EAAW7/B,MAAQ,EACtD,IAAK8/B,EAAW,CACZ,MACZ,CACQ,MAAMsC,EAAgB/iC,EAAKwO,WAAWj3B,KAAKuuB,WAAW,IAAI7F,UAC1D,MAAM2gC,EAAcrpD,KAAKwjD,aACzB,IAAImG,EAAIE,EAAID,EAAIE,EAChB,GAAI9pD,KAAKm3C,eAAgB,CACrBwS,EAAK17B,GAAY7G,EAAOpnB,KAAKgmB,KAAMkjC,GAAaA,EAAY,EAC5DW,EAAK57B,GAAY7G,EAAOpnB,KAAK8lB,MAAO0lC,GAAiBA,EAAgB,EACrE5B,EAAKE,EAAKT,CACtB,KAAe,CACHO,EAAK37B,GAAY7G,EAAOpnB,KAAK6lB,IAAKqjC,GAAaA,EAAY,EAC3DY,EAAK77B,GAAY7G,EAAOpnB,KAAK+lB,OAAQylC,GAAiBA,EAAgB,EACtE7B,EAAKE,EAAKR,CACtB,CACQv9B,EAAI0C,OACJ1C,EAAIpD,UAAYugC,EAAW7/B,MAC3B0C,EAAIuG,YAAc42B,EAAWj0C,MAC7B8W,EAAI4D,YACJ5D,EAAIgE,OAAO65B,EAAIC,GACf99B,EAAIiE,OAAO85B,EAAIC,GACfh+B,EAAIsE,SACJtE,EAAI8C,SACZ,CACC,UAAA68B,CAAW9a,GACJ,MAAMkY,EAAc7oD,KAAKsY,QAAQ6O,MACjC,IAAK0hC,EAAY1gC,QAAS,CACtB,MACZ,CACQ,MAAM2D,EAAM9rB,KAAK8rB,IACjB,MAAMyE,EAAOvwB,KAAK+qD,oBAClB,GAAIx6B,EAAM,CACNE,GAAS3E,EAAKyE,EAC1B,CACQ,MAAMnwB,EAAQJ,KAAKkkD,cAAcvT,GACjC,IAAK,MAAMjwC,KAAQN,EAAM,CACrB,MAAMsrD,EAAoBhrD,EAAK4X,QAC/B,MAAM4vC,EAAWxnD,EAAK8qB,KACtB,MAAMglB,EAAQ9vC,EAAK8vC,MACnB,MAAMt3B,EAAIxY,EAAK+pD,WACf/3B,GAAW5G,EAAK0kB,EAAO,EAAGt3B,EAAGgvC,EAAUwD,EACnD,CACQ,GAAIn7B,EAAM,CACNG,GAAW5E,EACvB,CACA,CACC,SAAA6/B,GACO,MAAM7/B,IAAEA,EAAMxT,SAASs8B,SAAEA,EAAQvrB,MAAGA,EAAK9R,QAAGA,IAAgBvX,KAC5D,IAAKqpB,EAAMlB,QAAS,CAChB,MACZ,CACQ,MAAMqD,EAAOuI,GAAO1K,EAAMmC,MAC1B,MAAM5F,EAAUkO,GAAUzK,EAAMzD,SAChC,MAAMvF,EAAQgJ,EAAMhJ,MACpB,IAAI+H,EAASoD,EAAKG,WAAa,EAC/B,GAAIipB,IAAa,UAAYA,IAAa,UAAYv+B,GAASu+B,GAAW,CACtExsB,GAAUxC,EAAQG,OAClB,GAAI9e,GAAQoiB,EAAMC,MAAO,CACrBlB,GAAUoD,EAAKG,YAActC,EAAMC,KAAK1nB,OAAS,EACjE,CACA,KAAe,CACHwmB,GAAUxC,EAAQC,GAC9B,CACQ,MAAMu8B,OAAEA,EAAMC,OAAGA,EAAMrvB,SAAGA,EAAQ3D,SAAGA,GAAc8yB,GAAUniD,KAAMooB,EAAQwsB,EAAUv0B,GACrFqS,GAAW5G,EAAKzC,EAAMC,KAAM,EAAG,EAAGkC,EAAM,CACpCxW,MAAOqU,EAAMrU,MACbge,WACA3D,WACAoC,UAAWywB,GAAW7hC,EAAOu0B,EAAUr9B,GACvCma,aAAc,SACdH,YAAa,CACT6wB,EACAC,IAGhB,CACI,IAAAhe,CAAKsM,GACD,IAAK3wC,KAAKqmD,aAAc,CACpB,MACZ,CACQrmD,KAAKgrD,iBACLhrD,KAAKmrD,SAASxa,GACd3wC,KAAKurD,aACLvrD,KAAK2rD,YACL3rD,KAAKyrD,WAAW9a,EACxB,CACC,OAAAqJ,GACO,MAAM1oB,EAAOtxB,KAAKsY,QAClB,MAAMszC,EAAKt6B,EAAKnK,OAASmK,EAAKnK,MAAM8yB,GAAK,EACzC,MAAM4R,EAAKl1C,GAAe2a,EAAK7I,MAAQ6I,EAAK7I,KAAKwxB,GAAI,GACrD,MAAM6R,EAAKn1C,GAAe2a,EAAKrI,QAAUqI,EAAKrI,OAAOgxB,EAAG,GACxD,IAAKj6C,KAAKqmD,cAAgBrmD,KAAKqkC,OAASke,GAAMrsC,UAAUmuB,KAAM,CAC1D,MAAO,CACH,CACI4V,EAAG2R,EACHvnB,KAAOsM,IACH3wC,KAAKqkC,KAAKsM,EAAU,GAI5C,CACQ,MAAO,CACH,CACIsJ,EAAG4R,EACHxnB,KAAOsM,IACH3wC,KAAKgrD,iBACLhrD,KAAKmrD,SAASxa,GACd3wC,KAAK2rD,WAAW,GAGxB,CACI1R,EAAG6R,EACHznB,KAAM,KACFrkC,KAAKurD,YAAY,GAGzB,CACItR,EAAG2R,EACHvnB,KAAOsM,IACH3wC,KAAKyrD,WAAW9a,EAAU,GAI9C,CACC,uBAAA5G,CAAwBxnC,GACjB,MAAMuhD,EAAQ9jD,KAAKonB,MAAM0tB,+BACzB,MAAMiX,EAAS/rD,KAAKghB,KAAO,SAC3B,MAAMzF,EAAS,GACf,IAAI5U,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAOmsC,EAAMliD,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC1C,MAAM6Z,EAAOsjC,EAAMn9C,GACnB,GAAI6Z,EAAKurC,KAAY/rD,KAAKY,MAAQ2B,GAAQie,EAAKje,OAASA,GAAO,CAC3DgZ,EAAO3X,KAAK4c,EAC5B,CACA,CACQ,OAAOjF,CACf,CACC,uBAAA8sC,CAAwBtwC,GACjB,MAAMuZ,EAAOtxB,KAAKsY,QAAQ6O,MAAM8P,WAAWj3B,KAAKuuB,WAAWxW,IAC3D,OAAOgc,GAAOzC,EAAK9F,KAC3B,CACC,UAAAwgC,GACO,MAAMC,EAAWjsD,KAAKqoD,wBAAwB,GAAG18B,WACjD,OAAQ3rB,KAAKm3C,eAAiBn3C,KAAKopB,MAAQppB,KAAK2uB,QAAUs9B,CAClE,EAGA,MAAMC,GACF,WAAAx3C,CAAYnS,EAAMooB,EAAOoC,GACrB/sB,KAAKuC,KAAOA,EACZvC,KAAK2qB,MAAQA,EACb3qB,KAAK+sB,SAAWA,EAChB/sB,KAAKI,MAAQuS,OAAOsF,OAAO,KACnC,CACI,SAAAk0C,CAAU5pD,GACN,OAAOoQ,OAAOuD,UAAUk2C,cAAch2C,KAAKpW,KAAKuC,KAAK2T,UAAW3T,EAAK2T,UAC7E,CACC,QAAAm2C,CAAS3rD,GACF,MAAMyT,EAAQxB,OAAOwjB,eAAez1B,GACpC,IAAI4rD,EACJ,GAAIC,GAAkBp4C,GAAQ,CAC1Bm4C,EAActsD,KAAKqsD,SAASl4C,EACxC,CACQ,MAAM/T,EAAQJ,KAAKI,MACnB,MAAMQ,EAAKF,EAAKE,GAChB,MAAM+pB,EAAQ3qB,KAAK2qB,MAAQ,IAAM/pB,EACjC,IAAKA,EAAI,CACL,MAAM,IAAIM,MAAM,2BAA6BR,EACzD,CACQ,GAAIE,KAAMR,EAAO,CACb,OAAOuqB,CACnB,CACQvqB,EAAMQ,GAAMF,EACZ8rD,GAAiB9rD,EAAMiqB,EAAO2hC,GAC9B,GAAItsD,KAAK+sB,SAAU,CACftI,GAASsI,SAASrsB,EAAKE,GAAIF,EAAK4pB,UAC5C,CACQ,OAAOK,CACf,CACC,GAAAlE,CAAI7lB,GACG,OAAOZ,KAAKI,MAAMQ,EAC1B,CACC,UAAA6rD,CAAW/rD,GACJ,MAAMN,EAAQJ,KAAKI,MACnB,MAAMQ,EAAKF,EAAKE,GAChB,MAAM+pB,EAAQ3qB,KAAK2qB,MACnB,GAAI/pB,KAAMR,EAAO,QACNA,EAAMQ,EACzB,CACQ,GAAI+pB,GAAS/pB,KAAM6jB,GAASkG,GAAQ,QACzBlG,GAASkG,GAAO/pB,GACvB,GAAIZ,KAAK+sB,SAAU,QACRzC,GAAU1pB,EACjC,CACA,CACA,EAEA,SAAS4rD,GAAiB9rD,EAAMiqB,EAAO2hC,GACnC,MAAMI,EAAej0C,GAAM9F,OAAOsF,OAAO,MAAO,CAC5Cq0C,EAAc7nC,GAASgC,IAAI6lC,GAAe,GAC1C7nC,GAASgC,IAAIkE,GACbjqB,EAAK+jB,WAETA,GAASC,IAAIiG,EAAO+hC,GACpB,GAAIhsD,EAAKisD,cAAe,CACpBC,GAAcjiC,EAAOjqB,EAAKisD,cAClC,CACI,GAAIjsD,EAAK6pB,YAAa,CAClB9F,GAASK,SAAS6F,EAAOjqB,EAAK6pB,YACtC,CACA,CACA,SAASqiC,GAAcjiC,EAAOkiC,GAC1Bl6C,OAAOD,KAAKm6C,GAAQ5tC,SAASjD,IACzB,MAAM8wC,EAAgB9wC,EAAS3C,MAAM,KACrC,MAAM0zC,EAAaD,EAAcrxC,MACjC,MAAMuxC,EAAc,CAChBriC,GACFytB,OAAO0U,GAAe90B,KAAK,KAC7B,MAAM5e,EAAQyzC,EAAO7wC,GAAU3C,MAAM,KACrC,MAAM4T,EAAa7T,EAAMqC,MACzB,MAAMuR,EAAc5T,EAAM4e,KAAK,KAC/BvT,GAAS3jB,MAAMksD,EAAaD,EAAY//B,EAAaC,EAAW,GAExE,CACA,SAASs/B,GAAkBp4C,GACvB,MAAO,OAAQA,GAAS,aAAcA,CAC1C,CAEA,MAAM84C,GACF,WAAAv4C,GACI1U,KAAKktD,YAAc,IAAIhB,GAActgB,GAAmB,WAAY,MACpE5rC,KAAKsrB,SAAW,IAAI4gC,GAAcrN,GAAS,YAC3C7+C,KAAKysB,QAAU,IAAIy/B,GAAcv5C,OAAQ,WACzC3S,KAAK4sB,OAAS,IAAIs/B,GAAc3J,GAAO,UACvCviD,KAAKmtD,iBAAmB,CACpBntD,KAAKktD,YACLltD,KAAK4sB,OACL5sB,KAAKsrB,SAEjB,CACC,GAAAqJ,IAAOzd,GACAlX,KAAKotD,MAAM,WAAYl2C,EAC/B,CACI,MAAAiuB,IAAUjuB,GACNlX,KAAKotD,MAAM,aAAcl2C,EACjC,CACC,cAAAm2C,IAAkBn2C,GACXlX,KAAKotD,MAAM,WAAYl2C,EAAMlX,KAAKktD,YAC1C,CACC,WAAAngB,IAAe71B,GACRlX,KAAKotD,MAAM,WAAYl2C,EAAMlX,KAAKsrB,SAC1C,CACC,UAAAgiC,IAAcp2C,GACPlX,KAAKotD,MAAM,WAAYl2C,EAAMlX,KAAKysB,QAC1C,CACC,SAAA8gC,IAAar2C,GACNlX,KAAKotD,MAAM,WAAYl2C,EAAMlX,KAAK4sB,OAC1C,CACC,aAAA4gC,CAAc5sD,GACP,OAAOZ,KAAKytD,KAAK7sD,EAAIZ,KAAKktD,YAAa,aAC/C,CACC,UAAAQ,CAAW9sD,GACJ,OAAOZ,KAAKytD,KAAK7sD,EAAIZ,KAAKsrB,SAAU,UAC5C,CACC,SAAAqiC,CAAU/sD,GACH,OAAOZ,KAAKytD,KAAK7sD,EAAIZ,KAAKysB,QAAS,SAC3C,CACC,QAAAmhC,CAAShtD,GACF,OAAOZ,KAAKytD,KAAK7sD,EAAIZ,KAAK4sB,OAAQ,QAC1C,CACC,iBAAAihC,IAAqB32C,GACdlX,KAAKotD,MAAM,aAAcl2C,EAAMlX,KAAKktD,YAC5C,CACC,cAAAY,IAAkB52C,GACXlX,KAAKotD,MAAM,aAAcl2C,EAAMlX,KAAKsrB,SAC5C,CACC,aAAAyiC,IAAiB72C,GACVlX,KAAKotD,MAAM,aAAcl2C,EAAMlX,KAAKysB,QAC5C,CACC,YAAAuhC,IAAgB92C,GACTlX,KAAKotD,MAAM,aAAcl2C,EAAMlX,KAAK4sB,OAC5C,CACC,KAAAwgC,CAAMluC,EAAQhI,EAAM+2C,GACb,IACO/2C,GACL+H,SAASivC,IACP,MAAMC,EAAMF,GAAiBjuD,KAAKouD,oBAAoBF,GACtD,GAAID,GAAiBE,EAAIhC,UAAU+B,IAAQC,IAAQnuD,KAAKysB,SAAWyhC,EAAIttD,GAAI,CACvEZ,KAAKquD,MAAMnvC,EAAQivC,EAAKD,EACxC,KAAmB,CACH72C,GAAK62C,GAAMxtD,IACP,MAAM4tD,EAAUL,GAAiBjuD,KAAKouD,oBAAoB1tD,GAC1DV,KAAKquD,MAAMnvC,EAAQovC,EAAS5tD,EAAK,GAErD,IAEA,CACC,KAAA2tD,CAAMnvC,EAAQqvC,EAAUC,GACjB,MAAMC,EAAc/0C,GAAYwF,GAChClI,GAASw3C,EAAU,SAAWC,GAAc,GAAID,GAChDD,EAASrvC,GAAQsvC,GACjBx3C,GAASw3C,EAAU,QAAUC,GAAc,GAAID,EACvD,CACC,mBAAAJ,CAAoB7rD,GACb,IAAI,IAAIoE,EAAI,EAAGA,EAAI3G,KAAKmtD,iBAAiBvrD,OAAQ+E,IAAI,CACjD,MAAMwnD,EAAMnuD,KAAKmtD,iBAAiBxmD,GAClC,GAAIwnD,EAAIhC,UAAU5pD,GAAO,CACrB,OAAO4rD,CACvB,CACA,CACQ,OAAOnuD,KAAKysB,OACpB,CACC,IAAAghC,CAAK7sD,EAAIqtD,EAAe1rD,GACjB,MAAM7B,EAAOutD,EAAcxnC,IAAI7lB,GAC/B,GAAIF,IAASR,UAAW,CACpB,MAAM,IAAIgB,MAAM,IAAMN,EAAK,yBAA2B2B,EAAO,IACzE,CACQ,OAAO7B,CACf,EAEA,IAAI6tD,GAA2B,IAAItB,GAEnC,MAAMyB,GACF,WAAAh6C,GACI1U,KAAK2uD,MAAQ,EACrB,CACC,MAAAC,CAAOxnC,EAAOynC,EAAM33C,EAAMhU,GACnB,GAAI2rD,IAAS,aAAc,CACvB7uD,KAAK2uD,MAAQ3uD,KAAK8uD,mBAAmB1nC,EAAO,MAC5CpnB,KAAKwjC,QAAQxjC,KAAK2uD,MAAOvnC,EAAO,UAC5C,CACQ,MAAMmD,EAAcrnB,EAASlD,KAAK6qB,aAAazD,GAAOlkB,OAAOA,GAAUlD,KAAK6qB,aAAazD,GACzF,MAAM7L,EAASvb,KAAKwjC,QAAQjZ,EAAanD,EAAOynC,EAAM33C,GACtD,GAAI23C,IAAS,eAAgB,CACzB7uD,KAAKwjC,QAAQjZ,EAAanD,EAAO,QACjCpnB,KAAKwjC,QAAQxjC,KAAK2uD,MAAOvnC,EAAO,YAC5C,CACQ,OAAO7L,CACf,CACC,OAAAioB,CAAQjZ,EAAanD,EAAOynC,EAAM33C,GAC3BA,EAAOA,GAAQ,GACf,IAAK,MAAM63C,KAAcxkC,EAAY,CACjC,MAAMykC,EAASD,EAAWC,OAC1B,MAAM9vC,EAAS8vC,EAAOH,GACtB,MAAMpX,EAAS,CACXrwB,EACAlQ,EACA63C,EAAWz2C,SAEf,GAAItB,GAASkI,EAAQu4B,EAAQuX,KAAY,OAAS93C,EAAK+3C,WAAY,CAC/D,OAAO,KACvB,CACA,CACQ,OAAO,IACf,CACI,UAAAC,GACI,IAAKj5C,GAAcjW,KAAKyjD,QAAS,CAC7BzjD,KAAKmvD,UAAYnvD,KAAKyjD,OACtBzjD,KAAKyjD,OAASvjD,SAC1B,CACA,CACC,YAAA2qB,CAAazD,GACN,GAAIpnB,KAAKyjD,OAAQ,CACb,OAAOzjD,KAAKyjD,MACxB,CACQ,MAAMl5B,EAAcvqB,KAAKyjD,OAASzjD,KAAK8uD,mBAAmB1nC,GAC1DpnB,KAAKovD,oBAAoBhoC,GACzB,OAAOmD,CACf,CACI,kBAAAukC,CAAmB1nC,EAAOygB,GACtB,MAAMhB,EAASzf,GAASA,EAAMyf,OAC9B,MAAMvuB,EAAU3B,GAAekwB,EAAOvuB,SAAWuuB,EAAOvuB,QAAQmU,QAAS,IACzE,MAAMA,EAAU4iC,GAAWxoB,GAC3B,OAAOvuB,IAAY,QAAUuvB,EAAM,GAAKynB,GAAkBloC,EAAOqF,EAASnU,EAASuvB,EAC3F,CACC,mBAAAunB,CAAoBhoC,GACb,MAAMmoC,EAAsBvvD,KAAKmvD,WAAa,GAC9C,MAAM5kC,EAAcvqB,KAAKyjD,OACzB,MAAM9C,EAAO,CAACr/C,EAAGC,IAAID,EAAE4B,QAAQ4E,IAAKvG,EAAEiuD,MAAMt2C,GAAIpR,EAAEknD,OAAOpuD,KAAOsY,EAAE81C,OAAOpuD,OACzEZ,KAAKwjC,QAAQmd,EAAK4O,EAAqBhlC,GAAcnD,EAAO,QAC5DpnB,KAAKwjC,QAAQmd,EAAKp2B,EAAaglC,GAAsBnoC,EAAO,QACpE,EAEC,SAASioC,GAAWxoB,GACjB,MAAM4oB,EAAW,GACjB,MAAMhjC,EAAU,GAChB,MAAM/Z,EAAOC,OAAOD,KAAK67C,GAAS9hC,QAAQrsB,OAC1C,IAAI,IAAIuG,EAAI,EAAGA,EAAI+L,EAAK9Q,OAAQ+E,IAAI,CAChC8lB,EAAQ7oB,KAAK2qD,GAASZ,UAAUj7C,EAAK/L,IAC7C,CACI,MAAM4mB,EAAQsZ,EAAOpa,SAAW,GAChC,IAAI,IAAI9lB,EAAI,EAAGA,EAAI4mB,EAAM3rB,OAAQ+E,IAAI,CACjC,MAAMqoD,EAASzhC,EAAM5mB,GACrB,GAAI8lB,EAAQrU,QAAQ42C,MAAa,EAAG,CAChCviC,EAAQ7oB,KAAKorD,GACbS,EAAST,EAAOpuD,IAAM,IAClC,CACA,CACI,MAAO,CACH6rB,UACAgjC,WAER,CACA,SAASC,GAAQp3C,EAASuvB,GACtB,IAAKA,GAAOvvB,IAAY,MAAO,CAC3B,OAAO,IACf,CACI,GAAIA,IAAY,KAAM,CAClB,MAAO,EACf,CACI,OAAOA,CACX,CACA,SAASg3C,GAAkBloC,GAAOqF,QAAEA,EAAOgjC,SAAGA,GAAan3C,EAASuvB,GAChE,MAAMtsB,EAAS,GACf,MAAM4P,EAAU/D,EAAMmH,aACtB,IAAK,MAAMygC,KAAUviC,EAAQ,CACzB,MAAM7rB,EAAKouD,EAAOpuD,GAClB,MAAM0wB,EAAOo+B,GAAQp3C,EAAQ1X,GAAKinC,GAClC,GAAIvW,IAAS,KAAM,CACf,QACZ,CACQ/V,EAAO3X,KAAK,CACRorD,SACA12C,QAASq3C,GAAWvoC,EAAMyf,OAAQ,CAC9BmoB,SACAzhC,MAAOkiC,EAAS7uD,IACjB0wB,EAAMnG,IAErB,CACI,OAAO5P,CACX,CACA,SAASo0C,GAAW9oB,GAAQmoB,OAAEA,EAAMzhC,MAAGA,GAAU+D,EAAMnG,GACnD,MAAMzY,EAAOm0B,EAAO+oB,gBAAgBZ,GACpC,MAAMj6B,EAAS8R,EAAOiI,gBAAgBxd,EAAM5e,GAC5C,GAAI6a,GAASyhC,EAAOvqC,SAAU,CAC1BsQ,EAAOnxB,KAAKorD,EAAOvqC,SAC3B,CACI,OAAOoiB,EAAOkI,eAAeha,EAAQ5J,EAAS,CAC1C,IACD,CACCkM,WAAY,MACZC,UAAW,MACXF,QAAS,MAEjB,CAEA,SAASy4B,GAAattD,EAAM+V,GACxB,MAAMw3C,EAAkBrrC,GAASwG,SAAS1oB,IAAS,GACnD,MAAMwtD,GAAkBz3C,EAAQ2S,UAAY,IAAI1oB,IAAS,GACzD,OAAOwtD,EAAe9jC,WAAa3T,EAAQ2T,WAAa6jC,EAAgB7jC,WAAa,GACzF,CACA,SAAS+jC,GAA0BpvD,EAAIqrB,GACnC,IAAIjL,EAAOpgB,EACX,GAAIA,IAAO,UAAW,CAClBogB,EAAOiL,CACf,MAAW,GAAIrrB,IAAO,UAAW,CACzBogB,EAAOiL,IAAc,IAAM,IAAM,GACzC,CACI,OAAOjL,CACX,CACA,SAASivC,GAA0BjvC,EAAMiL,GACrC,OAAOjL,IAASiL,EAAY,UAAY,SAC5C,CACA,SAASikC,GAActvD,GACnB,GAAIA,IAAO,KAAOA,IAAO,KAAOA,IAAO,IAAK,CACxC,OAAOA,CACf,CACA,CACA,SAASuvD,GAAiBvb,GACtB,GAAIA,IAAa,OAASA,IAAa,SAAU,CAC7C,MAAO,GACf,CACI,GAAIA,IAAa,QAAUA,IAAa,QAAS,CAC7C,MAAO,GACf,CACA,CACA,SAASwb,GAAcxvD,KAAOyvD,GAC1B,GAAIH,GAActvD,GAAK,CACnB,OAAOA,CACf,CACI,IAAK,MAAM0wB,KAAQ++B,EAAa,CAC5B,MAAMrvC,EAAOsQ,EAAKtQ,MAAQmvC,GAAiB7+B,EAAKsjB,WAAah0C,EAAGgB,OAAS,GAAKsuD,GAActvD,EAAG,GAAGwS,eAClG,GAAI4N,EAAM,CACN,OAAOA,CACnB,CACA,CACI,MAAM,IAAI9f,MAAM,6BAA6BN,uDACjD,CACA,SAAS0vD,GAAmB1vD,EAAIogB,EAAM+pB,GAClC,GAAIA,EAAQ/pB,EAAO,YAAcpgB,EAAI,CACjC,MAAO,CACHogB,OAEZ,CACA,CACA,SAASuvC,GAAyB3vD,EAAIimC,GAClC,GAAIA,EAAOlZ,MAAQkZ,EAAOlZ,KAAK1C,SAAU,CACrC,MAAMulC,EAAU3pB,EAAOlZ,KAAK1C,SAAS/nB,QAAQiC,GAAIA,EAAEkoC,UAAYzsC,GAAMuE,EAAEooC,UAAY3sC,IACnF,GAAI4vD,EAAQ5uD,OAAQ,CAChB,OAAO0uD,GAAmB1vD,EAAI,IAAK4vD,EAAQ,KAAOF,GAAmB1vD,EAAI,IAAK4vD,EAAQ,GAClG,CACA,CACI,MAAO,EACX,CACA,SAASC,GAAiB5pB,EAAQvuB,GAC9B,MAAMo4C,EAAgBpmC,GAAUuc,EAAOtkC,OAAS,CAC5CqqB,OAAQ,IAEZ,MAAM+jC,EAAer4C,EAAQsU,QAAU,GACvC,MAAMgkC,EAAiBf,GAAahpB,EAAOtkC,KAAM+V,GACjD,MAAMsU,EAASja,OAAOsF,OAAO,MAC7BtF,OAAOD,KAAKi+C,GAAc1xC,SAASre,IAC/B,MAAMiwD,EAAYF,EAAa/vD,GAC/B,IAAKyV,GAASw6C,GAAY,CACtB,OAAO58B,QAAQ68B,MAAM,0CAA0ClwD,IAC3E,CACQ,GAAIiwD,EAAUj6B,OAAQ,CAClB,OAAO3C,QAAQC,KAAK,kDAAkDtzB,IAClF,CACQ,MAAMogB,EAAOovC,GAAcxvD,EAAIiwD,EAAWN,GAAyB3vD,EAAIimC,GAASpiB,GAASmI,OAAOikC,EAAUtuD,OAC1G,MAAMwuD,EAAYd,GAA0BjvC,EAAM4vC,GAClD,MAAMI,EAAsBN,EAAc9jC,QAAU,GACpDA,EAAOhsB,GAAMiY,GAAQlG,OAAOsF,OAAO,MAAO,CACtC,CACI+I,QAEJ6vC,EACAG,EAAoBhwC,GACpBgwC,EAAoBD,IACtB,IAENlqB,EAAOlZ,KAAK1C,SAAShM,SAAS8rB,IAC1B,MAAMxoC,EAAOwoC,EAAQxoC,MAAQskC,EAAOtkC,KACpC,MAAM0pB,EAAY8e,EAAQ9e,WAAa4jC,GAAattD,EAAM+V,GAC1D,MAAMw3C,EAAkBxlC,GAAU/nB,IAAS,GAC3C,MAAMyuD,EAAsBlB,EAAgBljC,QAAU,GACtDja,OAAOD,KAAKs+C,GAAqB/xC,SAASgyC,IACtC,MAAMjwC,EAAOgvC,GAA0BiB,EAAWhlC,GAClD,MAAMrrB,EAAKmqC,EAAQ/pB,EAAO,WAAaA,EACvC4L,EAAOhsB,GAAMgsB,EAAOhsB,IAAO+R,OAAOsF,OAAO,MACzCY,GAAQ+T,EAAOhsB,GAAK,CAChB,CACIogB,QAEJ2vC,EAAa/vD,GACbowD,EAAoBC,IACtB,GACJ,IAENt+C,OAAOD,KAAKka,GAAQ3N,SAAS5c,IACzB,MAAMsqB,EAAQC,EAAOvqB,GACrBwW,GAAQ8T,EAAO,CACXlI,GAASmI,OAAOD,EAAMpqB,MACtBkiB,GAASkI,OACX,IAEN,OAAOC,CACX,CACA,SAASskC,GAAYrqB,GACjB,MAAMvuB,EAAUuuB,EAAOvuB,UAAYuuB,EAAOvuB,QAAU,IACpDA,EAAQmU,QAAU9V,GAAe2B,EAAQmU,QAAS,IAClDnU,EAAQsU,OAAS6jC,GAAiB5pB,EAAQvuB,EAC9C,CACA,SAAS64C,GAASxjC,GACdA,EAAOA,GAAQ,GACfA,EAAK1C,SAAW0C,EAAK1C,UAAY,GACjC0C,EAAK2hB,OAAS3hB,EAAK2hB,QAAU,GAC7B,OAAO3hB,CACX,CACA,SAASyjC,GAAWvqB,GAChBA,EAASA,GAAU,GACnBA,EAAOlZ,KAAOwjC,GAAStqB,EAAOlZ,MAC9BujC,GAAYrqB,GACZ,OAAOA,CACX,CACA,MAAMwqB,GAAW,IAAInrC,IACrB,MAAMorC,GAAa,IAAIt6B,IACvB,SAASu6B,GAAWlrC,EAAUmrC,GAC1B,IAAI9+C,EAAO2+C,GAAS5qC,IAAIJ,GACxB,IAAK3T,EAAM,CACPA,EAAO8+C,IACPH,GAAS3sC,IAAI2B,EAAU3T,GACvB4+C,GAAW38B,IAAIjiB,EACvB,CACI,OAAOA,CACX,CACA,MAAM++C,GAAa,CAAC/sC,EAAK5P,EAAKzS,KAC1B,MAAMivB,EAAO9X,GAAiB1E,EAAKzS,GACnC,GAAIivB,IAASpxB,UAAW,CACpBwkB,EAAIiQ,IAAIrD,EAChB,GAEA,MAAMogC,GACF,WAAAh9C,CAAYmyB,GACR7mC,KAAK2xD,QAAUP,GAAWvqB,GAC1B7mC,KAAK4xD,YAAc,IAAI1rC,IACvBlmB,KAAK6xD,eAAiB,IAAI3rC,GAClC,CACI,YAAIkF,GACA,OAAOprB,KAAK2xD,QAAQvmC,QAC5B,CACI,QAAI7oB,GACA,OAAOvC,KAAK2xD,QAAQpvD,IAC5B,CACI,QAAIA,CAAKA,GACLvC,KAAK2xD,QAAQpvD,KAAOA,CAC5B,CACI,QAAIorB,GACA,OAAO3tB,KAAK2xD,QAAQhkC,IAC5B,CACI,QAAIA,CAAKA,GACL3tB,KAAK2xD,QAAQhkC,KAAOwjC,GAASxjC,EACrC,CACI,WAAIrV,GACA,OAAOtY,KAAK2xD,QAAQr5C,OAC5B,CACI,WAAIA,CAAQA,GACRtY,KAAK2xD,QAAQr5C,QAAUA,CAC/B,CACI,WAAImU,GACA,OAAOzsB,KAAK2xD,QAAQllC,OAC5B,CACI,MAAA4Z,GACI,MAAMQ,EAAS7mC,KAAK2xD,QACpB3xD,KAAK8xD,aACLZ,GAAYrqB,EACpB,CACI,UAAAirB,GACI9xD,KAAK4xD,YAAYG,QACjB/xD,KAAK6xD,eAAeE,OAC5B,CACC,gBAAAljB,CAAiBmjB,GACV,OAAOT,GAAWS,GAAa,IAAI,CAC3B,CACI,YAAYA,IACZ,MAGpB,CACC,yBAAA1gB,CAA0B0gB,EAAa3gB,GAChC,OAAOkgB,GAAW,GAAGS,gBAA0B3gB,KAAc,IAAI,CACzD,CACI,YAAY2gB,iBAA2B3gB,IACvC,eAAeA,KAEnB,CACI,YAAY2gB,IACZ,MAGpB,CACC,uBAAA/gB,CAAwB+gB,EAAajhB,GAC9B,OAAOwgB,GAAW,GAAGS,KAAejhB,KAAe,IAAI,CAC/C,CACI,YAAYihB,cAAwBjhB,IACpC,YAAYihB,IACZ,YAAYjhB,IACZ,MAGpB,CACC,eAAA6e,CAAgBZ,GACT,MAAMpuD,EAAKouD,EAAOpuD,GAClB,MAAM2B,EAAOvC,KAAKuC,KAClB,OAAOgvD,GAAW,GAAGhvD,YAAe3B,KAAM,IAAI,CACtC,CACI,WAAWA,OACRouD,EAAOiD,wBAA0B,MAGxD,CACC,aAAAC,CAAcC,EAAWC,GAClB,MAAMR,EAAc5xD,KAAK4xD,YACzB,IAAIv8B,EAAQu8B,EAAYnrC,IAAI0rC,GAC5B,IAAK98B,GAAS+8B,EAAY,CACtB/8B,EAAQ,IAAInP,IACZ0rC,EAAYltC,IAAIytC,EAAW98B,EACvC,CACQ,OAAOA,CACf,CACC,eAAAyZ,CAAgBqjB,EAAWE,EAAUD,GAC9B,MAAM95C,QAAEA,EAAO/V,KAAGA,GAAUvC,KAC5B,MAAMq1B,EAAQr1B,KAAKkyD,cAAcC,EAAWC,GAC5C,MAAM9mB,EAASjW,EAAM5O,IAAI4rC,GACzB,GAAI/mB,EAAQ,CACR,OAAOA,CACnB,CACQ,MAAMvW,EAAS,IAAIiC,IACnBq7B,EAASpzC,SAASvM,IACd,GAAIy/C,EAAW,CACXp9B,EAAOJ,IAAIw9B,GACXz/C,EAAKuM,SAAS5c,GAAMovD,GAAW18B,EAAQo9B,EAAW9vD,IAClE,CACYqQ,EAAKuM,SAAS5c,GAAMovD,GAAW18B,EAAQzc,EAASjW,KAChDqQ,EAAKuM,SAAS5c,GAAMovD,GAAW18B,EAAQzK,GAAU/nB,IAAS,GAAIF,KAC9DqQ,EAAKuM,SAAS5c,GAAMovD,GAAW18B,EAAQtQ,GAAUpiB,KACjDqQ,EAAKuM,SAAS5c,GAAMovD,GAAW18B,EAAQxK,GAAaloB,IAAK,IAE7D,MAAM0Z,EAAQ/U,MAAM0M,KAAKqhB,GACzB,GAAIhZ,EAAMna,SAAW,EAAG,CACpBma,EAAMnY,KAAK+O,OAAOsF,OAAO,MACrC,CACQ,GAAIq5C,GAAWt3C,IAAIq4C,GAAW,CAC1Bh9B,EAAM3Q,IAAI2tC,EAAUt2C,EAChC,CACQ,OAAOA,CACf,CACC,iBAAAu2C,GACO,MAAMh6C,QAAEA,EAAO/V,KAAGA,GAAUvC,KAC5B,MAAO,CACHsY,EACAgS,GAAU/nB,IAAS,GACnBkiB,GAASwG,SAAS1oB,IAAS,GAC3B,CACIA,QAEJkiB,GACA8F,GAEZ,CACC,mBAAA2mB,CAAoBnc,EAAQ9hB,EAAOkY,EAAS6J,EAAW,CAChD,KAEA,MAAMzZ,EAAS,CACXisB,QAAS,MAEb,MAAM/tB,SAAEA,EAAQ84C,YAAGA,GAAiBC,GAAYxyD,KAAK6xD,eAAgB98B,EAAQC,GAC7E,IAAI1c,EAAUmB,EACd,GAAIg5C,GAAYh5C,EAAUxG,GAAQ,CAC9BsI,EAAOisB,QAAU,MACjBrc,EAAUtR,GAAWsR,GAAWA,IAAYA,EAC5C,MAAMunC,EAAc1yD,KAAK+uC,eAAeha,EAAQ5J,EAASonC,GACzDj6C,EAAUke,GAAe/c,EAAU0R,EAASunC,EACxD,CACQ,IAAK,MAAM9+B,KAAQ3gB,EAAM,CACrBsI,EAAOqY,GAAQtb,EAAQsb,EACnC,CACQ,OAAOrY,CACf,CACC,cAAAwzB,CAAeha,EAAQ5J,EAAS6J,EAAW,CACpC,IACD2B,GACC,MAAMld,SAAEA,GAAc+4C,GAAYxyD,KAAK6xD,eAAgB98B,EAAQC,GAC/D,OAAO3e,GAAS8U,GAAWqL,GAAe/c,EAAU0R,EAASjrB,UAAWy2B,GAAsBld,CACtG,EAEA,SAAS+4C,GAAYG,EAAe59B,EAAQC,GACxC,IAAIK,EAAQs9B,EAAclsC,IAAIsO,GAC9B,IAAKM,EAAO,CACRA,EAAQ,IAAInP,IACZysC,EAAcjuC,IAAIqQ,EAAQM,EAClC,CACI,MAAMhP,EAAW2O,EAASgD,OAC1B,IAAIsT,EAASjW,EAAM5O,IAAIJ,GACvB,IAAKilB,EAAQ,CACT,MAAM7xB,EAAWqb,GAAgBC,EAAQC,GACzCsW,EAAS,CACL7xB,WACA84C,YAAav9B,EAAS9xB,QAAQmS,IAAKA,EAAEjC,cAAc4U,SAAS,YAEhEqN,EAAM3Q,IAAI2B,EAAUilB,EAC5B,CACI,OAAOA,CACX,CACA,MAAMsnB,GAAepwD,GAAQ6T,GAAS7T,IAAUmQ,OAAOu0B,oBAAoB1kC,GAAOgtD,MAAMntD,GAAMwX,GAAWrX,EAAMH,MAC/G,SAASowD,GAAYh8B,EAAOxjB,GACxB,MAAMukB,aAAEA,EAAYC,YAAGA,GAAiB5M,GAAa4L,GACrD,IAAK,MAAM7C,KAAQ3gB,EAAM,CACrB,MAAMokB,EAAaG,EAAa5D,GAChC,MAAM0D,EAAYG,EAAY7D,GAC9B,MAAMpxB,GAAS80B,GAAaD,IAAeZ,EAAM7C,GACjD,GAAIyD,IAAexd,GAAWrX,IAAUowD,GAAYpwD,KAAW80B,GAAarwB,GAAQzE,GAAQ,CACxF,OAAO,IACnB,CACA,CACI,OAAO,KACX,CAEA,IAAIqwD,GAAU,QAEd,MAAMC,GAAkB,CACpB,MACA,SACA,OACA,QACA,aAEJ,SAASC,GAAqBne,EAAU5zB,GACpC,OAAO4zB,IAAa,OAASA,IAAa,UAAYke,GAAgB16C,QAAQw8B,MAAe,GAAK5zB,IAAS,GAC/G,CACA,SAASgyC,GAAcC,EAAIC,GACvB,OAAO,SAAS5xD,EAAGC,GACf,OAAOD,EAAE2xD,KAAQ1xD,EAAE0xD,GAAM3xD,EAAE4xD,GAAM3xD,EAAE2xD,GAAM5xD,EAAE2xD,GAAM1xD,EAAE0xD,EAC3D,CACA,CACA,SAASE,GAAqBhoC,GAC1B,MAAM/D,EAAQ+D,EAAQ/D,MACtB,MAAM4f,EAAmB5f,EAAM9O,QAAQ8M,UACvCgC,EAAM2+B,cAAc,eACpB/uC,GAASgwB,GAAoBA,EAAiBosB,WAAY,CACtDjoC,GACD/D,EACP,CACA,SAASisC,GAAoBloC,GACzB,MAAM/D,EAAQ+D,EAAQ/D,MACtB,MAAM4f,EAAmB5f,EAAM9O,QAAQ8M,UACvCpO,GAASgwB,GAAoBA,EAAiBssB,WAAY,CACtDnoC,GACD/D,EACP,CACC,SAASmsC,GAAU7yD,GAChB,GAAIg7B,aAA4Bh7B,IAAS,SAAU,CAC/CA,EAAOi7B,SAAS63B,eAAe9yD,EACvC,MAAW,GAAIA,GAAQA,EAAKkB,OAAQ,CAC5BlB,EAAOA,EAAK,EACpB,CACI,GAAIA,GAAQA,EAAK4tB,OAAQ,CACrB5tB,EAAOA,EAAK4tB,MACpB,CACI,OAAO5tB,CACX,CACA,MAAM+yD,GAAY,GAClB,MAAMC,GAAYrxD,IACd,MAAMisB,EAASilC,GAAUlxD,GACzB,OAAOsQ,OAAOqU,OAAOysC,IAAWvwD,QAAQgC,GAAIA,EAAEopB,SAAWA,IAAQ7S,KAAK,EAE1E,SAASk4C,GAAgB7+C,EAAKuI,EAAOs1B,GACjC,MAAMjgC,EAAOC,OAAOD,KAAKoC,GACzB,IAAK,MAAMzS,KAAOqQ,EAAK,CACnB,MAAMkhD,GAAUvxD,EAChB,GAAIuxD,GAAUv2C,EAAO,CACjB,MAAM7a,EAAQsS,EAAIzS,UACXyS,EAAIzS,GACX,GAAIswC,EAAO,GAAKihB,EAASv2C,EAAO,CAC5BvI,EAAI8+C,EAASjhB,GAAQnwC,CACrC,CACA,CACA,CACA,CACC,SAASqxD,GAAmBlxD,EAAGmxD,EAAWC,EAAaC,GACpD,IAAKD,GAAepxD,EAAEJ,OAAS,WAAY,CACvC,OAAO,IACf,CACI,GAAIyxD,EAAS,CACT,OAAOF,CACf,CACI,OAAOnxD,CACX,CACA,SAASsxD,GAAetnC,EAAOgkB,EAAWujB,GACtC,OAAOvnC,EAAMrU,QAAQiQ,KAAOoE,EAAMunC,GAASvjB,EAAUujB,EACzD,CACA,SAASC,GAAe3zC,EAAMmwB,GAC1B,MAAMrvB,OAAEA,EAAMC,OAAGA,GAAYf,EAC7B,GAAIc,GAAUC,EAAQ,CAClB,MAAO,CACHyE,KAAMiuC,GAAe3yC,EAAQqvB,EAAW,QACxC7qB,MAAOmuC,GAAe3yC,EAAQqvB,EAAW,SACzC9qB,IAAKouC,GAAe1yC,EAAQovB,EAAW,OACvC5qB,OAAQkuC,GAAe1yC,EAAQovB,EAAW,UAEtD,CACI,OAAOA,CACX,CACA,MAAMyjB,GACFvoB,gBAAkBpnB,GAClBonB,iBAAmB4nB,GACnB5nB,iBAAmBvhB,GACnBuhB,gBAAkB0iB,GAClB1iB,eAAiBgnB,GACjBhnB,gBAAkB6nB,GAClB,eAAOrH,IAAYjsD,GACfmuD,GAAS55B,OAAOv0B,GAChBi0D,IACR,CACI,iBAAO5H,IAAcrsD,GACjBmuD,GAASppB,UAAU/kC,GACnBi0D,IACR,CACI,WAAA3/C,CAAYhU,EAAM4zD,GACd,MAAMztB,EAAS7mC,KAAK6mC,OAAS,IAAI6qB,GAAO4C,GACxC,MAAMC,EAAgBhB,GAAU7yD,GAChC,MAAM8zD,EAAgBd,GAASa,GAC/B,GAAIC,EAAe,CACf,MAAM,IAAItzD,MAAM,4CAA+CszD,EAAc5zD,GAAK,IAAO,iDAAoD4zD,EAAclmC,OAAO1tB,GAAK,mBACnL,CACQ,MAAM0X,EAAUuuB,EAAOkI,eAAelI,EAAOyrB,oBAAqBtyD,KAAKuuB,cACvEvuB,KAAKorB,SAAW,IAAKyb,EAAOzb,UAAYuzB,GAAgB4V,IACxDv0D,KAAKorB,SAAS0vB,aAAajU,GAC3B,MAAM1b,EAAUnrB,KAAKorB,SAASuvB,eAAe4Z,EAAej8C,EAAQsmB,aACpE,MAAMtQ,EAASnD,GAAWA,EAAQmD,OAClC,MAAMK,EAASL,GAAUA,EAAOK,OAChC,MAAMvF,EAAQkF,GAAUA,EAAOlF,MAC/BppB,KAAKY,GAAKoV,KACVhW,KAAK8rB,IAAMX,EACXnrB,KAAKsuB,OAASA,EACdtuB,KAAKopB,MAAQA,EACbppB,KAAK2uB,OAASA,EACd3uB,KAAKy0D,SAAWn8C,EAChBtY,KAAK00D,aAAe10D,KAAK4+B,YACzB5+B,KAAKg6C,QAAU,GACfh6C,KAAK20D,UAAY,GACjB30D,KAAKoqC,QAAUlqC,UACfF,KAAK+2C,MAAQ,GACb/2C,KAAKmuB,wBAA0BjuB,UAC/BF,KAAK2wC,UAAYzwC,UACjBF,KAAKskC,QAAU,GACftkC,KAAK40D,WAAa10D,UAClBF,KAAK60D,WAAa,GACjB70D,KAAK80D,qBAAuB50D,UAC7BF,KAAK+0D,gBAAkB,GACvB/0D,KAAK4sB,OAAS,GACd5sB,KAAKg1D,SAAW,IAAItG,GACpB1uD,KAAKs+C,SAAW,GAChBt+C,KAAKi1D,eAAiB,GACtBj1D,KAAKk1D,SAAW,MAChBl1D,KAAK0xC,oBAAsBxxC,UAC3BF,KAAKysC,SAAWvsC,UAChBF,KAAKm1D,UAAYp1C,IAAUoM,GAAOnsB,KAAKqmC,OAAOla,IAAO7T,EAAQ88C,aAAe,GAC5Ep1D,KAAK+yC,aAAe,GACpB0gB,GAAUzzD,KAAKY,IAAMZ,KACrB,IAAKmrB,IAAYmD,EAAQ,CACrB2F,QAAQ68B,MAAM,qEACd,MACZ,CACQ1rB,GAASP,OAAO7kC,KAAM,WAAYmzD,IAClC/tB,GAASP,OAAO7kC,KAAM,WAAYqzD,IAClCrzD,KAAKq1D,cACL,GAAIr1D,KAAKk1D,SAAU,CACfl1D,KAAKqmC,QACjB,CACA,CACI,eAAIzH,GACA,MAAQtmB,SAASsmB,YAAEA,EAAWtS,oBAAGA,GAAsBlD,MAAGA,EAAKuF,OAAGA,EAAM+lC,aAAGA,GAAkB10D,KAC7F,IAAKiW,GAAc2oB,GAAc,CAC7B,OAAOA,CACnB,CACQ,GAAItS,GAAuBooC,EAAc,CACrC,OAAOA,CACnB,CACQ,OAAO/lC,EAASvF,EAAQuF,EAAS,IACzC,CACI,QAAIhB,GACA,OAAO3tB,KAAK6mC,OAAOlZ,IAC3B,CACI,QAAIA,CAAKA,GACL3tB,KAAK6mC,OAAOlZ,KAAOA,CAC3B,CACI,WAAIrV,GACA,OAAOtY,KAAKy0D,QACpB,CACI,WAAIn8C,CAAQA,GACRtY,KAAK6mC,OAAOvuB,QAAUA,CAC9B,CACI,YAAIi2C,GACA,OAAOA,EACf,CACC,WAAA8G,GACOr1D,KAAK+lD,cAAc,cACnB,GAAI/lD,KAAKsY,QAAQoU,WAAY,CACzB1sB,KAAKqlB,QACjB,KAAe,CACH2Z,GAAYh/B,KAAMA,KAAKsY,QAAQ4S,iBAC3C,CACQlrB,KAAKs1D,aACLt1D,KAAK+lD,cAAc,aACnB,OAAO/lD,IACf,CACI,KAAA+xD,GACI1jC,GAAYruB,KAAKsuB,OAAQtuB,KAAK8rB,KAC9B,OAAO9rB,IACf,CACI,IAAAyhC,GACI2D,GAAS3D,KAAKzhC,MACd,OAAOA,IACf,CACC,MAAAqlB,CAAO+D,EAAOuF,GACP,IAAKyW,GAAShB,QAAQpkC,MAAO,CACzBA,KAAKu1D,QAAQnsC,EAAOuF,EAChC,KAAe,CACH3uB,KAAKw1D,kBAAoB,CACrBpsC,QACAuF,SAEhB,CACA,CACI,OAAA4mC,CAAQnsC,EAAOuF,GACX,MAAMrW,EAAUtY,KAAKsY,QACrB,MAAMgW,EAAStuB,KAAKsuB,OACpB,MAAMsQ,EAActmB,EAAQgU,qBAAuBtsB,KAAK4+B,YACxD,MAAM62B,EAAUz1D,KAAKorB,SAASqT,eAAenQ,EAAQlF,EAAOuF,EAAQiQ,GACpE,MAAM82B,EAAWp9C,EAAQ4S,kBAAoBlrB,KAAKorB,SAASC,sBAC3D,MAAMc,EAAOnsB,KAAKopB,MAAQ,SAAW,SACrCppB,KAAKopB,MAAQqsC,EAAQrsC,MACrBppB,KAAK2uB,OAAS8mC,EAAQ9mC,OACtB3uB,KAAK00D,aAAe10D,KAAK4+B,YACzB,IAAKI,GAAYh/B,KAAM01D,EAAU,MAAO,CACpC,MACZ,CACQ11D,KAAK+lD,cAAc,SAAU,CACzBhsC,KAAM07C,IAEVz+C,GAASsB,EAAQq9C,SAAU,CACvB31D,KACAy1D,GACDz1D,MACH,GAAIA,KAAKk1D,SAAU,CACf,GAAIl1D,KAAKm1D,UAAUhpC,GAAO,CACtBnsB,KAAKmC,QACrB,CACA,CACA,CACI,mBAAAyzD,GACI,MAAMt9C,EAAUtY,KAAKsY,QACrB,MAAMu9C,EAAgBv9C,EAAQsU,QAAU,GACxCvV,GAAKw+C,GAAe,CAACC,EAAa/J,KAC9B+J,EAAYl1D,GAAKmrD,CAAM,GAEnC,CACC,mBAAAgK,GACO,MAAMz9C,EAAUtY,KAAKsY,QACrB,MAAM09C,EAAY19C,EAAQsU,OAC1B,MAAMA,EAAS5sB,KAAK4sB,OACpB,MAAMqpC,EAAUtjD,OAAOD,KAAKka,GAAQmY,QAAO,CAACjwB,EAAKlU,KAC7CkU,EAAIlU,GAAM,MACV,OAAOkU,CAAG,GACX,IACH,IAAI1U,EAAQ,GACZ,GAAI41D,EAAW,CACX51D,EAAQA,EAAMg4C,OAAOzlC,OAAOD,KAAKsjD,GAAWl0D,KAAKlB,IAC7C,MAAMyvD,EAAe2F,EAAUp1D,GAC/B,MAAMogB,EAAOovC,GAAcxvD,EAAIyvD,GAC/B,MAAM6F,EAAWl1C,IAAS,IAC1B,MAAMm2B,EAAen2B,IAAS,IAC9B,MAAO,CACH1I,QAAS+3C,EACT8F,UAAWD,EAAW,YAAc/e,EAAe,SAAW,OAC9Dif,MAAOF,EAAW,eAAiB/e,EAAe,WAAa,SAClE,IAEjB,CACQ9/B,GAAKjX,GAAQM,IACT,MAAM2vD,EAAe3vD,EAAK4X,QAC1B,MAAM1X,EAAKyvD,EAAazvD,GACxB,MAAMogB,EAAOovC,GAAcxvD,EAAIyvD,GAC/B,MAAMgG,EAAY1/C,GAAe05C,EAAa9tD,KAAM7B,EAAK01D,OACzD,GAAI/F,EAAazb,WAAa10C,WAAa6yD,GAAqB1C,EAAazb,SAAU5zB,KAAU+xC,GAAqBryD,EAAKy1D,WAAY,CACnI9F,EAAazb,SAAWl0C,EAAKy1D,SAC7C,CACYF,EAAQr1D,GAAM,KACd,IAAI+rB,EAAQ,KACZ,GAAI/rB,KAAMgsB,GAAUA,EAAOhsB,GAAI2B,OAAS8zD,EAAW,CAC/C1pC,EAAQC,EAAOhsB,EAC/B,KAAmB,CACH,MAAM01D,EAAa/H,GAASX,SAASyI,GACrC1pC,EAAQ,IAAI2pC,EAAW,CACnB11D,KACA2B,KAAM8zD,EACNvqC,IAAK9rB,KAAK8rB,IACV1E,MAAOpnB,OAEX4sB,EAAOD,EAAM/rB,IAAM+rB,CACnC,CACYA,EAAMg3B,KAAK0M,EAAc/3C,EAAQ,IAErCjB,GAAK4+C,GAAS,CAACM,EAAY31D,KACvB,IAAK21D,EAAY,QACN3pC,EAAOhsB,EAC9B,KAEQyW,GAAKuV,GAASD,IACV0qB,GAAQtQ,UAAU/mC,KAAM2sB,EAAOA,EAAMrU,SACrC++B,GAAQ0C,OAAO/5C,KAAM2sB,EAAM,GAEvC,CACC,eAAA6pC,GACO,MAAMnuB,EAAWroC,KAAK20D,UACtB,MAAMniB,EAAUxyC,KAAK2tB,KAAK1C,SAASrpB,OACnC,MAAM2wC,EAAUlK,EAASzmC,OACzBymC,EAAShnC,MAAK,CAACC,EAAGC,IAAID,EAAEyW,MAAQxW,EAAEwW,QAClC,GAAIw6B,EAAUC,EAAS,CACnB,IAAI,IAAI7rC,EAAI6rC,EAAS7rC,EAAI4rC,IAAW5rC,EAAE,CAClC3G,KAAKy2D,oBAAoB9vD,EACzC,CACY0hC,EAAS7oB,OAAOgzB,EAASD,EAAUC,EAC/C,CACQxyC,KAAK+0D,gBAAkB1sB,EAAShlC,MAAM,GAAGhC,KAAK2xD,GAAc,QAAS,SAC7E,CACC,2BAAA0D,GACO,MAAQ/B,UAAWtsB,EAAW1a,MAAM1C,SAAEA,IAAiBjrB,KACvD,GAAIqoC,EAASzmC,OAASqpB,EAASrpB,OAAQ,QAC5B5B,KAAKoqC,OACxB,CACQ/B,EAASppB,SAAQ,CAACuB,EAAMzI,KACpB,GAAIkT,EAAS/nB,QAAQ4E,GAAIA,IAAM0Y,EAAKmzB,WAAU/xC,SAAW,EAAG,CACxD5B,KAAKy2D,oBAAoB1+C,EACzC,IAEA,CACI,wBAAA4+C,GACI,MAAMC,EAAiB,GACvB,MAAM3rC,EAAWjrB,KAAK2tB,KAAK1C,SAC3B,IAAItkB,EAAGgR,EACP3X,KAAK02D,8BACL,IAAI/vD,EAAI,EAAGgR,EAAOsT,EAASrpB,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC7C,MAAMokC,EAAU9f,EAAStkB,GACzB,IAAI6Z,EAAOxgB,KAAKguC,eAAernC,GAC/B,MAAMpE,EAAOwoC,EAAQxoC,MAAQvC,KAAK6mC,OAAOtkC,KACzC,GAAIie,EAAKje,MAAQie,EAAKje,OAASA,EAAM,CACjCvC,KAAKy2D,oBAAoB9vD,GACzB6Z,EAAOxgB,KAAKguC,eAAernC,EAC3C,CACY6Z,EAAKje,KAAOA,EACZie,EAAKyL,UAAY8e,EAAQ9e,WAAa4jC,GAAattD,EAAMvC,KAAKsY,SAC9DkI,EAAKq2C,MAAQ9rB,EAAQ8rB,OAAS,EAC9Br2C,EAAKzI,MAAQpR,EACb6Z,EAAKgwB,MAAQ,GAAKzF,EAAQyF,MAC1BhwB,EAAKgF,QAAUxlB,KAAK82D,iBAAiBnwD,GACrC,GAAI6Z,EAAKypB,WAAY,CACjBzpB,EAAKypB,WAAWgD,YAAYtmC,GAC5B6Z,EAAKypB,WAAW6C,YAChC,KAAmB,CACH,MAAMiqB,EAAkBxI,GAASf,cAAcjrD,GAC/C,MAAMoqC,mBAAEA,EAAkBC,gBAAGA,GAAqBnoB,GAASwG,SAAS1oB,GACpEoQ,OAAOyB,OAAO2iD,EAAiB,CAC3BnqB,gBAAiB2hB,GAASb,WAAW9gB,GACrCD,mBAAoBA,GAAsB4hB,GAASb,WAAW/gB,KAElEnsB,EAAKypB,WAAa,IAAI8sB,EAAgB/2D,KAAM2G,GAC5CiwD,EAAehzD,KAAK4c,EAAKypB,WACzC,CACA,CACQjqC,KAAKw2D,kBACL,OAAOI,CACf,CACC,cAAAI,GACO3/C,GAAKrX,KAAK2tB,KAAK1C,UAAU,CAAC8f,EAASjzB,KAC/B9X,KAAKguC,eAAel2B,GAAcmyB,WAAWkE,OAAO,GACrDnuC,KACX,CACC,KAAAmuC,GACOnuC,KAAKg3D,iBACLh3D,KAAK+lD,cAAc,QAC3B,CACI,MAAA1f,CAAOla,GACH,MAAM0a,EAAS7mC,KAAK6mC,OACpBA,EAAOR,SACP,MAAM/tB,EAAUtY,KAAKy0D,SAAW5tB,EAAOkI,eAAelI,EAAOyrB,oBAAqBtyD,KAAKuuB,cACvF,MAAM0oC,EAAgBj3D,KAAK0xC,qBAAuBp5B,EAAQ8M,UAC1DplB,KAAKk3D,gBACLl3D,KAAKm3D,sBACLn3D,KAAKo3D,uBACLp3D,KAAKg1D,SAAS9F,aACd,GAAIlvD,KAAK+lD,cAAc,eAAgB,CACnC55B,OACA8iC,WAAY,SACT,MAAO,CACV,MACZ,CACQ,MAAM2H,EAAiB52D,KAAK22D,2BAC5B32D,KAAK+lD,cAAc,wBACnB,IAAI3L,EAAa,EACjB,IAAI,IAAIzzC,EAAI,EAAGgR,EAAO3X,KAAK2tB,KAAK1C,SAASrpB,OAAQ+E,EAAIgR,EAAMhR,IAAI,CAC3D,MAAMsjC,WAAEA,GAAgBjqC,KAAKguC,eAAernC,GAC5C,MAAMwnC,GAAS8oB,GAAiBL,EAAex+C,QAAQ6xB,MAAiB,EACxEA,EAAWsE,sBAAsBJ,GACjCiM,EAAah2C,KAAKC,KAAK4lC,EAAWqG,iBAAkB8J,EAChE,CACQA,EAAap6C,KAAKq3D,YAAc/+C,EAAQs/B,OAAOjyB,YAAcy0B,EAAa,EAC1Ep6C,KAAKs3D,cAAcld,GACnB,IAAK6c,EAAe,CAChB5/C,GAAKu/C,GAAiB3sB,IAClBA,EAAWkE,OAAO,GAElC,CACQnuC,KAAKu3D,gBAAgBprC,GACrBnsB,KAAK+lD,cAAc,cAAe,CAC9B55B,SAEJnsB,KAAKg6C,QAAQ34C,KAAK2xD,GAAc,IAAK,SACrC,MAAM1uB,QAAEA,EAAOswB,WAAGA,GAAgB50D,KAClC,GAAI40D,EAAY,CACZ50D,KAAKw3D,cAAc5C,EAAY,KAC3C,MAAe,GAAItwB,EAAQ1iC,OAAQ,CACvB5B,KAAKy3D,mBAAmBnzB,EAASA,EAAS,KACtD,CACQtkC,KAAKmC,QACb,CACC,aAAA+0D,GACO7/C,GAAKrX,KAAK4sB,QAASD,IACf0qB,GAAQ6C,UAAUl6C,KAAM2sB,EAAM,IAElC3sB,KAAK41D,sBACL51D,KAAK+1D,qBACb,CACC,mBAAAoB,GACO,MAAM7+C,EAAUtY,KAAKsY,QACrB,MAAMo/C,EAAiB,IAAI1gC,IAAIrkB,OAAOD,KAAK1S,KAAK60D,aAChD,MAAM8C,EAAY,IAAI3gC,IAAI1e,EAAQiT,QAClC,IAAKzR,GAAU49C,EAAgBC,MAAgB33D,KAAK80D,uBAAyBx8C,EAAQoU,WAAY,CAC7F1sB,KAAK43D,eACL53D,KAAKs1D,YACjB,CACA,CACC,oBAAA8B,GACO,MAAMnC,eAAEA,GAAoBj1D,KAC5B,MAAM63D,EAAU73D,KAAK83D,0BAA4B,GACjD,IAAK,MAAM54C,OAAEA,EAAM7B,MAAGA,EAAKuD,MAAGA,KAAYi3C,EAAQ,CAC9C,MAAMllB,EAAOzzB,IAAW,mBAAqB0B,EAAQA,EACrD+yC,GAAgBsB,EAAgB53C,EAAOs1B,EACnD,CACA,CACC,sBAAAmlB,GACO,MAAM/kB,EAAe/yC,KAAK+yC,aAC1B,IAAKA,IAAiBA,EAAanxC,OAAQ,CACvC,MACZ,CACQ5B,KAAK+yC,aAAe,GACpB,MAAMglB,EAAe/3D,KAAK2tB,KAAK1C,SAASrpB,OACxC,MAAMo2D,EAAWzP,GAAM,IAAIvxB,IAAI+b,EAAa7vC,QAAQgC,GAAIA,EAAE,KAAOqjD,IAAKzmD,KAAI,CAACoD,EAAGyB,IAAIA,EAAI,IAAMzB,EAAEsa,OAAO,GAAGwY,KAAK,QAC7G,MAAMigC,EAAYD,EAAQ,GAC1B,IAAI,IAAIrxD,EAAI,EAAGA,EAAIoxD,EAAcpxD,IAAI,CACjC,IAAKmT,GAAUm+C,EAAWD,EAAQrxD,IAAK,CACnC,MAChB,CACA,CACQ,OAAOK,MAAM0M,KAAKukD,GAAWn2D,KAAKoD,GAAIA,EAAEmU,MAAM,OAAMvX,KAAKR,IAAC,CAClD4d,OAAQ5d,EAAE,GACV+b,OAAQ/b,EAAE,GACVsf,OAAQtf,EAAE,MAE1B,CACC,aAAAg2D,CAAcld,GACP,GAAIp6C,KAAK+lD,cAAc,eAAgB,CACnCkJ,WAAY,SACT,MAAO,CACV,MACZ,CACQ5X,GAAQhR,OAAOrmC,KAAMA,KAAKopB,MAAOppB,KAAK2uB,OAAQyrB,GAC9C,MAAM7pB,EAAOvwB,KAAK2wC,UAClB,MAAMunB,EAAS3nC,EAAKnH,OAAS,GAAKmH,EAAK5B,QAAU,EACjD3uB,KAAKg6C,QAAU,GACf3iC,GAAKrX,KAAK+2C,OAAQzZ,IACd,GAAI46B,GAAU56B,EAAIsX,WAAa,YAAa,CACxC,MAChB,CACY,GAAItX,EAAIyJ,UAAW,CACfzJ,EAAIyJ,WACpB,CACY/mC,KAAKg6C,QAAQp2C,QAAQ05B,EAAI0c,UAAU,GACpCh6C,MACHA,KAAKg6C,QAAQ/6B,SAAQ,CAACve,EAAMqX,KACxBrX,EAAKy3D,KAAOpgD,CAAK,IAErB/X,KAAK+lD,cAAc,cAC3B,CACC,eAAAwR,CAAgBprC,GACT,GAAInsB,KAAK+lD,cAAc,uBAAwB,CAC3C55B,OACA8iC,WAAY,SACT,MAAO,CACV,MACZ,CACQ,IAAI,IAAItoD,EAAI,EAAGgR,EAAO3X,KAAK2tB,KAAK1C,SAASrpB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3D3G,KAAKguC,eAAernC,GAAGsjC,WAAWlD,WAC9C,CACQ,IAAI,IAAIpgC,EAAI,EAAGgR,EAAO3X,KAAK2tB,KAAK1C,SAASrpB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC3D3G,KAAKo4D,eAAezxD,EAAGkT,GAAWsS,GAAQA,EAAK,CAC3CrU,aAAcnR,IACbwlB,EACjB,CACQnsB,KAAK+lD,cAAc,sBAAuB,CACtC55B,QAEZ,CACC,cAAAisC,CAAergD,EAAOoU,GACf,MAAM3L,EAAOxgB,KAAKguC,eAAej2B,GACjC,MAAMb,EAAO,CACTsJ,OACAzI,QACAoU,OACA8iC,WAAY,MAEhB,GAAIjvD,KAAK+lD,cAAc,sBAAuB7uC,KAAU,MAAO,CAC3D,MACZ,CACQsJ,EAAKypB,WAAWjG,QAAQ7X,GACxBjV,EAAK+3C,WAAa,MAClBjvD,KAAK+lD,cAAc,qBAAsB7uC,EACjD,CACI,MAAA/U,GACI,GAAInC,KAAK+lD,cAAc,eAAgB,CACnCkJ,WAAY,SACT,MAAO,CACV,MACZ,CACQ,GAAI7pB,GAASprB,IAAIha,MAAO,CACpB,GAAIA,KAAKk1D,WAAa9vB,GAAShB,QAAQpkC,MAAO,CAC1ColC,GAAS/nB,MAAMrd,KAC/B,CACA,KAAe,CACHA,KAAKqkC,OACL8uB,GAAqB,CACjB/rC,MAAOpnB,MAEvB,CACA,CACI,IAAAqkC,GACI,IAAI19B,EACJ,GAAI3G,KAAKw1D,kBAAmB,CACxB,MAAMpsC,MAAEA,EAAKuF,OAAGA,GAAY3uB,KAAKw1D,kBACjCx1D,KAAKw1D,kBAAoB,KACzBx1D,KAAKu1D,QAAQnsC,EAAOuF,EAChC,CACQ3uB,KAAK+xD,QACL,GAAI/xD,KAAKopB,OAAS,GAAKppB,KAAK2uB,QAAU,EAAG,CACrC,MACZ,CACQ,GAAI3uB,KAAK+lD,cAAc,aAAc,CACjCkJ,WAAY,SACT,MAAO,CACV,MACZ,CACQ,MAAMoJ,EAASr4D,KAAKg6C,QACpB,IAAIrzC,EAAI,EAAGA,EAAI0xD,EAAOz2D,QAAUy2D,EAAO1xD,GAAGszC,GAAK,IAAKtzC,EAAE,CAClD0xD,EAAO1xD,GAAG09B,KAAKrkC,KAAK2wC,UAChC,CACQ3wC,KAAKs4D,gBACL,KAAM3xD,EAAI0xD,EAAOz2D,SAAU+E,EAAE,CACzB0xD,EAAO1xD,GAAG09B,KAAKrkC,KAAK2wC,UAChC,CACQ3wC,KAAK+lD,cAAc,YAC3B,CACC,sBAAAzd,CAAuBF,GAChB,MAAMC,EAAWroC,KAAK+0D,gBACtB,MAAMx5C,EAAS,GACf,IAAI5U,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAO0wB,EAASzmC,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC7C,MAAM6Z,EAAO6nB,EAAS1hC,GACtB,IAAKyhC,GAAiB5nB,EAAKgF,QAAS,CAChCjK,EAAO3X,KAAK4c,EAC5B,CACA,CACQ,OAAOjF,CACf,CACC,4BAAAu5B,GACO,OAAO90C,KAAKsoC,uBAAuB,KAC3C,CACC,aAAAgwB,GACO,GAAIt4D,KAAK+lD,cAAc,qBAAsB,CACzCkJ,WAAY,SACT,MAAO,CACV,MACZ,CACQ,MAAM5mB,EAAWroC,KAAK80C,+BACtB,IAAI,IAAInuC,EAAI0hC,EAASzmC,OAAS,EAAG+E,GAAK,IAAKA,EAAE,CACzC3G,KAAKu4D,aAAalwB,EAAS1hC,GACvC,CACQ3G,KAAK+lD,cAAc,oBAC3B,CACC,YAAAwS,CAAa/3C,GACN,MAAMsL,EAAM9rB,KAAK8rB,IACjB,MAAMvD,EAAO/H,EAAKkwB,MAClB,MAAM8nB,GAAWjwC,EAAK2f,SACtB,MAAM3X,EAAO4jC,GAAe3zC,EAAMxgB,KAAK2wC,WACvC,MAAMz5B,EAAO,CACTsJ,OACAzI,MAAOyI,EAAKzI,MACZk3C,WAAY,MAEhB,GAAIjvD,KAAK+lD,cAAc,oBAAqB7uC,KAAU,MAAO,CACzD,MACZ,CACQ,GAAIshD,EAAS,CACT/nC,GAAS3E,EAAK,CACV9F,KAAMuC,EAAKvC,OAAS,MAAQ,EAAIuK,EAAKvK,KAAOuC,EAAKvC,KACjDF,MAAOyC,EAAKzC,QAAU,MAAQ9lB,KAAKopB,MAAQmH,EAAKzK,MAAQyC,EAAKzC,MAC7DD,IAAK0C,EAAK1C,MAAQ,MAAQ,EAAI0K,EAAK1K,IAAM0C,EAAK1C,IAC9CE,OAAQwC,EAAKxC,SAAW,MAAQ/lB,KAAK2uB,OAAS4B,EAAKxK,OAASwC,EAAKxC,QAEjF,CACQvF,EAAKypB,WAAW5F,OAChB,GAAIm0B,EAAS,CACT9nC,GAAW5E,EACvB,CACQ5U,EAAK+3C,WAAa,MAClBjvD,KAAK+lD,cAAc,mBAAoB7uC,EAC/C,CACC,aAAAo+B,CAAchlB,GACP,OAAOD,GAAeC,EAAOtwB,KAAK2wC,UAAW3wC,KAAKq3D,YAC1D,CACI,yBAAAoB,CAA0B91D,EAAGwpB,EAAM7T,EAAS+8B,GACxC,MAAMn2B,EAASq3B,GAAYC,MAAMrqB,GACjC,UAAWjN,IAAW,WAAY,CAC9B,OAAOA,EAAOlf,KAAM2C,EAAG2V,EAAS+8B,EAC5C,CACQ,MAAO,EACf,CACI,cAAArH,CAAel2B,GACX,MAAMizB,EAAU/qC,KAAK2tB,KAAK1C,SAASnT,GACnC,MAAMuwB,EAAWroC,KAAK20D,UACtB,IAAIn0C,EAAO6nB,EAASnlC,QAAQ4E,GAAIA,GAAKA,EAAE6rC,WAAa5I,IAAStvB,MAC7D,IAAK+E,EAAM,CACPA,EAAO,CACHje,KAAM,KACNorB,KAAM,GACNod,QAAS,KACTd,WAAY,KACZyB,OAAQ,KACR2B,QAAS,KACTE,QAAS,KACTspB,MAAO9rB,GAAWA,EAAQ8rB,OAAS,EACnC9+C,MAAOD,EACP67B,SAAU5I,EACVhqB,QAAS,GACTF,QAAS,OAEbwnB,EAASzkC,KAAK4c,EAC1B,CACQ,OAAOA,CACf,CACI,UAAA+N,GACI,OAAOvuB,KAAKysC,WAAazsC,KAAKysC,SAAW7X,GAAc,KAAM,CACzDxN,MAAOpnB,KACPuC,KAAM,UAElB,CACI,sBAAAm2D,GACI,OAAO14D,KAAK80C,+BAA+BlzC,MACnD,CACI,gBAAAk1D,CAAiBh/C,GACb,MAAMizB,EAAU/qC,KAAK2tB,KAAK1C,SAASnT,GACnC,IAAKizB,EAAS,CACV,OAAO,KACnB,CACQ,MAAMvqB,EAAOxgB,KAAKguC,eAAel2B,GACjC,cAAc0I,EAAKkrB,SAAW,WAAalrB,EAAKkrB,QAAUX,EAAQW,MAC1E,CACI,oBAAAitB,CAAqB7gD,EAAc0N,GAC/B,MAAMhF,EAAOxgB,KAAKguC,eAAel2B,GACjC0I,EAAKkrB,QAAUlmB,CACvB,CACI,oBAAAozC,CAAqB7gD,GACjB/X,KAAKi1D,eAAel9C,IAAU/X,KAAKi1D,eAAel9C,EAC1D,CACI,iBAAA8gD,CAAkB9gD,GACd,OAAQ/X,KAAKi1D,eAAel9C,EACpC,CACC,iBAAA+gD,CAAkBhhD,EAAcmzB,EAAWzlB,GACpC,MAAM2G,EAAO3G,EAAU,OAAS,OAChC,MAAMhF,EAAOxgB,KAAKguC,eAAel2B,GACjC,MAAM2rB,EAAQjjB,EAAKypB,WAAWmH,mBAAmBlxC,UAAWisB,GAC5D,GAAIvS,GAAQqxB,GAAY,CACpBzqB,EAAKmN,KAAKsd,GAAWS,QAAUlmB,EAC/BxlB,KAAKqmC,QACjB,KAAe,CACHrmC,KAAK24D,qBAAqB7gD,EAAc0N,GACxCie,EAAM4C,OAAO7lB,EAAM,CACfgF,YAEJxlB,KAAKqmC,QAAQva,GAAMA,EAAIhU,eAAiBA,EAAeqU,EAAOjsB,WAC1E,CACA,CACI,IAAAulB,CAAK3N,EAAcmzB,GACfjrC,KAAK84D,kBAAkBhhD,EAAcmzB,EAAW,MACxD,CACI,IAAA3lB,CAAKxN,EAAcmzB,GACfjrC,KAAK84D,kBAAkBhhD,EAAcmzB,EAAW,KACxD,CACC,mBAAAwrB,CAAoB3+C,GACb,MAAM0I,EAAOxgB,KAAK20D,UAAU78C,GAC5B,GAAI0I,GAAQA,EAAKypB,WAAY,CACzBzpB,EAAKypB,WAAWmE,UAC5B,QACepuC,KAAK20D,UAAU78C,EAC9B,CACI,KAAAihD,GACI,IAAIpyD,EAAGgR,EACP3X,KAAKyhC,OACL2D,GAASD,OAAOnlC,MAChB,IAAI2G,EAAI,EAAGgR,EAAO3X,KAAK2tB,KAAK1C,SAASrpB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CACvD3G,KAAKy2D,oBAAoB9vD,EACrC,CACA,CACI,OAAAqyD,GACIh5D,KAAK+lD,cAAc,iBACnB,MAAMz3B,OAAEA,EAAMxC,IAAGA,GAAS9rB,KAC1BA,KAAK+4D,QACL/4D,KAAK6mC,OAAOirB,aACZ,GAAIxjC,EAAQ,CACRtuB,KAAK43D,eACLvpC,GAAYC,EAAQxC,GACpB9rB,KAAKorB,SAASwvB,eAAe9uB,GAC7B9rB,KAAKsuB,OAAS,KACdtuB,KAAK8rB,IAAM,IACvB,QACe2nC,GAAUzzD,KAAKY,IACtBZ,KAAK+lD,cAAc,eAC3B,CACI,aAAAkT,IAAiB/hD,GACb,OAAOlX,KAAKsuB,OAAO4qC,aAAahiD,EACxC,CACC,UAAAo+C,GACOt1D,KAAKm5D,iBACL,GAAIn5D,KAAKsY,QAAQoU,WAAY,CACzB1sB,KAAKo5D,sBACjB,KAAe,CACHp5D,KAAKk1D,SAAW,IAC5B,CACA,CACC,cAAAiE,GACO,MAAMt6C,EAAY7e,KAAK60D,WACvB,MAAMzpC,EAAWprB,KAAKorB,SACtB,MAAMiuC,EAAO,CAAC92D,EAAMoc,KAChByM,EAASsU,iBAAiB1/B,KAAMuC,EAAMoc,GACtCE,EAAUtc,GAAQoc,CAAQ,EAE9B,MAAMA,EAAW,CAAChc,EAAGmF,EAAGoR,KACpBvW,EAAEy6B,QAAUt1B,EACZnF,EAAE06B,QAAUnkB,EACZlZ,KAAKw3D,cAAc70D,EAAE,EAEzB0U,GAAKrX,KAAKsY,QAAQiT,QAAShpB,GAAO82D,EAAK92D,EAAMoc,IACrD,CACC,oBAAAy6C,GACO,IAAKp5D,KAAK80D,qBAAsB,CAC5B90D,KAAK80D,qBAAuB,EACxC,CACQ,MAAMj2C,EAAY7e,KAAK80D,qBACvB,MAAM1pC,EAAWprB,KAAKorB,SACtB,MAAMiuC,EAAO,CAAC92D,EAAMoc,KAChByM,EAASsU,iBAAiB1/B,KAAMuC,EAAMoc,GACtCE,EAAUtc,GAAQoc,CAAQ,EAE9B,MAAM26C,EAAU,CAAC/2D,EAAMoc,KACnB,GAAIE,EAAUtc,GAAO,CACjB6oB,EAASuU,oBAAoB3/B,KAAMuC,EAAMoc,UAClCE,EAAUtc,EACjC,GAEQ,MAAMoc,EAAW,CAACyK,EAAOuF,KACrB,GAAI3uB,KAAKsuB,OAAQ,CACbtuB,KAAKqlB,OAAO+D,EAAOuF,EACnC,GAEQ,IAAI4qC,EACJ,MAAMrE,EAAW,KACboE,EAAQ,SAAUpE,GAClBl1D,KAAKk1D,SAAW,KAChBl1D,KAAKqlB,SACLg0C,EAAK,SAAU16C,GACf06C,EAAK,SAAUE,EAAS,EAE5BA,EAAW,KACPv5D,KAAKk1D,SAAW,MAChBoE,EAAQ,SAAU36C,GAClB3e,KAAK+4D,QACL/4D,KAAKu1D,QAAQ,EAAG,GAChB8D,EAAK,SAAUnE,EAAS,EAE5B,GAAI9pC,EAASyvB,WAAW76C,KAAKsuB,QAAS,CAClC4mC,GACZ,KAAe,CACHqE,GACZ,CACA,CACC,YAAA3B,GACOvgD,GAAKrX,KAAK60D,YAAY,CAACl2C,EAAUpc,KAC7BvC,KAAKorB,SAASuU,oBAAoB3/B,KAAMuC,EAAMoc,EAAS,IAE3D3e,KAAK60D,WAAa,GAClBx9C,GAAKrX,KAAK80D,sBAAsB,CAACn2C,EAAUpc,KACvCvC,KAAKorB,SAASuU,oBAAoB3/B,KAAMuC,EAAMoc,EAAS,IAE3D3e,KAAK80D,qBAAuB50D,SACpC,CACI,gBAAAs5D,CAAiBp5D,EAAO+rB,EAAMozB,GAC1B,MAAM5nB,EAAS4nB,EAAU,MAAQ,SACjC,IAAI/+B,EAAM9f,EAAMiG,EAAGgR,EACnB,GAAIwU,IAAS,UAAW,CACpB3L,EAAOxgB,KAAKguC,eAAe5tC,EAAM,GAAG0X,cACpC0I,EAAKypB,WAAW,IAAMtS,EAAS,sBAC3C,CACQ,IAAIhxB,EAAI,EAAGgR,EAAOvX,EAAMwB,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC1CjG,EAAON,EAAMuG,GACb,MAAMsjC,EAAavpC,GAAQV,KAAKguC,eAAettC,EAAKoX,cAAcmyB,WAClE,GAAIA,EAAY,CACZA,EAAWtS,EAAS,cAAcj3B,EAAK27B,QAAS37B,EAAKoX,aAAcpX,EAAKqX,MACxF,CACA,CACA,CACC,iBAAA0hD,GACO,OAAOz5D,KAAKskC,SAAW,EAC/B,CACC,iBAAAo1B,CAAkBC,GACX,MAAMC,EAAa55D,KAAKskC,SAAW,GACnC,MAAMnf,EAASw0C,EAAe73D,KAAI,EAAGgW,eAAeC,YAChD,MAAMyI,EAAOxgB,KAAKguC,eAAel2B,GACjC,IAAK0I,EAAM,CACP,MAAM,IAAItf,MAAM,6BAA+B4W,EAC/D,CACY,MAAO,CACHA,eACAukB,QAAS7b,EAAKmN,KAAK5V,GACnBA,QACH,IAEL,MAAM+J,GAAWtK,GAAe2N,EAAQy0C,GACxC,GAAI93C,EAAS,CACT9hB,KAAKskC,QAAUnf,EACfnlB,KAAK40D,WAAa,KAClB50D,KAAKy3D,mBAAmBtyC,EAAQy0C,EAC5C,CACA,CACC,aAAA7T,CAAc8I,EAAM33C,EAAMhU,GACnB,OAAOlD,KAAKg1D,SAASpG,OAAO5uD,KAAM6uD,EAAM33C,EAAMhU,EACtD,CACC,eAAA8pC,CAAgB6sB,GACT,OAAO75D,KAAKg1D,SAASvR,OAAOvgD,QAAQmS,GAAIA,EAAE25C,OAAOpuD,KAAOi5D,IAAUj4D,SAAW,CACrF,CACC,kBAAA61D,CAAmBtyC,EAAQy0C,EAAYE,GAChC,MAAMC,EAAe/5D,KAAKsY,QAAQsT,MAClC,MAAM+0B,EAAO,CAACr/C,EAAGC,IAAID,EAAE4B,QAAQ4E,IAAKvG,EAAEiuD,MAAMt2C,GAAIpR,EAAEgQ,eAAiBoB,EAAEpB,cAAgBhQ,EAAEiQ,QAAUmB,EAAEnB,UACnG,MAAMiiD,EAAcrZ,EAAKiZ,EAAYz0C,GACrC,MAAM80C,EAAYH,EAAS30C,EAASw7B,EAAKx7B,EAAQy0C,GACjD,GAAII,EAAYp4D,OAAQ,CACpB5B,KAAKw5D,iBAAiBQ,EAAaD,EAAa5tC,KAAM,MAClE,CACQ,GAAI8tC,EAAUr4D,QAAUm4D,EAAa5tC,KAAM,CACvCnsB,KAAKw5D,iBAAiBS,EAAWF,EAAa5tC,KAAM,KAChE,CACA,CACC,aAAAqrC,CAAc70D,EAAGm3D,GACV,MAAM5iD,EAAO,CACTymB,MAAOh7B,EACPm3D,SACA7K,WAAY,KACZ8E,YAAa/zD,KAAKs1C,cAAc3yC,IAEpC,MAAMu3D,EAAelL,IAAUA,EAAO12C,QAAQiT,QAAUvrB,KAAKsY,QAAQiT,QAAQvD,SAASrlB,EAAE25C,OAAO/5C,MAC/F,GAAIvC,KAAK+lD,cAAc,cAAe7uC,EAAMgjD,KAAiB,MAAO,CAChE,MACZ,CACQ,MAAMp4C,EAAU9hB,KAAKm6D,aAAax3D,EAAGm3D,EAAQ5iD,EAAK68C,aAClD78C,EAAK+3C,WAAa,MAClBjvD,KAAK+lD,cAAc,aAAc7uC,EAAMgjD,GACvC,GAAIp4C,GAAW5K,EAAK4K,QAAS,CACzB9hB,KAAKmC,QACjB,CACQ,OAAOnC,IACf,CACC,YAAAm6D,CAAax3D,EAAGm3D,EAAQ/F,GACjB,MAAQzvB,QAASs1B,EAAa,GAAEthD,QAAGA,GAAatY,KAChD,MAAMq1C,EAAmBykB,EACzB,MAAM30C,EAASnlB,KAAKo6D,mBAAmBz3D,EAAGi3D,EAAY7F,EAAa1e,GACnE,MAAM2e,EAAU/5C,GAActX,GAC9B,MAAMmxD,EAAYD,GAAmBlxD,EAAG3C,KAAK40D,WAAYb,EAAaC,GACtE,GAAID,EAAa,CACb/zD,KAAK40D,WAAa,KAClB59C,GAASsB,EAAQiU,QAAS,CACtB5pB,EACAwiB,EACAnlB,MACDA,MACH,GAAIg0D,EAAS,CACTh9C,GAASsB,EAAQ3U,QAAS,CACtBhB,EACAwiB,EACAnlB,MACDA,KACnB,CACA,CACQ,MAAM8hB,GAAWtK,GAAe2N,EAAQy0C,GACxC,GAAI93C,GAAWg4C,EAAQ,CACnB95D,KAAKskC,QAAUnf,EACfnlB,KAAKy3D,mBAAmBtyC,EAAQy0C,EAAYE,EACxD,CACQ95D,KAAK40D,WAAad,EAClB,OAAOhyC,CACf,CACC,kBAAAs4C,CAAmBz3D,EAAGi3D,EAAY7F,EAAa1e,GACxC,GAAI1yC,EAAEJ,OAAS,WAAY,CACvB,MAAO,EACnB,CACQ,IAAKwxD,EAAa,CACd,OAAO6F,CACnB,CACQ,MAAMG,EAAe/5D,KAAKsY,QAAQsT,MAClC,OAAO5rB,KAAKy4D,0BAA0B91D,EAAGo3D,EAAa5tC,KAAM4tC,EAAc1kB,EAClF,EAEA,SAASgf,KACL,OAAOh9C,GAAK+8C,GAAMX,WAAYrsC,GAAQA,EAAM4tC,SAAS9F,cACzD,CAkTA,SAASmL,GAASvuC,EAAKxT,EAASoT,EAAQpT,GACpCwT,EAAIwuC,QAAU3jD,GAAe+U,EAAMoX,eAAgBxqB,EAAQwqB,gBAC3DhX,EAAIu/B,YAAY10C,GAAe+U,EAAMqX,WAAYzqB,EAAQyqB,aACzDjX,EAAIw/B,eAAiB30C,GAAe+U,EAAMsX,iBAAkB1qB,EAAQ0qB,kBACpElX,EAAIyuC,SAAW5jD,GAAe+U,EAAMuX,gBAAiB3qB,EAAQ2qB,iBAC7DnX,EAAIpD,UAAY/R,GAAe+U,EAAMyE,YAAa7X,EAAQ6X,aAC1DrE,EAAIuG,YAAc1b,GAAe+U,EAAMV,YAAa1S,EAAQ0S,YAChE,CACA,SAAS+E,GAAOjE,EAAK8E,EAAUhuB,GAC3BkpB,EAAIiE,OAAOntB,EAAOkF,EAAGlF,EAAOsW,EAChC,CACC,SAASshD,GAAcliD,GACpB,GAAIA,EAAQmiD,QAAS,CACjB,OAAO9pC,EACf,CACI,GAAIrY,EAAQmjB,SAAWnjB,EAAQijB,yBAA2B,WAAY,CAClE,OAAOxK,EACf,CACI,OAAOhB,EACX,CACA,SAAS2qC,GAASj6C,EAAQ+f,EAASiX,EAAS,IACxC,MAAM72B,EAAQH,EAAO7e,OACrB,MAAQyb,MAAOs9C,EAAc,EAAIr9C,IAAKs9C,EAAYh6C,EAAQ,GAAO62B,EACjE,MAAQp6B,MAAOw9C,EAAev9C,IAAKw9C,GAAgBt6B,EACnD,MAAMnjB,EAAQjZ,KAAKC,IAAIs2D,EAAaE,GACpC,MAAMv9C,EAAMlZ,KAAKE,IAAIs2D,EAAWE,GAChC,MAAMC,EAAUJ,EAAcE,GAAgBD,EAAYC,GAAgBF,EAAcG,GAAcF,EAAYE,EAClH,MAAO,CACHl6C,QACAvD,QACAwH,KAAM2b,EAAQ3b,KACdlN,KAAM2F,EAAMD,IAAU09C,EAAUn6C,EAAQtD,EAAMD,EAAQC,EAAMD,EAEpE,CACC,SAAS29C,GAAYlvC,EAAK8F,EAAM4O,EAASiX,GACtC,MAAMh3B,OAAEA,EAAMnI,QAAGA,GAAasZ,EAC9B,MAAMhR,MAAEA,EAAKvD,MAAGA,EAAKwH,KAAGA,EAAIlN,KAAGA,GAAU+iD,GAASj6C,EAAQ+f,EAASiX,GACnE,MAAMwjB,EAAaT,GAAcliD,GACjC,IAAIq6B,KAAEA,EAAM,KAAIp7B,QAAGA,GAAakgC,GAAU,GAC1C,IAAI9wC,EAAG2pB,EAAOkL,EACd,IAAI70B,EAAI,EAAGA,GAAKgR,IAAQhR,EAAE,CACtB2pB,EAAQ7P,GAAQpD,GAAS9F,EAAUI,EAAOhR,EAAIA,IAAMia,GACpD,GAAI0P,EAAM0I,KAAM,CACZ,QACZ,MAAe,GAAI2Z,EAAM,CACb7mB,EAAIgE,OAAOQ,EAAMxoB,EAAGwoB,EAAMpX,GAC1By5B,EAAO,KACnB,KAAe,CACHsoB,EAAWnvC,EAAK0P,EAAMlL,EAAO/Y,EAASe,EAAQmiD,QAC1D,CACQj/B,EAAOlL,CACf,CACI,GAAIzL,EAAM,CACNyL,EAAQ7P,GAAQpD,GAAS9F,EAAUI,EAAO,IAAMiJ,GAChDq6C,EAAWnvC,EAAK0P,EAAMlL,EAAO/Y,EAASe,EAAQmiD,QACtD,CACI,QAAS51C,CACb,CACC,SAASq2C,GAAgBpvC,EAAK8F,EAAM4O,EAASiX,GAC1C,MAAMh3B,EAASmR,EAAKnR,OACpB,MAAMG,MAAEA,EAAKvD,MAAGA,EAAK1F,KAAGA,GAAU+iD,GAASj6C,EAAQ+f,EAASiX,GAC5D,MAAM9E,KAAEA,EAAM,KAAIp7B,QAAGA,GAAakgC,GAAU,GAC5C,IAAI0jB,EAAO,EACX,IAAIC,EAAS,EACb,IAAIz0D,EAAG2pB,EAAO+qC,EAAOC,EAAMC,EAAMC,EACjC,MAAMC,EAAc1jD,IAASsF,GAAS9F,EAAUI,EAAOI,EAAQA,IAAU6I,EACzE,MAAM86C,EAAQ,KACV,GAAIJ,IAASC,EAAM,CACfzvC,EAAIiE,OAAOorC,EAAMI,GACjBzvC,EAAIiE,OAAOorC,EAAMG,GACjBxvC,EAAIiE,OAAOorC,EAAMK,EAC7B,GAEI,GAAI7oB,EAAM,CACNriB,EAAQ7P,EAAOg7C,EAAW,IAC1B3vC,EAAIgE,OAAOQ,EAAMxoB,EAAGwoB,EAAMpX,EAClC,CACI,IAAIvS,EAAI,EAAGA,GAAKgR,IAAQhR,EAAE,CACtB2pB,EAAQ7P,EAAOg7C,EAAW90D,IAC1B,GAAI2pB,EAAM0I,KAAM,CACZ,QACZ,CACQ,MAAMlxB,EAAIwoB,EAAMxoB,EAChB,MAAMoR,EAAIoX,EAAMpX,EAChB,MAAMyiD,EAAS7zD,EAAI,EACnB,GAAI6zD,IAAWN,EAAO,CAClB,GAAIniD,EAAIoiD,EAAM,CACVA,EAAOpiD,CACvB,MAAmB,GAAIA,EAAIqiD,EAAM,CACjBA,EAAOriD,CACvB,CACYiiD,GAAQC,EAASD,EAAOrzD,KAAOszD,CAC3C,KAAe,CACHM,IACA5vC,EAAIiE,OAAOjoB,EAAGoR,GACdmiD,EAAQM,EACRP,EAAS,EACTE,EAAOC,EAAOriD,CAC1B,CACQsiD,EAAQtiD,CAChB,CACIwiD,GACJ,CACC,SAASE,GAAkBhqC,GACxB,MAAMN,EAAOM,EAAKtZ,QAClB,MAAMyqB,EAAazR,EAAKyR,YAAczR,EAAKyR,WAAWnhC,OACtD,MAAMi6D,GAAejqC,EAAKgiB,aAAehiB,EAAKgQ,QAAUtQ,EAAKmK,SAAWnK,EAAKiK,yBAA2B,aAAejK,EAAKmpC,UAAY13B,EACxI,OAAO84B,EAAcX,GAAkBF,EAC3C,CACC,SAASc,GAAwBxjD,GAC9B,GAAIA,EAAQmiD,QAAS,CACjB,OAAO36B,EACf,CACI,GAAIxnB,EAAQmjB,SAAWnjB,EAAQijB,yBAA2B,WAAY,CAClE,OAAOwE,EACf,CACI,OAAOF,EACX,CACA,SAASk8B,GAAoBjwC,EAAK8F,EAAMvU,EAAOuD,GAC3C,IAAI7c,EAAO6tB,EAAKoqC,MAChB,IAAKj4D,EAAM,CACPA,EAAO6tB,EAAKoqC,MAAQ,IAAIC,OACxB,GAAIrqC,EAAK7tB,KAAKA,EAAMsZ,EAAOuD,GAAQ,CAC/B7c,EAAK8rB,WACjB,CACA,CACIwqC,GAASvuC,EAAK8F,EAAKtZ,SACnBwT,EAAIsE,OAAOrsB,EACf,CACA,SAASm4D,GAAiBpwC,EAAK8F,EAAMvU,EAAOuD,GACxC,MAAMwgB,SAAEA,EAAQ9oB,QAAGA,GAAasZ,EAChC,MAAMuqC,EAAgBP,GAAkBhqC,GACxC,IAAK,MAAM4O,KAAWY,EAAS,CAC3Bi5B,GAASvuC,EAAKxT,EAASkoB,EAAQ9U,OAC/BI,EAAI4D,YACJ,GAAIysC,EAAcrwC,EAAK8F,EAAM4O,EAAS,CAClCnjB,QACAC,IAAKD,EAAQuD,EAAQ,IACrB,CACAkL,EAAI+D,WAChB,CACQ/D,EAAIsE,QACZ,CACA,CACA,MAAMgsC,UAAmBH,SAAW,WACpC,SAAS53B,GAAKvY,EAAK8F,EAAMvU,EAAOuD,GAC5B,GAAIw7C,KAAcxqC,EAAKtZ,QAAQkoB,QAAS,CACpCu7B,GAAoBjwC,EAAK8F,EAAMvU,EAAOuD,EAC9C,KAAW,CACHs7C,GAAiBpwC,EAAK8F,EAAMvU,EAAOuD,EAC3C,CACA,CACA,MAAMy7C,WAAoBxd,GACtBhT,UAAY,OACfA,gBAAkB,CACX/I,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjB9S,YAAa,EACb6K,gBAAiB,KACjBO,uBAAwB,UACxBrL,KAAM,MACNoL,SAAU,MACVm/B,QAAS,MACTh/B,QAAS,GAEhBoQ,qBAAuB,CAChB9gB,gBAAiB,kBACjBC,YAAa,eAEjB6gB,mBAAqB,CACjB5mB,YAAa,KACbD,WAAajiB,GAAOA,IAAS,cAAgBA,IAAS,QAE1D,WAAA2R,CAAYixB,GACR+N,QACA1zC,KAAK6zC,SAAW,KAChB7zC,KAAKsY,QAAUpY,UACfF,KAAKkiC,OAAShiC,UACdF,KAAK4hC,MAAQ1hC,UACbF,KAAK+hC,UAAY7hC,UACjBF,KAAKg8D,MAAQ97D,UACbF,KAAKs8D,QAAUp8D,UACfF,KAAKu8D,UAAYr8D,UACjBF,KAAK4zC,WAAa,MAClB5zC,KAAKw8D,eAAiB,MACtBx8D,KAAKqiC,cAAgBniC,UACrB,GAAIylC,EAAK,CACLhzB,OAAOyB,OAAOpU,KAAM2lC,EAChC,CACA,CACI,mBAAA0O,CAAoB1D,EAAW1kB,GAC3B,MAAM3T,EAAUtY,KAAKsY,QACrB,IAAKA,EAAQmjB,SAAWnjB,EAAQijB,yBAA2B,cAAgBjjB,EAAQmiD,UAAYz6D,KAAKw8D,eAAgB,CAChH,MAAM33C,EAAOvM,EAAQgjB,SAAWt7B,KAAK4hC,MAAQ5hC,KAAK+hC,UAClD3G,GAA2Bp7B,KAAKs8D,QAAShkD,EAASq4B,EAAW9rB,EAAMoH,GACnEjsB,KAAKw8D,eAAiB,IAClC,CACA,CACI,UAAI/7C,CAAOA,GACPzgB,KAAKs8D,QAAU77C,SACRzgB,KAAKu8D,iBACLv8D,KAAKg8D,MACZh8D,KAAKw8D,eAAiB,KAC9B,CACI,UAAI/7C,GACA,OAAOzgB,KAAKs8D,OACpB,CACI,YAAIl7B,GACA,OAAOphC,KAAKu8D,YAAcv8D,KAAKu8D,UAAY76B,GAAiB1hC,KAAMA,KAAKsY,QAAQkoB,SACvF,CACC,KAAAkf,GACO,MAAMte,EAAWphC,KAAKohC,SACtB,MAAM3gB,EAASzgB,KAAKygB,OACpB,OAAO2gB,EAASx/B,QAAU6e,EAAO2gB,EAAS,GAAG/jB,MACrD,CACC,IAAAiB,GACO,MAAM8iB,EAAWphC,KAAKohC,SACtB,MAAM3gB,EAASzgB,KAAKygB,OACpB,MAAMG,EAAQwgB,EAASx/B,OACvB,OAAOgf,GAASH,EAAO2gB,EAASxgB,EAAQ,GAAGtD,IACnD,CACC,WAAA3J,CAAY2c,EAAOtU,GACZ,MAAM1D,EAAUtY,KAAKsY,QACrB,MAAM9V,EAAQ8tB,EAAMtU,GACpB,MAAMyE,EAASzgB,KAAKygB,OACpB,MAAM2gB,EAAWD,GAAenhC,KAAM,CAClCgc,WACAqB,MAAO7a,EACP8a,IAAK9a,IAET,IAAK4+B,EAASx/B,OAAQ,CAClB,MACZ,CACQ,MAAM2Z,EAAS,GACf,MAAMkhD,EAAeX,GAAwBxjD,GAC7C,IAAI3R,EAAGgR,EACP,IAAIhR,EAAI,EAAGgR,EAAOypB,EAASx/B,OAAQ+E,EAAIgR,IAAQhR,EAAE,CAC7C,MAAM0W,MAAEA,EAAKC,IAAGA,GAAS8jB,EAASz6B,GAClC,MAAMc,EAAKgZ,EAAOpD,GAClB,MAAM3V,EAAK+Y,EAAOnD,GAClB,GAAI7V,IAAOC,EAAI,CACX6T,EAAO3X,KAAK6D,GACZ,QAChB,CACY,MAAMqM,EAAI1P,KAAK2W,KAAKvY,EAAQiF,EAAGuU,KAActU,EAAGsU,GAAYvU,EAAGuU,KAC/D,MAAM0gD,EAAeD,EAAah1D,EAAIC,EAAIoM,EAAGwE,EAAQmiD,SACrDiC,EAAa1gD,GAAYsU,EAAMtU,GAC/BT,EAAO3X,KAAK84D,EACxB,CACQ,OAAOnhD,EAAO3Z,SAAW,EAAI2Z,EAAO,GAAKA,CACjD,CACC,WAAAy/C,CAAYlvC,EAAK0U,EAASiX,GACnB,MAAM0kB,EAAgBP,GAAkB57D,MACxC,OAAOm8D,EAAcrwC,EAAK9rB,KAAMwgC,EAASiX,EACjD,CACC,IAAA1zC,CAAK+nB,EAAKzO,EAAOuD,GACV,MAAMwgB,EAAWphC,KAAKohC,SACtB,MAAM+6B,EAAgBP,GAAkB57D,MACxC,IAAI6kB,EAAO7kB,KAAK4hC,MAChBvkB,EAAQA,GAAS,EACjBuD,EAAQA,GAAS5gB,KAAKygB,OAAO7e,OAASyb,EACtC,IAAK,MAAMmjB,KAAWY,EAAS,CAC3Bvc,GAAQs3C,EAAcrwC,EAAK9rB,KAAMwgC,EAAS,CACtCnjB,QACAC,IAAKD,EAAQuD,EAAQ,GAErC,CACQ,QAASiE,CACjB,CACC,IAAAwf,CAAKvY,EAAK6kB,EAAWtzB,EAAOuD,GACrB,MAAMtI,EAAUtY,KAAKsY,SAAW,GAChC,MAAMmI,EAASzgB,KAAKygB,QAAU,GAC9B,GAAIA,EAAO7e,QAAU0W,EAAQ6X,YAAa,CACtCrE,EAAI0C,OACJ6V,GAAKvY,EAAK9rB,KAAMqd,EAAOuD,GACvBkL,EAAI8C,SAChB,CACQ,GAAI5uB,KAAK6zC,SAAU,CACf7zC,KAAKw8D,eAAiB,MACtBx8D,KAAKg8D,MAAQ97D,SACzB,CACA,EAGA,SAASy8D,GAAUlgC,EAAIM,EAAK/b,EAAMq0B,GAC9B,MAAM/8B,EAAUmkB,EAAGnkB,QACnB,MAAQ0I,CAACA,GAAOxe,GAAWi6B,EAAGmZ,SAAS,CACnC50B,GACDq0B,GACH,OAAOjxC,KAAK2W,IAAIgiB,EAAMv6B,GAAS8V,EAAQgX,OAAShX,EAAQskD,SAC5D,CACA,MAAMC,WAAqBhe,GACvBhT,UAAY,QACZ3B,OACAlR,KACAyI,KAGEoK,gBAAkB,CAChB1b,YAAa,EACbysC,UAAW,EACXE,iBAAkB,EAClBC,YAAa,EACb3tC,WAAY,SACZE,OAAQ,EACRD,SAAU,GAIZwc,qBAAuB,CACrB9gB,gBAAiB,kBACjBC,YAAa,eAEjB,WAAAtW,CAAYixB,GACR+N,QACA1zC,KAAKsY,QAAUpY,UACfF,KAAKkqC,OAAShqC,UACdF,KAAKg5B,KAAO94B,UACZF,KAAKyhC,KAAOvhC,UACZ,GAAIylC,EAAK,CACLhzB,OAAOyB,OAAOpU,KAAM2lC,EAChC,CACA,CACI,OAAA6P,CAAQwnB,EAAQC,EAAQ5nB,GACpB,MAAM/8B,EAAUtY,KAAKsY,QACrB,MAAMxQ,EAAEA,EAACoR,EAAGA,GAAOlZ,KAAK41C,SAAS,CAC7B,IACA,KACDP,GACH,OAAOjxC,KAAKqP,IAAIupD,EAASl1D,EAAG,GAAK1D,KAAKqP,IAAIwpD,EAAS/jD,EAAG,GAAK9U,KAAKqP,IAAI6E,EAAQskD,UAAYtkD,EAAQgX,OAAQ,EAChH,CACI,QAAA4tC,CAASF,EAAQ3nB,GACb,OAAOsnB,GAAU38D,KAAMg9D,EAAQ,IAAK3nB,EAC5C,CACI,QAAA8nB,CAASF,EAAQ5nB,GACb,OAAOsnB,GAAU38D,KAAMi9D,EAAQ,IAAK5nB,EAC5C,CACI,cAAAY,CAAeZ,GACX,MAAMvtC,EAAEA,EAACoR,EAAGA,GAAOlZ,KAAK41C,SAAS,CAC7B,IACA,KACDP,GACH,MAAO,CACHvtC,IACAoR,IAEZ,CACI,IAAAa,CAAKzB,GACDA,EAAUA,GAAWtY,KAAKsY,SAAW,GACrC,IAAIgX,EAAShX,EAAQgX,QAAU,EAC/BA,EAASlrB,KAAKC,IAAIirB,EAAQA,GAAUhX,EAAQykD,aAAe,GAC3D,MAAM5sC,EAAcb,GAAUhX,EAAQ6X,aAAe,EACrD,OAAQb,EAASa,GAAe,CACxC,CACI,IAAAkU,CAAKvY,EAAKyE,GACN,MAAMjY,EAAUtY,KAAKsY,QACrB,GAAItY,KAAKg5B,MAAQ1gB,EAAQgX,OAAS,KAAQe,GAAerwB,KAAMuwB,EAAMvwB,KAAK+Z,KAAKzB,GAAW,GAAI,CAC1F,MACZ,CACQwT,EAAIuG,YAAc/Z,EAAQ0S,YAC1Bc,EAAIpD,UAAYpQ,EAAQ6X,YACxBrE,EAAI0F,UAAYlZ,EAAQyS,gBACxB8D,GAAU/C,EAAKxT,EAAStY,KAAK8H,EAAG9H,KAAKkZ,EAC7C,CACI,QAAAw7B,GACI,MAAMp8B,EAAUtY,KAAKsY,SAAW,GAEhC,OAAOA,EAAQgX,OAAShX,EAAQskD,SACxC,EAykDA,MAAMQ,WAAcve,GACnB,WAAAnqC,CAAYmyB,GACL6M,QACA1zC,KAAKonB,MAAQyf,EAAOzf,MACpBpnB,KAAKsY,QAAUuuB,EAAOvuB,QACtBtY,KAAK8rB,IAAM+a,EAAO/a,IAClB9rB,KAAKq9D,SAAWn9D,UAChBF,KAAK6lB,IAAM3lB,UACXF,KAAK+lB,OAAS7lB,UACdF,KAAKgmB,KAAO9lB,UACZF,KAAK8lB,MAAQ5lB,UACbF,KAAKopB,MAAQlpB,UACbF,KAAK2uB,OAASzuB,UACdF,KAAK40C,SAAW10C,UAChBF,KAAKiV,OAAS/U,UACdF,KAAK63C,SAAW33C,SACxB,CACI,MAAAmmC,CAAOrT,EAAUiL,GACb,MAAM3M,EAAOtxB,KAAKsY,QAClBtY,KAAKgmB,KAAO,EACZhmB,KAAK6lB,IAAM,EACX,IAAKyL,EAAKnJ,QAAS,CACfnoB,KAAKopB,MAAQppB,KAAK2uB,OAAS3uB,KAAK8lB,MAAQ9lB,KAAK+lB,OAAS,EACtD,MACZ,CACQ/lB,KAAKopB,MAAQppB,KAAK8lB,MAAQkN,EAC1BhzB,KAAK2uB,OAAS3uB,KAAK+lB,OAASkY,EAC5B,MAAMusB,EAAYvjD,GAAQqqB,EAAKhI,MAAQgI,EAAKhI,KAAK1nB,OAAS,EAC1D5B,KAAKq9D,SAAWvpC,GAAUxC,EAAK1L,SAC/B,MAAM03C,EAAW9S,EAAYz2B,GAAOzC,EAAK9F,MAAMG,WAAa3rB,KAAKq9D,SAAS1uC,OAC1E,GAAI3uB,KAAKm3C,eAAgB,CACrBn3C,KAAK2uB,OAAS2uC,CAC1B,KAAe,CACHt9D,KAAKopB,MAAQk0C,CACzB,CACA,CACI,YAAAnmB,GACI,MAAMpa,EAAM/8B,KAAKsY,QAAQs8B,SACzB,OAAO7X,IAAQ,OAASA,IAAQ,QACxC,CACI,SAAAwgC,CAAUn1C,GACN,MAAMvC,IAAEA,EAAGG,KAAGA,EAAID,OAAGA,EAAMD,MAAGA,EAAKxN,QAAGA,GAAatY,KACnD,MAAMqgB,EAAQ/H,EAAQ+H,MACtB,IAAIgP,EAAW,EACf,IAAI2D,EAAUovB,EAAQC,EACtB,GAAIriD,KAAKm3C,eAAgB,CACrBiL,EAAS9hC,GAAeD,EAAO2F,EAAMF,GACrCu8B,EAASx8B,EAAMuC,EACf4K,EAAWlN,EAAQE,CAC/B,KAAe,CACH,GAAI1N,EAAQs8B,WAAa,OAAQ,CAC7BwN,EAASp8B,EAAOoC,EAChBi6B,EAAS/hC,GAAeD,EAAO0F,EAAQF,GACvCwJ,EAAWnV,IAAM,EACjC,KAAmB,CACHkoC,EAASt8B,EAAQsC,EACjBi6B,EAAS/hC,GAAeD,EAAOwF,EAAKE,GACpCsJ,EAAWnV,GAAK,EAChC,CACY8Y,EAAWjN,EAASF,CAChC,CACQ,MAAO,CACHu8B,SACAC,SACArvB,WACA3D,WAEZ,CACI,IAAAgV,GACI,MAAMvY,EAAM9rB,KAAK8rB,IACjB,MAAMwF,EAAOtxB,KAAKsY,QAClB,IAAKgZ,EAAKnJ,QAAS,CACf,MACZ,CACQ,MAAMq1C,EAAWzpC,GAAOzC,EAAK9F,MAC7B,MAAMG,EAAa6xC,EAAS7xC,WAC5B,MAAMvD,EAASuD,EAAa,EAAI3rB,KAAKq9D,SAASx3C,IAC9C,MAAMu8B,OAAEA,EAAMC,OAAGA,EAAMrvB,SAAGA,EAAQ3D,SAAGA,GAAcrvB,KAAKu9D,UAAUn1C,GAClEsK,GAAW5G,EAAKwF,EAAKhI,KAAM,EAAG,EAAGk0C,EAAU,CACvCxoD,MAAOsc,EAAKtc,MACZge,WACA3D,WACAoC,UAAWrR,GAAmBkR,EAAKjR,OACnCqR,aAAc,SACdH,YAAa,CACT6wB,EACAC,IAGhB,EAEA,SAASob,GAAYr2C,EAAO0/B,GACxB,MAAMz9B,EAAQ,IAAI+zC,GAAM,CACpBtxC,IAAK1E,EAAM0E,IACXxT,QAASwuC,EACT1/B,UAEJiwB,GAAQtQ,UAAU3f,EAAOiC,EAAOy9B,GAChCzP,GAAQ0C,OAAO3yB,EAAOiC,GACtBjC,EAAMs2C,WAAar0C,CACvB,CACA,IAAIs0C,GAAe,CACf/8D,GAAI,QACPg9D,SAAUR,GACP,KAAA//C,CAAO+J,EAAOy2C,EAAOvlD,GACjBmlD,GAAYr2C,EAAO9O,EAC3B,EACI,IAAAmpB,CAAMra,GACF,MAAMs2C,EAAat2C,EAAMs2C,WACzBrmB,GAAQ6C,UAAU9yB,EAAOs2C,UAClBt2C,EAAMs2C,UACrB,EACI,YAAAtZ,CAAch9B,EAAOy2C,EAAOvlD,GACxB,MAAM+Q,EAAQjC,EAAMs2C,WACpBrmB,GAAQtQ,UAAU3f,EAAOiC,EAAO/Q,GAChC+Q,EAAM/Q,QAAUA,CACxB,EACImM,SAAU,CACNpE,MAAO,SACP8H,QAAS,MACTqD,KAAM,CACFvW,OAAQ,QAEZ4iC,SAAU,KACVjyB,QAAS,GACTgvB,SAAU,MACVtrB,KAAM,GACNrU,OAAQ,KAEZ03C,cAAe,CACX33C,MAAO,SAEXuV,YAAa,CACTtF,YAAa,KACbD,WAAY,QAghCpB,MAAM84C,GAAc,CAACxuB,EAAQpE,EAAKnzB,EAAOgmD,KACrC,UAAW7yB,IAAQ,SAAU,CACzBnzB,EAAQu3B,EAAO1rC,KAAKsnC,GAAO,EAC3B6yB,EAAYC,QAAQ,CAChBjmD,QACAy4B,MAAOtF,GAEnB,MAAW,GAAIvvB,MAAMuvB,GAAM,CACnBnzB,EAAQ,IAChB,CACI,OAAOA,CAAK,EAEhB,SAASkmD,GAAe3uB,EAAQpE,EAAKnzB,EAAOgmD,GACxC,MAAMre,EAAQpQ,EAAOl3B,QAAQ8yB,GAC7B,GAAIwU,KAAW,EAAG,CACd,OAAOoe,GAAYxuB,EAAQpE,EAAKnzB,EAAOgmD,EAC/C,CACI,MAAMz/C,EAAOgxB,EAAO4uB,YAAYhzB,GAChC,OAAOwU,IAAUphC,EAAOvG,EAAQ2nC,CACpC,CACA,MAAM4B,GAAa,CAACvpC,EAAO1T,IAAM0T,IAAU,KAAO,KAAO6F,GAAYxZ,KAAKJ,MAAM+T,GAAQ,EAAG1T,GAC3F,SAAS85D,GAAkB37D,GACvB,MAAM8sC,EAAStvC,KAAKuvC,YACpB,GAAI/sC,GAAS,GAAKA,EAAQ8sC,EAAO1tC,OAAQ,CACrC,OAAO0tC,EAAO9sC,EACtB,CACI,OAAOA,CACX,CACA,MAAM47D,WAAsB7b,GACxB1W,UAAY,WACfA,gBAAkB,CACX1kB,MAAO,CACHnQ,SAAUmnD,KAGlB,WAAAzpD,CAAYixB,GACR+N,MAAM/N,GACL3lC,KAAKq+D,YAAcn+D,UACpBF,KAAKs+D,YAAc,EACnBt+D,KAAKu+D,aAAe,EAC5B,CACI,IAAA5a,CAAK0M,GACD,MAAMmO,EAAQx+D,KAAKu+D,aACnB,GAAIC,EAAM58D,OAAQ,CACd,MAAM0tC,EAAStvC,KAAKuvC,YACpB,IAAK,MAAMx3B,MAAEA,EAAKy4B,MAAGA,KAAYguB,EAAM,CACnC,GAAIlvB,EAAOv3B,KAAWy4B,EAAO,CACzBlB,EAAO9vB,OAAOzH,EAAO,EACzC,CACA,CACY/X,KAAKu+D,aAAe,EAChC,CACQ7qB,MAAMiQ,KAAK0M,EACnB,CACI,KAAArhB,CAAM9D,EAAKnzB,GACP,GAAI9B,GAAci1B,GAAM,CACpB,OAAO,IACnB,CACQ,MAAMoE,EAAStvC,KAAKuvC,YACpBx3B,EAAQvB,SAASuB,IAAUu3B,EAAOv3B,KAAWmzB,EAAMnzB,EAAQkmD,GAAe3uB,EAAQpE,EAAKv0B,GAAeoB,EAAOmzB,GAAMlrC,KAAKu+D,cACxH,OAAOjd,GAAWvpC,EAAOu3B,EAAO1tC,OAAS,EACjD,CACI,mBAAA8iD,GACI,MAAMzjC,WAAEA,EAAUC,WAAGA,GAAgBlhB,KAAKmhB,gBAC1C,IAAI7c,IAAEA,EAAGD,IAAGA,GAASrE,KAAKgwC,UAAU,MACpC,GAAIhwC,KAAKsY,QAAQgQ,SAAW,QAAS,CACjC,IAAKrH,EAAY,CACb3c,EAAM,CACtB,CACY,IAAK4c,EAAY,CACb7c,EAAMrE,KAAKuvC,YAAY3tC,OAAS,CAChD,CACA,CACQ5B,KAAKsE,IAAMA,EACXtE,KAAKqE,IAAMA,CACnB,CACI,UAAAwgD,GACI,MAAMvgD,EAAMtE,KAAKsE,IACjB,MAAMD,EAAMrE,KAAKqE,IACjB,MAAM+jB,EAASpoB,KAAKsY,QAAQ8P,OAC5B,MAAMjB,EAAQ,GACd,IAAImoB,EAAStvC,KAAKuvC,YAClBD,EAAShrC,IAAQ,GAAKD,IAAQirC,EAAO1tC,OAAS,EAAI0tC,EAASA,EAAOjsC,MAAMiB,EAAKD,EAAM,GACnFrE,KAAKs+D,YAAcl6D,KAAKC,IAAIirC,EAAO1tC,QAAUwmB,EAAS,EAAI,GAAI,GAC9DpoB,KAAKq+D,YAAcr+D,KAAKsE,KAAO8jB,EAAS,GAAM,GAC9C,IAAI,IAAI5lB,EAAQ8B,EAAK9B,GAAS6B,EAAK7B,IAAQ,CACvC2kB,EAAMvjB,KAAK,CACPpB,SAEhB,CACQ,OAAO2kB,CACf,CACI,gBAAAspB,CAAiBjuC,GACb,OAAO27D,GAAkB/nD,KAAKpW,KAAMwC,EAC5C,CACC,SAAAukC,GACO2M,MAAM3M,YACN,IAAK/mC,KAAKm3C,eAAgB,CACtBn3C,KAAKy0C,gBAAkBz0C,KAAKy0C,cACxC,CACA,CACI,gBAAArzB,CAAiB5e,GACb,UAAWA,IAAU,SAAU,CAC3BA,EAAQxC,KAAKgvC,MAAMxsC,EAC/B,CACQ,OAAOA,IAAU,KAAOutC,IAAM/vC,KAAKyoD,oBAAoBjmD,EAAQxC,KAAKq+D,aAAer+D,KAAKs+D,YAChG,CACI,eAAA5c,CAAgB3pC,GACZ,MAAMoP,EAAQnnB,KAAKmnB,MACnB,GAAIpP,EAAQ,GAAKA,EAAQoP,EAAMvlB,OAAS,EAAG,CACvC,OAAO,IACnB,CACQ,OAAO5B,KAAKohB,iBAAiB+F,EAAMpP,GAAOvV,MAClD,CACI,gBAAAgmD,CAAiBt6B,GACb,OAAO9pB,KAAKJ,MAAMhE,KAAKq+D,YAAcr+D,KAAK2oD,mBAAmBz6B,GAASluB,KAAKs+D,YACnF,CACI,YAAAnqB,GACI,OAAOn0C,KAAK+lB,MACpB,EAGA,SAAS04C,GAAgBC,EAAmBC,GACxC,MAAMx3C,EAAQ,GACd,MAAMy3C,EAAc,MACpB,MAAMt2C,OAAEA,EAAM0hC,KAAGA,EAAI1lD,IAAGA,EAAGD,IAAGA,EAAGw6D,UAAGA,EAASj+C,MAAGA,EAAKk+C,SAAGA,EAAQC,UAAGA,EAASC,cAAGA,GAAmBN,EAClG,MAAMO,EAAOjV,GAAQ,EACrB,MAAMkV,EAAYJ,EAAW,EAC7B,MAAQx6D,IAAK66D,EAAO96D,IAAK+6D,GAAUT,EACnC,MAAM19C,GAAchL,GAAc3R,GAClC,MAAM4c,GAAcjL,GAAc5R,GAClC,MAAMg7D,GAAgBppD,GAAc2K,GACpC,MAAM0+C,GAAcF,EAAOD,IAASJ,EAAY,GAChD,IAAIlf,EAAU7kC,IAASokD,EAAOD,GAAQD,EAAYD,GAAQA,EAC1D,IAAI15B,EAAQg6B,EAASC,EAASC,EAC9B,GAAI5f,EAAU+e,IAAgB39C,IAAeC,EAAY,CACrD,MAAO,CACH,CACI1e,MAAO28D,GAEX,CACI38D,MAAO48D,GAGvB,CACIK,EAAYr7D,KAAKo8C,KAAK4e,EAAOvf,GAAWz7C,KAAK+W,MAAMgkD,EAAOtf,GAC1D,GAAI4f,EAAYP,EAAW,CACvBrf,EAAU7kC,GAAQykD,EAAY5f,EAAUqf,EAAYD,GAAQA,CACpE,CACI,IAAKhpD,GAAc4oD,GAAY,CAC3Bt5B,EAASnhC,KAAKqP,IAAI,GAAIorD,GACtBhf,EAAUz7C,KAAKo8C,KAAKX,EAAUta,GAAUA,CAChD,CACI,GAAIjd,IAAW,QAAS,CACpBi3C,EAAUn7D,KAAK+W,MAAMgkD,EAAOtf,GAAWA,EACvC2f,EAAUp7D,KAAKo8C,KAAK4e,EAAOvf,GAAWA,CAC9C,KAAW,CACH0f,EAAUJ,EACVK,EAAUJ,CAClB,CACI,GAAIn+C,GAAcC,GAAc8oC,GAAQpuC,IAAavX,EAAMC,GAAO0lD,EAAMnK,EAAU,KAAO,CACrF4f,EAAYr7D,KAAKJ,MAAMI,KAAKE,KAAKD,EAAMC,GAAOu7C,EAASif,IACvDjf,GAAWx7C,EAAMC,GAAOm7D,EACxBF,EAAUj7D,EACVk7D,EAAUn7D,CAClB,MAAW,GAAIg7D,EAAc,CACrBE,EAAUt+C,EAAa3c,EAAMi7D,EAC7BC,EAAUt+C,EAAa7c,EAAMm7D,EAC7BC,EAAY7+C,EAAQ,EACpBi/B,GAAW2f,EAAUD,GAAWE,CACxC,KAAW,CACHA,GAAaD,EAAUD,GAAW1f,EAClC,GAAIhlC,GAAa4kD,EAAWr7D,KAAKJ,MAAMy7D,GAAY5f,EAAU,KAAO,CAChE4f,EAAYr7D,KAAKJ,MAAMy7D,EACnC,KAAe,CACHA,EAAYr7D,KAAKo8C,KAAKif,EAClC,CACA,CACI,MAAMC,EAAgBt7D,KAAKC,IAAIgY,GAAewjC,GAAUxjC,GAAekjD,IACvEh6B,EAASnhC,KAAKqP,IAAI,GAAIwC,GAAc4oD,GAAaa,EAAgBb,GACjEU,EAAUn7D,KAAKJ,MAAMu7D,EAAUh6B,GAAUA,EACzCi6B,EAAUp7D,KAAKJ,MAAMw7D,EAAUj6B,GAAUA,EACzC,IAAI1yB,EAAI,EACR,GAAIoO,EAAY,CACZ,GAAI+9C,GAAiBO,IAAYj7D,EAAK,CAClC6iB,EAAMvjB,KAAK,CACPpB,MAAO8B,IAEX,GAAIi7D,EAAUj7D,EAAK,CACfuO,GAChB,CACY,GAAIgI,GAAazW,KAAKJ,OAAOu7D,EAAU1sD,EAAIgtC,GAAWta,GAAUA,EAAQjhC,EAAKq7D,GAAkBr7D,EAAKg7D,EAAYZ,IAAqB,CACjI7rD,GAChB,CACA,MAAe,GAAI0sD,EAAUj7D,EAAK,CACtBuO,GACZ,CACA,CACI,KAAMA,EAAI4sD,IAAa5sD,EAAE,CACrB,MAAMqU,EAAY9iB,KAAKJ,OAAOu7D,EAAU1sD,EAAIgtC,GAAWta,GAAUA,EACjE,GAAIrkB,GAAcgG,EAAY7iB,EAAK,CAC/B,KACZ,CACQ8iB,EAAMvjB,KAAK,CACPpB,MAAO0kB,GAEnB,CACI,GAAIhG,GAAc89C,GAAiBQ,IAAYn7D,EAAK,CAChD,GAAI8iB,EAAMvlB,QAAUiZ,GAAasM,EAAMA,EAAMvlB,OAAS,GAAGY,MAAO6B,EAAKs7D,GAAkBt7D,EAAKi7D,EAAYZ,IAAqB,CACzHv3C,EAAMA,EAAMvlB,OAAS,GAAGY,MAAQ6B,CAC5C,KAAe,CACH8iB,EAAMvjB,KAAK,CACPpB,MAAO6B,GAEvB,CACA,MAAW,IAAK6c,GAAcs+C,IAAYn7D,EAAK,CACvC8iB,EAAMvjB,KAAK,CACPpB,MAAOg9D,GAEnB,CACI,OAAOr4C,CACX,CACA,SAASw4C,GAAkBn9D,EAAO88D,GAAYpoB,WAAEA,EAAU3tB,YAAGA,IACzD,MAAMgG,EAAMtT,GAAUsN,GACtB,MAAMvV,GAASkjC,EAAa9yC,KAAK6d,IAAIsN,GAAOnrB,KAAK8e,IAAIqM,KAAS,KAC9D,MAAM3tB,EAAS,IAAO09D,GAAc,GAAK98D,GAAOZ,OAChD,OAAOwC,KAAKE,IAAIg7D,EAAatrD,EAAOpS,EACxC,CACA,MAAMg+D,WAAwBrd,GAC1B,WAAA7tC,CAAYixB,GACR+N,MAAM/N,GACL3lC,KAAKqd,MAAQnd,UACbF,KAAKsd,IAAMpd,UACXF,KAAKq+D,YAAcn+D,UACnBF,KAAK6/D,UAAY3/D,UAClBF,KAAKs+D,YAAc,CAC3B,CACI,KAAAtvB,CAAM9D,EAAKnzB,GACP,GAAI9B,GAAci1B,GAAM,CACpB,OAAO,IACnB,CACQ,WAAYA,IAAQ,UAAYA,aAAe30B,UAAYC,UAAU00B,GAAM,CACvE,OAAO,IACnB,CACQ,OAAQA,CAChB,CACI,sBAAA40B,GACI,MAAMz3C,YAAEA,GAAiBroB,KAAKsY,QAC9B,MAAM2I,WAAEA,EAAUC,WAAGA,GAAgBlhB,KAAKmhB,gBAC1C,IAAI7c,IAAEA,EAAGD,IAAGA,GAASrE,KACrB,MAAM+/D,EAAU97D,GAAIK,EAAM2c,EAAa3c,EAAML,EAC7C,MAAM+7D,EAAU/7D,GAAII,EAAM6c,EAAa7c,EAAMJ,EAC7C,GAAIokB,EAAa,CACb,MAAM43C,EAAUrlD,GAAKtW,GACrB,MAAM47D,EAAUtlD,GAAKvW,GACrB,GAAI47D,EAAU,GAAKC,EAAU,EAAG,CAC5BF,EAAO,EACvB,MAAmB,GAAIC,EAAU,GAAKC,EAAU,EAAG,CACnCH,EAAO,EACvB,CACA,CACQ,GAAIz7D,IAAQD,EAAK,CACb,IAAI+jB,EAAS/jB,IAAQ,EAAI,EAAID,KAAK2W,IAAI1W,EAAM,KAC5C27D,EAAO37D,EAAM+jB,GACb,IAAKC,EAAa,CACd03C,EAAOz7D,EAAM8jB,EAC7B,CACA,CACQpoB,KAAKsE,IAAMA,EACXtE,KAAKqE,IAAMA,CACnB,CACI,YAAA87D,GACI,MAAMlhB,EAAWj/C,KAAKsY,QAAQ6O,MAC9B,IAAIk4B,cAAEA,EAAa+gB,SAAGA,GAAcnhB,EACpC,IAAI6f,EACJ,GAAIsB,EAAU,CACVtB,EAAW16D,KAAKo8C,KAAKxgD,KAAKqE,IAAM+7D,GAAYh8D,KAAK+W,MAAMnb,KAAKsE,IAAM87D,GAAY,EAC9E,GAAItB,EAAW,IAAM,CACjB7qC,QAAQC,KAAK,UAAUl0B,KAAKY,sBAAsBw/D,mCAA0CtB,8BAC5FA,EAAW,GAC3B,CACA,KAAe,CACHA,EAAW9+D,KAAKqgE,mBAChBhhB,EAAgBA,GAAiB,EAC7C,CACQ,GAAIA,EAAe,CACfyf,EAAW16D,KAAKE,IAAI+6C,EAAeyf,EAC/C,CACQ,OAAOA,CACf,CACC,gBAAAuB,GACO,OAAO9pD,OAAO+D,iBACtB,CACI,UAAAuqC,GACI,MAAMvzB,EAAOtxB,KAAKsY,QAClB,MAAM2mC,EAAW3tB,EAAKnK,MACtB,IAAI23C,EAAW9+D,KAAKmgE,eACpBrB,EAAW16D,KAAKC,IAAI,EAAGy6D,GACvB,MAAMwB,EAA0B,CAC5BxB,WACAx2C,OAAQgJ,EAAKhJ,OACbhkB,IAAKgtB,EAAKhtB,IACVD,IAAKitB,EAAKjtB,IACVw6D,UAAW5f,EAAS4f,UACpB7U,KAAM/K,EAASmhB,SACfx/C,MAAOq+B,EAASr+B,MAChBm+C,UAAW/+D,KAAKgsD,aAChB9U,WAAYl3C,KAAKm3C,eACjB5tB,YAAa01B,EAAS11B,aAAe,EACrCy1C,cAAe/f,EAAS+f,gBAAkB,OAE9C,MAAML,EAAY3+D,KAAK8iD,QAAU9iD,KACjC,MAAMmnB,EAAQs3C,GAAgB6B,EAAyB3B,GACvD,GAAIrtC,EAAKhJ,SAAW,QAAS,CACzBxM,GAAmBqL,EAAOnnB,KAAM,QAC5C,CACQ,GAAIsxB,EAAK/Z,QAAS,CACd4P,EAAM5P,UACNvX,KAAKqd,MAAQrd,KAAKqE,IAClBrE,KAAKsd,IAAMtd,KAAKsE,GAC5B,KAAe,CACHtE,KAAKqd,MAAQrd,KAAKsE,IAClBtE,KAAKsd,IAAMtd,KAAKqE,GAC5B,CACQ,OAAO8iB,CACf,CACC,SAAA4f,GACO,MAAM5f,EAAQnnB,KAAKmnB,MACnB,IAAI9J,EAAQrd,KAAKsE,IACjB,IAAIgZ,EAAMtd,KAAKqE,IACfqvC,MAAM3M,YACN,GAAI/mC,KAAKsY,QAAQ8P,QAAUjB,EAAMvlB,OAAQ,CACrC,MAAMwmB,GAAU9K,EAAMD,GAASjZ,KAAKC,IAAI8iB,EAAMvlB,OAAS,EAAG,GAAK,EAC/Dyb,GAAS+K,EACT9K,GAAO8K,CACnB,CACQpoB,KAAKq+D,YAAchhD,EACnBrd,KAAK6/D,UAAYviD,EACjBtd,KAAKs+D,YAAchhD,EAAMD,CACjC,CACI,gBAAAozB,CAAiBjuC,GACb,OAAOokB,GAAapkB,EAAOxC,KAAKonB,MAAM9O,QAAQ8N,OAAQpmB,KAAKsY,QAAQ6O,MAAML,OACjF,EAGA,MAAMy5C,WAAoBX,GACtB/zB,UAAY,SACfA,gBAAkB,CACX1kB,MAAO,CACHnQ,SAAUiR,GAAMlB,WAAWE,UAGnC,mBAAAy9B,GACI,MAAMpgD,IAAEA,EAAGD,IAAGA,GAASrE,KAAKgwC,UAAU,MACtChwC,KAAKsE,IAAMgS,GAAehS,GAAOA,EAAM,EACvCtE,KAAKqE,IAAMiS,GAAejS,GAAOA,EAAM,EACvCrE,KAAK8/D,wBACb,CACC,gBAAAO,GACO,MAAMnpB,EAAal3C,KAAKm3C,eACxB,MAAMv1C,EAASs1C,EAAal3C,KAAKopB,MAAQppB,KAAK2uB,OAC9C,MAAMpF,EAActN,GAAUjc,KAAKsY,QAAQ6O,MAAMoC,aACjD,MAAMvV,GAASkjC,EAAa9yC,KAAK6d,IAAIsH,GAAenlB,KAAK8e,IAAIqG,KAAiB,KAC9E,MAAM2+B,EAAWloD,KAAKqoD,wBAAwB,GAC9C,OAAOjkD,KAAKo8C,KAAK5+C,EAASwC,KAAKE,IAAI,GAAI4jD,EAASv8B,WAAa3X,GACrE,CACI,gBAAAoN,CAAiB5e,GACb,OAAOA,IAAU,KAAOutC,IAAM/vC,KAAKyoD,oBAAoBjmD,EAAQxC,KAAKq+D,aAAer+D,KAAKs+D,YAChG,CACI,gBAAA9V,CAAiBt6B,GACb,OAAOluB,KAAKq+D,YAAcr+D,KAAK2oD,mBAAmBz6B,GAASluB,KAAKs+D,WACxE,EAGA,MAAMkC,GAAcv8D,GAAIG,KAAK+W,MAAMR,GAAM1W,IACzC,MAAMw8D,GAAiB,CAACx8D,EAAGsD,IAAInD,KAAKqP,IAAI,GAAI+sD,GAAWv8D,GAAKsD,GAC5D,SAASm5D,GAAQC,GACb,MAAM74C,EAAS64C,EAAUv8D,KAAKqP,IAAI,GAAI+sD,GAAWG,IACjD,OAAO74C,IAAW,CACtB,CACA,SAAS84C,GAAMt8D,EAAKD,EAAKw8D,GACrB,MAAMC,EAAY18D,KAAKqP,IAAI,GAAIotD,GAC/B,MAAMxjD,EAAQjZ,KAAK+W,MAAM7W,EAAMw8D,GAC/B,MAAMxjD,EAAMlZ,KAAKo8C,KAAKn8C,EAAMy8D,GAC5B,OAAOxjD,EAAMD,CACjB,CACA,SAAS0jD,GAASz8D,EAAKD,GACnB,MAAMyC,EAAQzC,EAAMC,EACpB,IAAIu8D,EAAWL,GAAW15D,GAC1B,MAAM85D,GAAMt8D,EAAKD,EAAKw8D,GAAY,GAAG,CACjCA,GACR,CACI,MAAMD,GAAMt8D,EAAKD,EAAKw8D,GAAY,GAAG,CACjCA,GACR,CACI,OAAOz8D,KAAKE,IAAIu8D,EAAUL,GAAWl8D,GACzC,CACC,SAAS08D,GAActC,GAAmBp6D,IAAEA,EAAGD,IAAGA,IAC/CC,EAAMmS,GAAgBioD,EAAkBp6D,IAAKA,GAC7C,MAAM6iB,EAAQ,GACd,MAAM85C,EAAST,GAAWl8D,GAC1B,IAAI48D,EAAMH,GAASz8D,EAAKD,GACxB,IAAIw6D,EAAYqC,EAAM,EAAI98D,KAAKqP,IAAI,GAAIrP,KAAK2W,IAAImmD,IAAQ,EACxD,MAAMd,EAAWh8D,KAAKqP,IAAI,GAAIytD,GAC9B,MAAM/hD,EAAO8hD,EAASC,EAAM98D,KAAKqP,IAAI,GAAIwtD,GAAU,EACnD,MAAM5jD,EAAQjZ,KAAKJ,OAAOM,EAAM6a,GAAQ0/C,GAAaA,EACrD,MAAMz2C,EAAShkB,KAAK+W,OAAO7W,EAAM6a,GAAQihD,EAAW,IAAMA,EAAW,GACrE,IAAIr4C,EAAc3jB,KAAK+W,OAAOkC,EAAQ+K,GAAUhkB,KAAKqP,IAAI,GAAIytD,IAC7D,IAAI1+D,EAAQiU,GAAgBioD,EAAkBp6D,IAAKF,KAAKJ,OAAOmb,EAAOiJ,EAASL,EAAc3jB,KAAKqP,IAAI,GAAIytD,IAAQrC,GAAaA,GAC/H,MAAMr8D,EAAQ6B,EAAI,CACd8iB,EAAMvjB,KAAK,CACPpB,QACAwnB,MAAO02C,GAAQl+D,GACfulB,gBAEJ,GAAIA,GAAe,GAAI,CACnBA,EAAcA,EAAc,GAAK,GAAK,EAClD,KAAe,CACHA,GACZ,CACQ,GAAIA,GAAe,GAAI,CACnBm5C,IACAn5C,EAAc,EACd82C,EAAYqC,GAAO,EAAI,EAAIrC,CACvC,CACQr8D,EAAQ4B,KAAKJ,OAAOmb,EAAOiJ,EAASL,EAAc3jB,KAAKqP,IAAI,GAAIytD,IAAQrC,GAAaA,CAC5F,CACI,MAAMsC,EAAW1qD,GAAgBioD,EAAkBr6D,IAAK7B,GACxD2kB,EAAMvjB,KAAK,CACPpB,MAAO2+D,EACPn3C,MAAO02C,GAAQS,GACfp5C,gBAEJ,OAAOZ,CACX,CACA,MAAMi6C,WAAyB7e,GAC3B1W,UAAY,cACfA,gBAAkB,CACX1kB,MAAO,CACHnQ,SAAUiR,GAAMlB,WAAWc,YAC3BmC,MAAO,CACHu1B,QAAS,QAIrB,WAAA7qC,CAAYixB,GACR+N,MAAM/N,GACL3lC,KAAKqd,MAAQnd,UACbF,KAAKsd,IAAMpd,UACXF,KAAKq+D,YAAcn+D,UACpBF,KAAKs+D,YAAc,CAC3B,CACI,KAAAtvB,CAAM9D,EAAKnzB,GACP,MAAMvV,EAAQo9D,GAAgB1pD,UAAU84B,MAAM53B,MAAMpX,KAAM,CACtDkrC,EACAnzB,IAEJ,GAAIvV,IAAU,EAAG,CACbxC,KAAKqhE,MAAQ,KACb,OAAOnhE,SACnB,CACQ,OAAOoW,GAAe9T,IAAUA,EAAQ,EAAIA,EAAQ,IAC5D,CACI,mBAAAkiD,GACI,MAAMpgD,IAAEA,EAAGD,IAAGA,GAASrE,KAAKgwC,UAAU,MACtChwC,KAAKsE,IAAMgS,GAAehS,GAAOF,KAAKC,IAAI,EAAGC,GAAO,KACpDtE,KAAKqE,IAAMiS,GAAejS,GAAOD,KAAKC,IAAI,EAAGA,GAAO,KACpD,GAAIrE,KAAKsY,QAAQ+P,YAAa,CAC1BroB,KAAKqhE,MAAQ,IACzB,CACQ,GAAIrhE,KAAKqhE,OAASrhE,KAAKsE,MAAQtE,KAAKsjD,gBAAkBhtC,GAAetW,KAAKojD,UAAW,CACjFpjD,KAAKsE,IAAMA,IAAQm8D,GAAezgE,KAAKsE,IAAK,GAAKm8D,GAAezgE,KAAKsE,KAAM,GAAKm8D,GAAezgE,KAAKsE,IAAK,EACrH,CACQtE,KAAK8/D,wBACb,CACI,sBAAAA,GACI,MAAM7+C,WAAEA,EAAUC,WAAGA,GAAgBlhB,KAAKmhB,gBAC1C,IAAI7c,EAAMtE,KAAKsE,IACf,IAAID,EAAMrE,KAAKqE,IACf,MAAM07D,EAAU97D,GAAIK,EAAM2c,EAAa3c,EAAML,EAC7C,MAAM+7D,EAAU/7D,GAAII,EAAM6c,EAAa7c,EAAMJ,EAC7C,GAAIK,IAAQD,EAAK,CACb,GAAIC,GAAO,EAAG,CACVy7D,EAAO,GACPC,EAAO,GACvB,KAAmB,CACHD,EAAOU,GAAen8D,GAAM,IAC5B07D,EAAOS,GAAep8D,GAAM,GAC5C,CACA,CACQ,GAAIC,GAAO,EAAG,CACVy7D,EAAOU,GAAep8D,GAAM,GACxC,CACQ,GAAIA,GAAO,EAAG,CACV27D,EAAOS,GAAen8D,GAAM,GACxC,CACQtE,KAAKsE,IAAMA,EACXtE,KAAKqE,IAAMA,CACnB,CACI,UAAAwgD,GACI,MAAMvzB,EAAOtxB,KAAKsY,QAClB,MAAMomD,EAAoB,CACtBp6D,IAAKtE,KAAKojD,SACV/+C,IAAKrE,KAAKmjD,UAEd,MAAMh8B,EAAQ65C,GAActC,EAAmB1+D,MAC/C,GAAIsxB,EAAKhJ,SAAW,QAAS,CACzBxM,GAAmBqL,EAAOnnB,KAAM,QAC5C,CACQ,GAAIsxB,EAAK/Z,QAAS,CACd4P,EAAM5P,UACNvX,KAAKqd,MAAQrd,KAAKqE,IAClBrE,KAAKsd,IAAMtd,KAAKsE,GAC5B,KAAe,CACHtE,KAAKqd,MAAQrd,KAAKsE,IAClBtE,KAAKsd,IAAMtd,KAAKqE,GAC5B,CACQ,OAAO8iB,CACf,CACC,gBAAAspB,CAAiBjuC,GACV,OAAOA,IAAUtC,UAAY,IAAM0mB,GAAapkB,EAAOxC,KAAKonB,MAAM9O,QAAQ8N,OAAQpmB,KAAKsY,QAAQ6O,MAAML,OAC7G,CACC,SAAAigB,GACO,MAAM1pB,EAAQrd,KAAKsE,IACnBovC,MAAM3M,YACN/mC,KAAKq+D,YAAc1jD,GAAM0C,GACzBrd,KAAKs+D,YAAc3jD,GAAM3a,KAAKqE,KAAOsW,GAAM0C,EACnD,CACI,gBAAA+D,CAAiB5e,GACb,GAAIA,IAAUtC,WAAasC,IAAU,EAAG,CACpCA,EAAQxC,KAAKsE,GACzB,CACQ,GAAI9B,IAAU,MAAQmZ,MAAMnZ,GAAQ,CAChC,OAAOutC,GACnB,CACQ,OAAO/vC,KAAKyoD,mBAAmBjmD,IAAUxC,KAAKsE,IAAM,GAAKqW,GAAMnY,GAASxC,KAAKq+D,aAAer+D,KAAKs+D,YACzG,CACI,gBAAA9V,CAAiBt6B,GACb,MAAMw6B,EAAU1oD,KAAK2oD,mBAAmBz6B,GACxC,OAAO9pB,KAAKqP,IAAI,GAAIzT,KAAKq+D,YAAc3V,EAAU1oD,KAAKs+D,YAC9D,ECrsUA,MAAMgD,GAAyB,uBAC/B,MAAAC,GAAeD,GCGflN,GAAM/H,SAAS9Y,GAAgB8oB,GAAaQ,GAAcuB,GAAemC,GAAYa,GAAkBhE,I,MAO1FoE,GAAmB,M,6CAK9B,YAAAC,CAAaC,GACX1hE,KAAK2hE,YAAYD,E,CAEnB,iBAAAvhE,GACEH,KAAK4hE,YAAY5hE,KAAKU,K,CAExB,WAAAkhE,CAAYlhE,GACV,MAAMorB,EAAM9rB,KAAK6hE,SAAStzC,WAAW,MACrC,IAAKzC,EAAK,CACRmI,QAAQ68B,MAAM,+BACd,M,CAGF,MAAMxhB,EAAS5uC,EAAKiB,cAAcG,KAAKC,GAAUA,EAAM+/D,YACvD,MAAMngE,EAAgBjB,EAAKiB,cAAcG,KAAKC,GAAUA,EAAMC,eAE9D,MAAM+/D,EAAW39D,KAAKE,OAAO3C,GAAiB,GAC9C,MAAMqgE,EAAW59D,KAAKC,OAAO1C,GAAiB,IAG9C3B,KAAKonB,MAAQ,IAAIgtC,GAAMtoC,EAAK,CAC1BvpB,KAAM,OACNorB,KAAM,CACJ2hB,OAAQA,EACRrkB,SAAU,CACR,CACEulB,MAAO,6BACP7iB,KAAMhsB,EACNqpB,YAAa,oBACbkF,KAAM,MACNuL,QAAS,MAIfnjB,QAAS,CACPoU,WAAY,KACZD,QAAS,CACPpD,MAAO,CACLlB,QAAS,KACTmB,KAAM,8BAGVsD,OAAQ,CACN9kB,EAAG,CACDvF,KAAM,WACN8mB,MAAO,CACLlB,QAAS,KACTmB,KAAM,SAGVpQ,EAAG,CACD3W,KAAM,SACN8mB,MAAO,CACLlB,QAAS,KACTmB,KAAM,QAERhlB,IAAKy9D,EACL19D,IAAK29D,M,CAOf,WAAAL,CAAYjhE,GACV,IAAKV,KAAKonB,MAAO,CACfpnB,KAAK4hE,YAAYlhE,GACjB,M,CAIFV,KAAKonB,MAAMuG,KAAK2hB,OAAS5uC,EAAKiB,cAAcG,KAAKC,GAAUA,EAAM+/D,YACjE9hE,KAAKonB,MAAMuG,KAAK1C,SAAS,GAAG0C,KAAOjtB,EAAKiB,cAAcG,KAAKC,GAAUA,EAAMC,eAG3E,MAAML,EAAgBjB,EAAKiB,cAAcG,KAAKC,GAAUA,EAAMC,eAC9DhC,KAAKonB,MAAM9O,QAAQsU,OAAO1T,EAAE5U,IAAMF,KAAKE,OAAO3C,GAAiB,GAC/D3B,KAAKonB,MAAM9O,QAAQsU,OAAO1T,EAAE7U,IAAMD,KAAKC,OAAO1C,GAAiB,IAG/D3B,KAAKonB,MAAMif,Q,CAEb,MAAAlkC,GACE,OAEIC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,OACTF,EAAA,OAAAC,IAAA,2CAAKC,MAAM,SAAStC,KAAKU,KAAKqC,MAC9BX,EAAA,OAAAC,IAAA,2CAAKC,MAAM,SAAQF,EAAA,UAAAC,IAAA,2CAAQ4/D,IAAKxlC,GAAOz8B,KAAK6hE,SAAWplC,K,mECvGjE,MAAMylC,GAAyB,uBAC/B,MAAAC,GAAeD,G,MCOFE,GAAmB,M,yBAC9BpiE,KAAAC,QAAkB,4BAWlBD,KAAAqiE,aAAuB,E,WAVE,G,WACA,G,uBACW,E,oBACK,G,oBACR,O,yCAIN,K,CAI3B,uBAAMliE,GACJ,IACE,MAAMmiE,QAAyBtiE,KAAKK,aAAa,0CACjD,MAAMkiE,QAA0BviE,KAAKK,aAAa,4CAClDL,KAAKwiE,YAAcxiE,KAAKK,aAAa,gBAErCL,KAAKO,qBAAuBP,KAAKK,aAAa,mBAC9CL,KAAKI,YAAcJ,KAAKyiE,aAAaH,EAAUlqB,OAAOmqB,IACtDviE,KAAKI,MAAQJ,KAAKI,MAAM8C,QAAQxC,IAAUib,MAAMjb,EAAKgiE,gB,CACrD,MAAO5R,GACP78B,QAAQ68B,MAAM,wBAAyBA,E,EAI3C,kBAAM2R,CAAaH,GACjB,OAAO77B,QAAQoB,IACby6B,EAAUxgE,KAAI6gE,MAAOjiE,IACnB,IAAKA,EAAKkiE,gBAAkBliE,EAAKmiE,gBAAiB,OAAOniE,EAEzDA,EAAKoiE,gBAAkB9iE,KAAK+iE,oBAAoBriE,GAChDA,EAAKsiE,aAAehjE,KAAKijE,qBAAqBviE,GAE9CV,KAAKkjE,uBAAuBxiE,GAC5BV,KAAKmjE,YAAYziE,GAEjB,OAAOA,CAAI,I,CAKjB,oBAAM0iE,CAAexiE,GACnB,MAAM0hE,QAAyBtiE,KAAKK,aAAa,qBAAqBO,wBACtE,MAAM2hE,QAA0BviE,KAAKK,aAAa,qBAAqBO,0BACvEZ,KAAKI,YAAcJ,KAAKyiE,aAAaH,EAAUlqB,OAAOmqB,IACtDviE,KAAKI,MAAQJ,KAAKI,MAAM8C,QAAQxC,IAAUib,MAAMjb,EAAKgiE,gB,CAKvD,mBAAAK,CAAoBriE,GAClB,OAAOA,EAAKkiE,cAAc79B,QAAO,CAAC0V,EAAO4oB,IAErC5oB,EACA4oB,EAAOC,YAAYv+B,QAAO,CAACw+B,EAAKC,K,UAC9B,MAAMzhE,IAAQ0hE,GAAAC,GAAAC,EAAAH,EAAWI,cAAU,MAAAD,SAAA,SAAAA,EAAEhiE,iBAAa,MAAA+hE,SAAA,SAAAA,EAAG,MAAE,MAAAD,SAAA,SAAAA,EAAEzhE,eAAgB,EACzE,OAAOuhE,EAAMxhE,EAAQyhE,EAAWK,QAAQ,GACvC,IAEJ,E,CAGL,oBAAAZ,CAAqBviE,GACnB,MAAMojE,EAA6B,GACnC,IAAIC,EAAiB,EACrB,IAAIC,EAAsB,EAE1B,IAAIC,EAAa,EACjB,IAAIC,EACJxjE,EAAKmiE,gBAAgB5jD,SAASklD,I,MAC5B,GAAIA,EAAKzwD,KAAO,MAAMiwD,EAAAQ,EAAKC,kBAAc,MAAAT,SAAA,SAAAA,EAAEnB,OAAO,OAElD2B,EAAKC,eAAe5B,MAAMvjD,SAASolD,I,YACjC,MAAMC,EAAUD,EAAKC,SAAW,EAGhC,MAAMtiE,IAAeyhE,GAAAC,GAAAC,EAAAU,EAAKA,QAAI,MAAAV,SAAA,SAAAA,EAAEhiE,iBAAa,MAAA+hE,SAAA,SAAAA,EAAG,MAAE,MAAAD,SAAA,SAAAA,EAAEzhE,eAAgB,EACpE,MAAMQ,EAAQ2hE,EAAK3wD,IAAM2wD,EAAKzwD,KAAOywD,EAAK3wD,IAAM,EAAI2wD,EAAKzwD,KAEzD,MAAM6wD,GAAS,EAAI/hE,EAAQ8hE,EAAU5jE,EAAK8jE,IAAO,IAAO,GAAKpgE,KAAKC,IAAIigE,EAAS,GAC/E,MAAMG,EAAeF,EAAMviE,EAC3B+hE,GAAkBU,EAIlB,MAAMC,EAAgB1kE,KAAK2kE,kBAAkBjkE,EAAMyjE,EAAMG,GAEzD,MAAMM,EAAaF,EAAgB1iE,EAEnC,GAAG4iE,EAAaX,EAAW,CACzBA,EAAaW,EACbV,EAAkBG,C,CAGpBL,EAAsB5/D,KAAKC,IAAI2/D,EAAqBY,GAEpDd,EAAYlgE,KAAK,CACfrB,OAAMsiE,EAAAR,EAAKA,QAAI,MAAAQ,SAAA,SAAAA,EAAE9hE,OAAQ,eACzB+hE,cAAeJ,EACfK,gBAAiBR,EACjBK,aACAH,eACAO,sBAAuBb,EAAKC,eAAerhE,MAC3C,GACF,IAGJrC,EAAKqjE,eAAiBA,EACtBrjE,EAAKsjE,oBAAsBA,EAC3BtjE,EAAKwjE,gBAAkBA,EACvB,OAAOJ,C,CAGT,iBAAAa,CAAkBjkE,EAAYyjE,EAAMG,GAClC,OAAO5jE,EAAKmiE,gBAAgB99B,QAAO,CAAC0V,EAAOwqB,K,MACzC,GAAIA,EAAUvxD,KAAO,EAAG,OAAO+mC,EAE/B,MAAMyqB,EAAaD,EAAUzxD,IACxByxD,EAAUvxD,KAAOuxD,EAAUzxD,IAAM,EAClCyxD,EAAUvxD,KACd,MAAMyxD,EAAc,EAAID,KAAcvB,EAAAsB,EAAUb,eAAe5B,MAAM,MAAE,MAAAmB,SAAA,SAAAA,EAAEW,UAAW,GAAK5jE,EAAK8jE,IAAO,IAAO,EAE5G,OAAO/pB,GAASwqB,EAAUb,eAAexjE,KAAOujE,EAAKC,eAAexjE,GAAKukE,EAAWA,EAAW,GAAI,GAClG,GAAK/gE,KAAKC,IAAIigE,EAAS,E,CAG5B,sBAAApB,CAAuBxiE,GACrB,MAAM0kE,EAAY1kE,EAAKoiE,gBAAkBpiE,EAAKsjE,oBAC9C,MAAMqB,EAAc3kE,EAAKoiE,gBAAkBpiE,EAAKqjE,eAChD,MAAMuB,EAAQlhE,KAAKE,IAAI8gE,EAAWC,GAElC3kE,EAAKgiE,cAAgB4C,EACrB5kE,EAAK6kE,sBAAwBH,EAC7B1kE,EAAK8kE,wBAA0BH,EAE/B3kE,EAAKsiE,aAAa/jD,SAASolD,IACzBA,EAAKS,eAAiBQ,EACtBjB,EAAKU,iBAAmBO,EACxBjB,EAAKO,YAAcU,EACnBjB,EAAKI,cAAgBa,CAAK,G,CAI9B,WAAAnC,CAAYziE,GACV,MAAM+kE,EAAe/kE,EAAKsjE,oBAAsBtjE,EAAKoiE,gBACrD,MAAM4C,EAAiBhlE,EAAKqjE,eAAiBrjE,EAAKoiE,gBAElDpiE,EAAKilE,QAAUvhE,KAAKC,IAAIohE,EAAcC,GACtChlE,EAAKklE,kBAAoBllE,EAAKoiE,gBAAkB,EAAKpiE,EAAKilE,QAAUjlE,EAAKoiE,gBAAmB,IAAM,C,CAGpG,kBAAMziE,CAAaS,GACjB,MAAMC,QAAiBC,MAAMhB,KAAKC,QAAUa,GAC5C,IAAKC,EAASE,GAAI,CAChB,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,S,CAElD,aAAaJ,EAASK,M,CAGxB,SAAAykE,GACE,GAAG7lE,KAAK8lE,iBAAmB,OAAO,CAChC,OAAO9lE,KAAKI,MAAMiB,MAAK,CAACC,EAAGC,IAAMA,EAAEvB,KAAK+lE,cAAgBzkE,EAAEtB,KAAK+lE,e,MAC1D,GAAG/lE,KAAK8lE,iBAAmB,MAAM,CACtC,OAAO9lE,KAAKI,MAAMiB,MAAK,CAACC,EAAGC,IAAMD,EAAEtB,KAAK+lE,cAAgBxkE,EAAEvB,KAAK+lE,e,MAC1D,OAAO/lE,KAAKI,K,CAGrB,iBAAA4lE,GAEE,GAAGhmE,KAAKimE,mBAAqB,EAC3B,OAAOjmE,KAAK6lE,YACd,OAAO7lE,KAAK6lE,YAAY3iE,QAAQxC,I,QAC9B,QAAOgjE,GAAAC,EAAAjjE,EAAKwjE,mBAAe,MAAAP,SAAA,SAAAA,EAAEU,QAAI,MAAAX,SAAA,SAAAA,EAAE9iE,KAAMZ,KAAKimE,iBAAiB,G,CAInE,MAAA9jE,G,MACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,cACTF,EAAA,MAAAC,IAAA,wFACAD,EAAA,UAAAC,IAAA,2CAAQK,SAAW+S,GAAOzV,KAAKojE,eAAgB3tD,EAAI7S,OAAeJ,QAC/DxC,KAAKO,eAAeuB,KAAKokE,GACjB9jE,EAAA,UAAQI,MAAO0jE,EAAItlE,IAAKslE,EAAInjE,SAGvCX,EAAA,UAAAC,IAAA,2CAAQK,SAAWuB,GAAKjE,KAAK+lE,aAAiB9hE,EAAErB,OAAoB,OAClER,EAAA,UAAAC,IAAA,2CAAQG,MAAM,iBAAe,SAC7BJ,EAAA,UAAAC,IAAA,2CAAQG,MAAM,mBAAiB,mBAEjCJ,EAAA,UAAAC,IAAA,2CAAQK,SAAWuB,IAAKjE,KAAK8lE,eAAkB7hE,EAAErB,OAAeJ,KAAK,GACnEJ,EAAA,UAAAC,IAAA,2CAAQG,MAAM,QAAM,QACpBJ,EAAA,UAAAC,IAAA,2CAAQG,MAAM,OAAK,QAErBJ,EAAA,UAAAC,IAAA,2CAAQK,SAAWuB,IAAMjE,KAAKimE,kBAAsBhiE,EAAErB,OAAoB,KAAC,GACzER,EAAA,UAAAC,IAAA,2CAAQG,MAAO,GAAC,aACfxC,KAAKwiE,MAAM1gE,KAAKuiE,GACRjiE,EAAA,UAAQI,MAAO6hE,EAAKzjE,IAAKyjE,EAAKthE,WAKxC4gE,EAAA3jE,KAAKI,SAAK,MAAAujE,SAAA,SAAAA,EAAE/hE,UAAW,EACtBQ,EAAA,6BAEAA,EAAA,SAAOE,MAAM,SACXF,EAAA,aACEA,EAAA,UACEA,EAAA,uBACAA,EAAA,wBACAA,EAAA,mBACAA,EAAA,uCACAA,EAAA,4BAGJA,EAAA,aACGpC,KAAKgmE,oBAAoBlkE,KAAKpB,I,MAAS,OACtCA,EAAKoiE,gBAAkB,GACrB1gE,EAAA,MAAIC,IAAK3B,EAAKE,IACZwB,EAAA,UAAK1B,EAAKqC,KAAI,OAAK4gE,EAAAjjE,EAAKyC,YAAQ,MAAAwgE,SAAA,S,EAAE5gE,KAAI,UAASrC,EAAK8jE,KACpDpiE,EAAA,UAAK1B,EAAKoiE,gBAAgBqD,QAAQ,IAClC/jE,EAAA,UAAK1B,EAAK6kE,sBAAwB7kE,EAAK8kE,wBAA0B,WAAa,SAC9EpjE,EAAA,WAAMgC,KAAKE,IAAI5D,EAAK6kE,sBAAuB7kE,EAAK8kE,yBAAyB,KAAKW,QAAQ,IACtF/jE,EAAA,UACG1B,EAAKsiE,aAAaphE,OAAS,EAC1BQ,EAAA,UACG1B,EAAKsiE,aAAalhE,KAAKuiE,GACtBjiE,EAAA,MAAIC,IAAKgiE,EAAK9hE,MACX8hE,EAAK9hE,KAAI,IACVH,EAAA,UACEA,EAAA,6BAAqBiiE,EAAKS,cAAcqB,QAAQ,GAAE,YAAW9B,EAAKO,WAAWuB,QAAQ,GAAE,KACvF/jE,EAAA,gCAAwBiiE,EAAKU,gBAAgBoB,QAAQ,GAAE,YAAW9B,EAAKI,aAAa0B,QAAQ,GAAE,UAKpG,OAGT,M","ignoreList":[]}