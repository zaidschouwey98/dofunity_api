{"version":3,"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","len","length","ret","alpha","hexString","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","map","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","ok","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","type","this","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","push","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","_isClickEvent","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","roundedRange","niceRange","floor","fraction","niceFraction","_factorize","result","sqrt","sort","pop","isNumber","isNaN","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_angleDiff","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","_lookup","table","cmp","hi","lo","mid","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","listenArrayEvents","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","_getStartAndCountOfVisiblePoints","meta","points","animationsDisabled","pointCount","count","_sorted","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","getPixelForValue","_scaleRangesChanged","xScale","yScale","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","changed","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","set","duration","easing","loop","describe","_fallback","_indexable","_scriptable","name","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","right","bottom","left","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","values","numeric","tickValue","ticks","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","Error","join","delete","createSubResolver","arr","filter","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","skip","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","next","d01","d12","s01","s12","fa","fb","monotoneAdjust","deltaK","mK","pointsLen","alphaK","betaK","tauK","squaredMagnitude","pointCurrent","pointAfter","monotoneCompute","valueAxis","pointBefore","iPixel","vPixel","splineCurveMonotone","slopeDelta","capControlPoint","pt","capBezierPoints","inArea","inAreaPrev","inAreaNext","_updateBezierControlPoints","controlPoints","spanGaps","cubicInterpolationMode","prev","tension","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","clientWidth","clientHeight","containerStyle","containerBorder","containerPadding","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","propertyFn","between","compare","normalize","normalizeSegment","getSegment","segment","startBound","endBound","_boundSegment","inside","subStart","prevValue","startIsBefore","endIsBefore","shouldStart","shouldStop","_boundSegments","segments","sub","findStartAndEnd","solidSegments","cur","stop","_computeSegments","segmentOptions","_loop","splitByStyles","completeLoop","_fullLoop","doSplitByStyles","chartContext","_chart","baseStyle","readStyle","_datasetIndex","prevStyle","addStyle","st","dir","p0","p0DataIndex","p1DataIndex","styleChanged","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","replacer","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","_duration","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","convertObjectDataToArray","vScale","iAxisKey","vAxisKey","adata","isStacked","stacked","getStackKey","indexScale","valueScale","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","dataset","createDataContext","dataIndex","raw","clearStacks","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","_index_","_value_","super","_dataset","_decimated","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","getBasePixel","lastPoint","updateControlPoints","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","startAngle","endAngle","getProps","getNearestCartesianItems","distanceMetric","minDistance","center","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","horizontal","isHorizontal","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","spacing","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","_length","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","ceil","majorStart","majorEnd","diff","reverseAlign","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","startPixel","endPixel","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","setStyle","lineCap","lineJoin","getLineMethod","stepped","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","minY","maxY","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","strokePathWithCache","path","_path","Path2D","strokePathDirect","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_interpolate","interpolated","inRange$1","hitRadius","PointElement","hoverBorderWidth","hoverRadius","mouseX","mouseY","inXRange","inYRange","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","_element","_args","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceMin","niceMax","numSpaces","decimalPlaces","relativeLabelSize","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","LinearScale","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","lastTick","LogarithmicScale","_zero","itemLookupComponentCss","ItemLookupComponentStyle0","ItemLookupComponent","onItemChange","newValue","updateChart","componentWillLoad","createChart","canvasEl","averagePrices","price","createdAt","averagePrice","minValue","maxValue","class","ref"],"sources":["node_modules/@kurkle/color/dist/color.esm.js","node_modules/chart.js/dist/chunks/helpers.segment.js","node_modules/chart.js/dist/chart.js","src/components/item-lookup-component/item-lookup-component.css?tag=item-lookup-component","src/components/item-lookup-component/item-lookup-component.tsx"],"sourcesContent":["/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.7\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.7\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.7\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n",":host {\r\n  display: block;\r\n}\r\n","import { Component, Prop, Watch, h } from '@stencil/core';\r\nimport { Chart, LineController, LineElement, PointElement, CategoryScale, LinearScale, Title,LogarithmicScale} from 'chart.js';\r\nimport { Item } from '../../types/Item';\r\n\r\nChart.register(LineController, LineElement, PointElement, CategoryScale, LinearScale,LogarithmicScale, Title);\r\n\r\n@Component({\r\n  tag: 'item-lookup-component',\r\n  styleUrl: 'item-lookup-component.css',\r\n  shadow: false,\r\n})\r\nexport class ItemLookupComponent {\r\n  canvasEl!: HTMLCanvasElement;\r\n  chart: Chart;\r\n  @Prop() item:Item;\r\n  @Watch('item')\r\n  onItemChange(newValue: Item) {\r\n    this.updateChart(newValue); // Mettre à jour le graphique avec les nouvelles données\r\n  }\r\n  componentWillLoad() {\r\n    this.createChart(this.item);\r\n  }\r\n  createChart(item: Item) {\r\n    const ctx = this.canvasEl.getContext('2d');\r\n    if (!ctx) {\r\n      console.error('Canvas context introuvable.');\r\n      return;\r\n    }\r\n\r\n    const labels = item.averagePrices.map((price) => price.createdAt);\r\n    const averagePrices = item.averagePrices.map((price) => price.averagePrice);\r\n\r\n    const minValue = Math.min(...averagePrices) * 0.1; // 10% en dessous du minimum\r\n    const maxValue = Math.max(...averagePrices) * 1.9; // 10% au-dessus du maximum\r\n\r\n    // Créer le graphique\r\n    this.chart = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labels, // Labels pour l'axe X\r\n        datasets: [\r\n          {\r\n            label: 'Prix moyen au fil du temps',\r\n            data: averagePrices, // Données pour l'axe Y\r\n            borderColor: 'rgb(75, 192, 192)',\r\n            fill: false,\r\n            tension: 0.1, // Lissage de la ligne\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Évolution des prix moyens',\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'category', // Échelle de catégories pour l'axe X\r\n            title: {\r\n              display: true,\r\n              text: 'Date',\r\n            },\r\n          },\r\n          y: {\r\n            type: 'linear', // Échelle linéaire pour l'axe Y\r\n            title: {\r\n              display: true,\r\n              text: 'Prix',\r\n            },\r\n            min: minValue, // Valeur minimale calculée\r\n            max: maxValue, // Valeur maximale calculée\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  updateChart(item: Item) {\r\n    if (!this.chart) {\r\n      this.createChart(item); // Si le graphique n'existe pas, le créer\r\n      return;\r\n    }\r\n\r\n    // Mettre à jour les données du graphique\r\n    this.chart.data.labels = item.averagePrices.map((price) => price.createdAt);\r\n    this.chart.data.datasets[0].data = item.averagePrices.map((price) => price.averagePrice);\r\n\r\n    // Mettre à jour les limites de l'axe Y\r\n    const averagePrices = item.averagePrices.map((price) => price.averagePrice);\r\n    this.chart.options.scales.y.min = Math.min(...averagePrices) * 0.1;\r\n    this.chart.options.scales.y.max = Math.max(...averagePrices) * 1.9;\r\n\r\n    // Rafraîchir le graphique\r\n    this.chart.update();\r\n  }\r\n  render() {\r\n    return (\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-6\">{this.item.name}</div>\r\n          <div class=\"col-6\"><canvas ref={el => (this.canvasEl = el as HTMLCanvasElement)} /></div>\r\n          \r\n        </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}